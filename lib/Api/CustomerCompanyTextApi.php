<?php
/**
 * CustomerCompanyTextApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BusinessPartner\ApiException;
use BeLenka\SAP\BusinessPartner\Configuration;
use BeLenka\SAP\BusinessPartner\HeaderSelector;
use BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * CustomerCompanyTextApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerCompanyTextApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet' => [
            'application/json',
        ],
        'aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost' => [
            'application/json',
        ],
        'aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete' => [
            'application/json',
        ],
        'aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet' => [
            'application/json',
        ],
        'aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch' => [
            'application/json',
        ],
        'aCustomerCompanyTextGet' => [
            'application/json',
        ],
        'aCustomerCompanyTextPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet
     *
     * Retrieves customer company text records attached to company data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper43|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet($customer, $company_code, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'][0])
    {
        list($response) = $this->aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetWithHttpInfo($customer, $company_code, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetWithHttpInfo
     *
     * Retrieves customer company text records attached to company data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper43|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetWithHttpInfo($customer, $company_code, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'][0])
    {
        $request = $this->aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest($customer, $company_code, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper43' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper43' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper43', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper43';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper43',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetAsync
     *
     * Retrieves customer company text records attached to company data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetAsync($customer, $company_code, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'][0])
    {
        return $this->aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetAsyncWithHttpInfo($customer, $company_code, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetAsyncWithHttpInfo
     *
     * Retrieves customer company text records attached to company data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetAsyncWithHttpInfo($customer, $company_code, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper43';
        $request = $this->aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest($customer, $company_code, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGetRequest($customer, $company_code, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling CustomerCompanyTextApi.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet'
            );
        }
        if (strlen($company_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$company_code" when calling CustomerCompanyTextApi.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet, must be smaller than or equal to 4.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling CustomerCompanyTextApi.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling CustomerCompanyTextApi.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_CustomerCompany(Customer=\'{Customer}\',CompanyCode=\'{CompanyCode}\')/to_CompanyText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'CompanyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost
     *
     * Creates customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'][0])
    {
        list($response) = $this->aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostWithHttpInfo($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostWithHttpInfo
     *
     * Creates customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostWithHttpInfo($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'][0])
    {
        $request = $this->aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostAsync
     *
     * Creates customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostAsync($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'][0])
    {
        return $this->aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostAsyncWithHttpInfo($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostAsyncWithHttpInfo
     *
     * Creates customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostAsyncWithHttpInfo($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType';
        $request = $this->aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPostRequest($customer, $company_code, $apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling CustomerCompanyTextApi.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'
            );
        }
        if (strlen($company_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$company_code" when calling CustomerCompanyTextApi.aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'apibusinesspartnera_customer_company_text_type_create' is set
        if ($apibusinesspartnera_customer_company_text_type_create === null || (is_array($apibusinesspartnera_customer_company_text_type_create) && count($apibusinesspartnera_customer_company_text_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_customer_company_text_type_create when calling aCustomerCompanyCustomerCustomerCompanyCodeCompanyCodeToCompanyTextPost'
            );
        }


        $resourcePath = '/A_CustomerCompany(Customer=\'{Customer}\',CompanyCode=\'{CompanyCode}\')/to_CompanyText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'CompanyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_customer_company_text_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_customer_company_text_type_create));
            } else {
                $httpBody = $apibusinesspartnera_customer_company_text_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete
     *
     * Deletes customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete($customer, $company_code, $language, $long_text_id, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {
        $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteWithHttpInfo($customer, $company_code, $language, $long_text_id, $contentType);
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteWithHttpInfo
     *
     * Deletes customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteWithHttpInfo($customer, $company_code, $language, $long_text_id, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {
        $request = $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest($customer, $company_code, $language, $long_text_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteAsync
     *
     * Deletes customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteAsync($customer, $company_code, $language, $long_text_id, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {
        return $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteAsyncWithHttpInfo($customer, $company_code, $language, $long_text_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteAsyncWithHttpInfo
     *
     * Deletes customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteAsyncWithHttpInfo($customer, $company_code, $language, $long_text_id, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {
        $returnType = '';
        $request = $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest($customer, $company_code, $language, $long_text_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDeleteRequest($customer, $company_code, $language, $long_text_id, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'
            );
        }
        if (strlen($company_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$company_code" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'long_text_id' is set
        if ($long_text_id === null || (is_array($long_text_id) && count($long_text_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $long_text_id when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete'
            );
        }
        if (strlen($long_text_id) > 4) {
            throw new \InvalidArgumentException('invalid length for "$long_text_id" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDDelete, must be smaller than or equal to 4.');
        }
        

        $resourcePath = '/A_CustomerCompanyText(Customer=\'{Customer}\',CompanyCode=\'{CompanyCode}\',Language=\'{Language}\',LongTextID=\'{LongTextID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'CompanyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($long_text_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LongTextID' . '}',
                ObjectSerializer::toPathValue($long_text_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet
     *
     * Retrieves customer company text data by using key fields.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet($customer, $company_code, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'][0])
    {
        list($response) = $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetWithHttpInfo($customer, $company_code, $language, $long_text_id, $select, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetWithHttpInfo
     *
     * Retrieves customer company text data by using key fields.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetWithHttpInfo($customer, $company_code, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'][0])
    {
        $request = $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest($customer, $company_code, $language, $long_text_id, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetAsync
     *
     * Retrieves customer company text data by using key fields.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetAsync($customer, $company_code, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'][0])
    {
        return $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetAsyncWithHttpInfo($customer, $company_code, $language, $long_text_id, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetAsyncWithHttpInfo
     *
     * Retrieves customer company text data by using key fields.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetAsyncWithHttpInfo($customer, $company_code, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType';
        $request = $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest($customer, $company_code, $language, $long_text_id, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGetRequest($customer, $company_code, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'
            );
        }
        if (strlen($company_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$company_code" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'long_text_id' is set
        if ($long_text_id === null || (is_array($long_text_id) && count($long_text_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $long_text_id when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet'
            );
        }
        if (strlen($long_text_id) > 4) {
            throw new \InvalidArgumentException('invalid length for "$long_text_id" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDGet, must be smaller than or equal to 4.');
        }
        
        

        $resourcePath = '/A_CustomerCompanyText(Customer=\'{Customer}\',CompanyCode=\'{CompanyCode}\',Language=\'{Language}\',LongTextID=\'{LongTextID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'CompanyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($long_text_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LongTextID' . '}',
                ObjectSerializer::toPathValue($long_text_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch
     *
     * Updates customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerCompanyTextType $modified_a_customer_company_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {
        $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchWithHttpInfo($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, $contentType);
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchWithHttpInfo
     *
     * Updates customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerCompanyTextType $modified_a_customer_company_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchWithHttpInfo($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {
        $request = $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchAsync
     *
     * Updates customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerCompanyTextType $modified_a_customer_company_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchAsync($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {
        return $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchAsyncWithHttpInfo($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchAsyncWithHttpInfo
     *
     * Updates customer company text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerCompanyTextType $modified_a_customer_company_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchAsyncWithHttpInfo($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {
        $returnType = '';
        $request = $this->aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $company_code Company Code (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerCompanyTextType $modified_a_customer_company_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatchRequest($customer, $company_code, $language, $long_text_id, $modified_a_customer_company_text_type, string $contentType = self::contentTypes['aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }
        if (strlen($company_code) > 4) {
            throw new \InvalidArgumentException('invalid length for "$company_code" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'long_text_id' is set
        if ($long_text_id === null || (is_array($long_text_id) && count($long_text_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $long_text_id when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }
        if (strlen($long_text_id) > 4) {
            throw new \InvalidArgumentException('invalid length for "$long_text_id" when calling CustomerCompanyTextApi.aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'modified_a_customer_company_text_type' is set
        if ($modified_a_customer_company_text_type === null || (is_array($modified_a_customer_company_text_type) && count($modified_a_customer_company_text_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_customer_company_text_type when calling aCustomerCompanyTextCustomerCustomerCompanyCodeCompanyCodeLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }


        $resourcePath = '/A_CustomerCompanyText(Customer=\'{Customer}\',CompanyCode=\'{CompanyCode}\',Language=\'{Language}\',LongTextID=\'{LongTextID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'CompanyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($long_text_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LongTextID' . '}',
                ObjectSerializer::toPathValue($long_text_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_customer_company_text_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_customer_company_text_type));
            } else {
                $httpBody = $modified_a_customer_company_text_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerCompanyTextGet
     *
     * Retrieves customer company text records attached to company data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper43|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerCompanyTextGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextGet'][0])
    {
        list($response) = $this->aCustomerCompanyTextGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerCompanyTextGetWithHttpInfo
     *
     * Retrieves customer company text records attached to company data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper43|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCompanyTextGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextGet'][0])
    {
        $request = $this->aCustomerCompanyTextGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper43' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper43' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper43', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper43';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper43',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCompanyTextGetAsync
     *
     * Retrieves customer company text records attached to company data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextGet'][0])
    {
        return $this->aCustomerCompanyTextGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCompanyTextGetAsyncWithHttpInfo
     *
     * Retrieves customer company text records attached to company data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper43';
        $request = $this->aCustomerCompanyTextGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCompanyTextGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCompanyTextGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerCompanyTextGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling CustomerCompanyTextApi.aCustomerCompanyTextGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling CustomerCompanyTextApi.aCustomerCompanyTextGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_CustomerCompanyText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerCompanyTextPost
     *
     * Creates customer company text data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerCompanyTextPost($apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyTextPost'][0])
    {
        list($response) = $this->aCustomerCompanyTextPostWithHttpInfo($apibusinesspartnera_customer_company_text_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerCompanyTextPostWithHttpInfo
     *
     * Creates customer company text data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCompanyTextPostWithHttpInfo($apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyTextPost'][0])
    {
        $request = $this->aCustomerCompanyTextPostRequest($apibusinesspartnera_customer_company_text_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCompanyTextPostAsync
     *
     * Creates customer company text data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextPostAsync($apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyTextPost'][0])
    {
        return $this->aCustomerCompanyTextPostAsyncWithHttpInfo($apibusinesspartnera_customer_company_text_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCompanyTextPostAsyncWithHttpInfo
     *
     * Creates customer company text data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCompanyTextPostAsyncWithHttpInfo($apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyTextPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerCompanyTextType';
        $request = $this->aCustomerCompanyTextPostRequest($apibusinesspartnera_customer_company_text_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCompanyTextPost'
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTextTypeCreate $apibusinesspartnera_customer_company_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCompanyTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCompanyTextPostRequest($apibusinesspartnera_customer_company_text_type_create, string $contentType = self::contentTypes['aCustomerCompanyTextPost'][0])
    {

        // verify the required parameter 'apibusinesspartnera_customer_company_text_type_create' is set
        if ($apibusinesspartnera_customer_company_text_type_create === null || (is_array($apibusinesspartnera_customer_company_text_type_create) && count($apibusinesspartnera_customer_company_text_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_customer_company_text_type_create when calling aCustomerCompanyTextPost'
            );
        }


        $resourcePath = '/A_CustomerCompanyText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_customer_company_text_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_customer_company_text_type_create));
            } else {
                $httpBody = $apibusinesspartnera_customer_company_text_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
