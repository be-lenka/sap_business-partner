<?php
/**
 * BusinessPartnerDataControllerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BusinessPartner\ApiException;
use BeLenka\SAP\BusinessPartner\Configuration;
use BeLenka\SAP\BusinessPartner\HeaderSelector;
use BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * BusinessPartnerDataControllerApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BusinessPartnerDataControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet' => [
            'application/json',
        ],
        'aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch' => [
            'application/json',
        ],
        'aBPDataControllerGet' => [
            'application/json',
        ],
        'aBPDataControllerPost' => [
            'application/json',
        ],
        'aBusinessPartnerBusinessPartnerToBPDataControllerGet' => [
            'application/json',
        ],
        'aBusinessPartnerBusinessPartnerToBPDataControllerPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet
     *
     * Get entity from A_BPDataController by key
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet($business_partner, $data_controller, $purpose_for_personal_data, $select = null, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'][0])
    {
        list($response) = $this->aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetWithHttpInfo($business_partner, $data_controller, $purpose_for_personal_data, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetWithHttpInfo
     *
     * Get entity from A_BPDataController by key
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetWithHttpInfo($business_partner, $data_controller, $purpose_for_personal_data, $select = null, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'][0])
    {
        $request = $this->aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetRequest($business_partner, $data_controller, $purpose_for_personal_data, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetAsync
     *
     * Get entity from A_BPDataController by key
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetAsync($business_partner, $data_controller, $purpose_for_personal_data, $select = null, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'][0])
    {
        return $this->aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetAsyncWithHttpInfo($business_partner, $data_controller, $purpose_for_personal_data, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetAsyncWithHttpInfo
     *
     * Get entity from A_BPDataController by key
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetAsyncWithHttpInfo($business_partner, $data_controller, $purpose_for_personal_data, $select = null, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType';
        $request = $this->aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetRequest($business_partner, $data_controller, $purpose_for_personal_data, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGetRequest($business_partner, $data_controller, $purpose_for_personal_data, $select = null, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerDataControllerApi.aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'data_controller' is set
        if ($data_controller === null || (is_array($data_controller) && count($data_controller) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_controller when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'
            );
        }
        if (strlen($data_controller) > 30) {
            throw new \InvalidArgumentException('invalid length for "$data_controller" when calling BusinessPartnerDataControllerApi.aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet, must be smaller than or equal to 30.');
        }
        
        // verify the required parameter 'purpose_for_personal_data' is set
        if ($purpose_for_personal_data === null || (is_array($purpose_for_personal_data) && count($purpose_for_personal_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purpose_for_personal_data when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet'
            );
        }
        if (strlen($purpose_for_personal_data) > 30) {
            throw new \InvalidArgumentException('invalid length for "$purpose_for_personal_data" when calling BusinessPartnerDataControllerApi.aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataGet, must be smaller than or equal to 30.');
        }
        
        

        $resourcePath = '/A_BPDataController(BusinessPartner=\'{BusinessPartner}\',DataController=\'{DataController}\',PurposeForPersonalData=\'{PurposeForPersonalData}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($data_controller !== null) {
            $resourcePath = str_replace(
                '{' . 'DataController' . '}',
                ObjectSerializer::toPathValue($data_controller),
                $resourcePath
            );
        }
        // path params
        if ($purpose_for_personal_data !== null) {
            $resourcePath = str_replace(
                '{' . 'PurposeForPersonalData' . '}',
                ObjectSerializer::toPathValue($purpose_for_personal_data),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch
     *
     * Updates a business partner data controller.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABPDataControllerType $modified_abp_data_controller_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'][0])
    {
        $this->aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchWithHttpInfo($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, $contentType);
    }

    /**
     * Operation aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchWithHttpInfo
     *
     * Updates a business partner data controller.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABPDataControllerType $modified_abp_data_controller_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchWithHttpInfo($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'][0])
    {
        $request = $this->aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchRequest($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchAsync
     *
     * Updates a business partner data controller.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABPDataControllerType $modified_abp_data_controller_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchAsync($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'][0])
    {
        return $this->aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchAsyncWithHttpInfo($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchAsyncWithHttpInfo
     *
     * Updates a business partner data controller.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABPDataControllerType $modified_abp_data_controller_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchAsyncWithHttpInfo($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'][0])
    {
        $returnType = '';
        $request = $this->aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchRequest($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $data_controller BP: Data Controller (required)
     * @param  string $purpose_for_personal_data BP: Purpose (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABPDataControllerType $modified_abp_data_controller_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatchRequest($business_partner, $data_controller, $purpose_for_personal_data, $modified_abp_data_controller_type, string $contentType = self::contentTypes['aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerDataControllerApi.aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'data_controller' is set
        if ($data_controller === null || (is_array($data_controller) && count($data_controller) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_controller when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'
            );
        }
        if (strlen($data_controller) > 30) {
            throw new \InvalidArgumentException('invalid length for "$data_controller" when calling BusinessPartnerDataControllerApi.aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch, must be smaller than or equal to 30.');
        }
        
        // verify the required parameter 'purpose_for_personal_data' is set
        if ($purpose_for_personal_data === null || (is_array($purpose_for_personal_data) && count($purpose_for_personal_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purpose_for_personal_data when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'
            );
        }
        if (strlen($purpose_for_personal_data) > 30) {
            throw new \InvalidArgumentException('invalid length for "$purpose_for_personal_data" when calling BusinessPartnerDataControllerApi.aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch, must be smaller than or equal to 30.');
        }
        
        // verify the required parameter 'modified_abp_data_controller_type' is set
        if ($modified_abp_data_controller_type === null || (is_array($modified_abp_data_controller_type) && count($modified_abp_data_controller_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_abp_data_controller_type when calling aBPDataControllerBusinessPartnerBusinessPartnerDataControllerDataControllerPurposeForPersonalDataPurposeForPersonalDataPatch'
            );
        }


        $resourcePath = '/A_BPDataController(BusinessPartner=\'{BusinessPartner}\',DataController=\'{DataController}\',PurposeForPersonalData=\'{PurposeForPersonalData}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($data_controller !== null) {
            $resourcePath = str_replace(
                '{' . 'DataController' . '}',
                ObjectSerializer::toPathValue($data_controller),
                $resourcePath
            );
        }
        // path params
        if ($purpose_for_personal_data !== null) {
            $resourcePath = str_replace(
                '{' . 'PurposeForPersonalData' . '}',
                ObjectSerializer::toPathValue($purpose_for_personal_data),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_abp_data_controller_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_abp_data_controller_type));
            } else {
                $httpBody = $modified_abp_data_controller_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBPDataControllerGet
     *
     * Retrieves business partner data controllers by using key fields.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper13|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBPDataControllerGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPDataControllerGet'][0])
    {
        list($response) = $this->aBPDataControllerGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBPDataControllerGetWithHttpInfo
     *
     * Retrieves business partner data controllers by using key fields.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper13|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBPDataControllerGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPDataControllerGet'][0])
    {
        $request = $this->aBPDataControllerGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper13' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper13' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper13', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper13';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper13',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBPDataControllerGetAsync
     *
     * Retrieves business partner data controllers by using key fields.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPDataControllerGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPDataControllerGet'][0])
    {
        return $this->aBPDataControllerGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBPDataControllerGetAsyncWithHttpInfo
     *
     * Retrieves business partner data controllers by using key fields.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPDataControllerGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPDataControllerGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper13';
        $request = $this->aBPDataControllerGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBPDataControllerGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBPDataControllerGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPDataControllerGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BusinessPartnerDataControllerApi.aBPDataControllerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BusinessPartnerDataControllerApi.aBPDataControllerGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BPDataController';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBPDataControllerPost
     *
     * Creates a new business partner data controller.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBPDataControllerPost($apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBPDataControllerPost'][0])
    {
        list($response) = $this->aBPDataControllerPostWithHttpInfo($apibusinesspartnerabp_data_controller_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBPDataControllerPostWithHttpInfo
     *
     * Creates a new business partner data controller.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBPDataControllerPostWithHttpInfo($apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBPDataControllerPost'][0])
    {
        $request = $this->aBPDataControllerPostRequest($apibusinesspartnerabp_data_controller_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBPDataControllerPostAsync
     *
     * Creates a new business partner data controller.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPDataControllerPostAsync($apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBPDataControllerPost'][0])
    {
        return $this->aBPDataControllerPostAsyncWithHttpInfo($apibusinesspartnerabp_data_controller_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBPDataControllerPostAsyncWithHttpInfo
     *
     * Creates a new business partner data controller.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPDataControllerPostAsyncWithHttpInfo($apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBPDataControllerPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType';
        $request = $this->aBPDataControllerPostRequest($apibusinesspartnerabp_data_controller_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBPDataControllerPost'
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBPDataControllerPostRequest($apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBPDataControllerPost'][0])
    {

        // verify the required parameter 'apibusinesspartnerabp_data_controller_type_create' is set
        if ($apibusinesspartnerabp_data_controller_type_create === null || (is_array($apibusinesspartnerabp_data_controller_type_create) && count($apibusinesspartnerabp_data_controller_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnerabp_data_controller_type_create when calling aBPDataControllerPost'
            );
        }


        $resourcePath = '/A_BPDataController';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnerabp_data_controller_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnerabp_data_controller_type_create));
            } else {
                $httpBody = $apibusinesspartnerabp_data_controller_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBPDataControllerGet
     *
     * Retrieves business partner data controllers by using key fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper13|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerGet($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'][0])
    {
        list($response) = $this->aBusinessPartnerBusinessPartnerToBPDataControllerGetWithHttpInfo($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBPDataControllerGetWithHttpInfo
     *
     * Retrieves business partner data controllers by using key fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper13|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerGetWithHttpInfo($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'][0])
    {
        $request = $this->aBusinessPartnerBusinessPartnerToBPDataControllerGetRequest($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper13' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper13' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper13', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper13';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper13',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBPDataControllerGetAsync
     *
     * Retrieves business partner data controllers by using key fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerGetAsync($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'][0])
    {
        return $this->aBusinessPartnerBusinessPartnerToBPDataControllerGetAsyncWithHttpInfo($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBPDataControllerGetAsyncWithHttpInfo
     *
     * Retrieves business partner data controllers by using key fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerGetAsyncWithHttpInfo($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper13';
        $request = $this->aBusinessPartnerBusinessPartnerToBPDataControllerGetRequest($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerBusinessPartnerToBPDataControllerGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerGetRequest($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerBusinessPartnerToBPDataControllerGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerDataControllerApi.aBusinessPartnerBusinessPartnerToBPDataControllerGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BusinessPartnerDataControllerApi.aBusinessPartnerBusinessPartnerToBPDataControllerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BusinessPartnerDataControllerApi.aBusinessPartnerBusinessPartnerToBPDataControllerGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartner(\'{BusinessPartner}\')/to_BPDataController';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBPDataControllerPost
     *
     * Creates a new business partner data controller.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerPost($business_partner, $apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'][0])
    {
        list($response) = $this->aBusinessPartnerBusinessPartnerToBPDataControllerPostWithHttpInfo($business_partner, $apibusinesspartnerabp_data_controller_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBPDataControllerPostWithHttpInfo
     *
     * Creates a new business partner data controller.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerPostWithHttpInfo($business_partner, $apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'][0])
    {
        $request = $this->aBusinessPartnerBusinessPartnerToBPDataControllerPostRequest($business_partner, $apibusinesspartnerabp_data_controller_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBPDataControllerPostAsync
     *
     * Creates a new business partner data controller.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerPostAsync($business_partner, $apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'][0])
    {
        return $this->aBusinessPartnerBusinessPartnerToBPDataControllerPostAsyncWithHttpInfo($business_partner, $apibusinesspartnerabp_data_controller_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBPDataControllerPostAsyncWithHttpInfo
     *
     * Creates a new business partner data controller.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerPostAsyncWithHttpInfo($business_partner, $apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPDataControllerType';
        $request = $this->aBusinessPartnerBusinessPartnerToBPDataControllerPostRequest($business_partner, $apibusinesspartnerabp_data_controller_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerBusinessPartnerToBPDataControllerPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPDataControllerTypeCreate $apibusinesspartnerabp_data_controller_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerBusinessPartnerToBPDataControllerPostRequest($business_partner, $apibusinesspartnerabp_data_controller_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBPDataControllerPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerBusinessPartnerToBPDataControllerPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerDataControllerApi.aBusinessPartnerBusinessPartnerToBPDataControllerPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnerabp_data_controller_type_create' is set
        if ($apibusinesspartnerabp_data_controller_type_create === null || (is_array($apibusinesspartnerabp_data_controller_type_create) && count($apibusinesspartnerabp_data_controller_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnerabp_data_controller_type_create when calling aBusinessPartnerBusinessPartnerToBPDataControllerPost'
            );
        }


        $resourcePath = '/A_BusinessPartner(\'{BusinessPartner}\')/to_BPDataController';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnerabp_data_controller_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnerabp_data_controller_type_create));
            } else {
                $httpBody = $apibusinesspartnerabp_data_controller_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
