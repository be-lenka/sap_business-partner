<?php
/**
 * EmailAddressApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BusinessPartner\ApiException;
use BeLenka\SAP\BusinessPartner\Configuration;
use BeLenka\SAP\BusinessPartner\HeaderSelector;
use BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * EmailAddressApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EmailAddressApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete' => [
            'application/json',
        ],
        'aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet' => [
            'application/json',
        ],
        'aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch' => [
            'application/json',
        ],
        'aAddressEmailAddressGet' => [
            'application/json',
        ],
        'aAddressEmailAddressPost' => [
            'application/json',
        ],
        'aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet' => [
            'application/json',
        ],
        'aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete
     *
     * Deletes email address record by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete($address_id, $person, $ordinal_number, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'][0])
    {
        $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteWithHttpInfo($address_id, $person, $ordinal_number, $contentType);
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteWithHttpInfo
     *
     * Deletes email address record by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteWithHttpInfo($address_id, $person, $ordinal_number, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'][0])
    {
        $request = $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest($address_id, $person, $ordinal_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteAsync
     *
     * Deletes email address record by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteAsync($address_id, $person, $ordinal_number, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'][0])
    {
        return $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteAsyncWithHttpInfo($address_id, $person, $ordinal_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteAsyncWithHttpInfo
     *
     * Deletes email address record by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteAsyncWithHttpInfo($address_id, $person, $ordinal_number, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'][0])
    {
        $returnType = '';
        $request = $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest($address_id, $person, $ordinal_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDeleteRequest($address_id, $person, $ordinal_number, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'][0])
    {

        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'person' is set
        if ($person === null || (is_array($person) && count($person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $person when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'
            );
        }
        if (strlen($person) > 10) {
            throw new \InvalidArgumentException('invalid length for "$person" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'ordinal_number' is set
        if ($ordinal_number === null || (is_array($ordinal_number) && count($ordinal_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ordinal_number when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete'
            );
        }
        if (strlen($ordinal_number) > 3) {
            throw new \InvalidArgumentException('invalid length for "$ordinal_number" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberDelete, must be smaller than or equal to 3.');
        }
        

        $resourcePath = '/A_AddressEmailAddress(AddressID=\'{AddressID}\',Person=\'{Person}\',OrdinalNumber=\'{OrdinalNumber}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($person !== null) {
            $resourcePath = str_replace(
                '{' . 'Person' . '}',
                ObjectSerializer::toPathValue($person),
                $resourcePath
            );
        }
        // path params
        if ($ordinal_number !== null) {
            $resourcePath = str_replace(
                '{' . 'OrdinalNumber' . '}',
                ObjectSerializer::toPathValue($ordinal_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet
     *
     * Retrieves email address data by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet($address_id, $person, $ordinal_number, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'][0])
    {
        list($response) = $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetWithHttpInfo($address_id, $person, $ordinal_number, $select, $contentType);
        return $response;
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetWithHttpInfo
     *
     * Retrieves email address data by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetWithHttpInfo($address_id, $person, $ordinal_number, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'][0])
    {
        $request = $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest($address_id, $person, $ordinal_number, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetAsync
     *
     * Retrieves email address data by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetAsync($address_id, $person, $ordinal_number, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'][0])
    {
        return $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetAsyncWithHttpInfo($address_id, $person, $ordinal_number, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetAsyncWithHttpInfo
     *
     * Retrieves email address data by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetAsyncWithHttpInfo($address_id, $person, $ordinal_number, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
        $request = $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest($address_id, $person, $ordinal_number, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGetRequest($address_id, $person, $ordinal_number, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'][0])
    {

        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'person' is set
        if ($person === null || (is_array($person) && count($person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $person when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'
            );
        }
        if (strlen($person) > 10) {
            throw new \InvalidArgumentException('invalid length for "$person" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'ordinal_number' is set
        if ($ordinal_number === null || (is_array($ordinal_number) && count($ordinal_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ordinal_number when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet'
            );
        }
        if (strlen($ordinal_number) > 3) {
            throw new \InvalidArgumentException('invalid length for "$ordinal_number" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberGet, must be smaller than or equal to 3.');
        }
        
        

        $resourcePath = '/A_AddressEmailAddress(AddressID=\'{AddressID}\',Person=\'{Person}\',OrdinalNumber=\'{OrdinalNumber}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($person !== null) {
            $resourcePath = str_replace(
                '{' . 'Person' . '}',
                ObjectSerializer::toPathValue($person),
                $resourcePath
            );
        }
        // path params
        if ($ordinal_number !== null) {
            $resourcePath = str_replace(
                '{' . 'OrdinalNumber' . '}',
                ObjectSerializer::toPathValue($ordinal_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch
     *
     * Updates email address record by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedAAddressEmailAddressType $modified_a_address_email_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'][0])
    {
        $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchWithHttpInfo($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, $contentType);
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchWithHttpInfo
     *
     * Updates email address record by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedAAddressEmailAddressType $modified_a_address_email_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchWithHttpInfo($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'][0])
    {
        $request = $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchAsync
     *
     * Updates email address record by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedAAddressEmailAddressType $modified_a_address_email_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchAsync($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'][0])
    {
        return $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchAsyncWithHttpInfo($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchAsyncWithHttpInfo
     *
     * Updates email address record by using key fields.
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedAAddressEmailAddressType $modified_a_address_email_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchAsyncWithHttpInfo($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'][0])
    {
        $returnType = '';
        $request = $this->aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'
     *
     * @param  string $address_id Address Number (required)
     * @param  string $person Person Number (required)
     * @param  string $ordinal_number Sequence Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedAAddressEmailAddressType $modified_a_address_email_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatchRequest($address_id, $person, $ordinal_number, $modified_a_address_email_address_type, string $contentType = self::contentTypes['aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'][0])
    {

        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'person' is set
        if ($person === null || (is_array($person) && count($person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $person when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'
            );
        }
        if (strlen($person) > 10) {
            throw new \InvalidArgumentException('invalid length for "$person" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'ordinal_number' is set
        if ($ordinal_number === null || (is_array($ordinal_number) && count($ordinal_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ordinal_number when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'
            );
        }
        if (strlen($ordinal_number) > 3) {
            throw new \InvalidArgumentException('invalid length for "$ordinal_number" when calling EmailAddressApi.aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'modified_a_address_email_address_type' is set
        if ($modified_a_address_email_address_type === null || (is_array($modified_a_address_email_address_type) && count($modified_a_address_email_address_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_address_email_address_type when calling aAddressEmailAddressAddressIDAddressIDPersonPersonOrdinalNumberOrdinalNumberPatch'
            );
        }


        $resourcePath = '/A_AddressEmailAddress(AddressID=\'{AddressID}\',Person=\'{Person}\',OrdinalNumber=\'{OrdinalNumber}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($person !== null) {
            $resourcePath = str_replace(
                '{' . 'Person' . '}',
                ObjectSerializer::toPathValue($person),
                $resourcePath
            );
        }
        // path params
        if ($ordinal_number !== null) {
            $resourcePath = str_replace(
                '{' . 'OrdinalNumber' . '}',
                ObjectSerializer::toPathValue($ordinal_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_address_email_address_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_address_email_address_type));
            } else {
                $httpBody = $modified_a_address_email_address_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aAddressEmailAddressGet
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aAddressEmailAddressGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressGet'][0])
    {
        list($response) = $this->aAddressEmailAddressGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aAddressEmailAddressGetWithHttpInfo
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aAddressEmailAddressGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressGet'][0])
    {
        $request = $this->aAddressEmailAddressGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aAddressEmailAddressGetAsync
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressGet'][0])
    {
        return $this->aAddressEmailAddressGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aAddressEmailAddressGetAsyncWithHttpInfo
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper';
        $request = $this->aAddressEmailAddressGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aAddressEmailAddressGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aAddressEmailAddressGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aAddressEmailAddressGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling EmailAddressApi.aAddressEmailAddressGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling EmailAddressApi.aAddressEmailAddressGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_AddressEmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aAddressEmailAddressPost
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aAddressEmailAddressPost($apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aAddressEmailAddressPost'][0])
    {
        list($response) = $this->aAddressEmailAddressPostWithHttpInfo($apibusinesspartnera_address_email_address_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aAddressEmailAddressPostWithHttpInfo
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aAddressEmailAddressPostWithHttpInfo($apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aAddressEmailAddressPost'][0])
    {
        $request = $this->aAddressEmailAddressPostRequest($apibusinesspartnera_address_email_address_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aAddressEmailAddressPostAsync
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressPostAsync($apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aAddressEmailAddressPost'][0])
    {
        return $this->aAddressEmailAddressPostAsyncWithHttpInfo($apibusinesspartnera_address_email_address_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aAddressEmailAddressPostAsyncWithHttpInfo
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aAddressEmailAddressPostAsyncWithHttpInfo($apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aAddressEmailAddressPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
        $request = $this->aAddressEmailAddressPostRequest($apibusinesspartnera_address_email_address_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aAddressEmailAddressPost'
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aAddressEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aAddressEmailAddressPostRequest($apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aAddressEmailAddressPost'][0])
    {

        // verify the required parameter 'apibusinesspartnera_address_email_address_type_create' is set
        if ($apibusinesspartnera_address_email_address_type_create === null || (is_array($apibusinesspartnera_address_email_address_type_create) && count($apibusinesspartnera_address_email_address_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_address_email_address_type_create when calling aAddressEmailAddressPost'
            );
        }


        $resourcePath = '/A_AddressEmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_address_email_address_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_address_email_address_type_create));
            } else {
                $httpBody = $apibusinesspartnera_address_email_address_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'][0])
    {
        list($response) = $this->aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetWithHttpInfo($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetWithHttpInfo
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetWithHttpInfo($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'][0])
    {
        $request = $this->aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetRequest($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetAsync
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetAsync($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'][0])
    {
        return $this->aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper';
        $request = $this->aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetRequest($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGetRequest($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'][0])
    {

        // verify the required parameter 'relationship_number' is set
        if ($relationship_number === null || (is_array($relationship_number) && count($relationship_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_number when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (strlen($relationship_number) > 12) {
            throw new \InvalidArgumentException('invalid length for "$relationship_number" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet, must be smaller than or equal to 12.');
        }
        
        // verify the required parameter 'business_partner_company' is set
        if ($business_partner_company === null || (is_array($business_partner_company) && count($business_partner_company) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner_company when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (strlen($business_partner_company) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner_company" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'business_partner_person' is set
        if ($business_partner_person === null || (is_array($business_partner_person) && count($business_partner_person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner_person when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (strlen($business_partner_person) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner_person" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'validity_end_date' is set
        if ($validity_end_date === null || (is_array($validity_end_date) && count($validity_end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validity_end_date when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (!preg_match("/^[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00$/", $validity_end_date)) {
            throw new \InvalidArgumentException("invalid value for \"validity_end_date\" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet, must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00$/.");
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BPContactToAddress(RelationshipNumber=\'{RelationshipNumber}\',BusinessPartnerCompany=\'{BusinessPartnerCompany}\',BusinessPartnerPerson=\'{BusinessPartnerPerson}\',ValidityEndDate=datetime\'{ValidityEndDate}\',AddressID=\'{AddressID}\')/to_EmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($relationship_number !== null) {
            $resourcePath = str_replace(
                '{' . 'RelationshipNumber' . '}',
                ObjectSerializer::toPathValue($relationship_number),
                $resourcePath
            );
        }
        // path params
        if ($business_partner_company !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartnerCompany' . '}',
                ObjectSerializer::toPathValue($business_partner_company),
                $resourcePath
            );
        }
        // path params
        if ($business_partner_person !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartnerPerson' . '}',
                ObjectSerializer::toPathValue($business_partner_person),
                $resourcePath
            );
        }
        // path params
        if ($validity_end_date !== null) {
            $resourcePath = str_replace(
                '{' . 'ValidityEndDate' . '}',
                ObjectSerializer::toPathValue($validity_end_date),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'][0])
    {
        list($response) = $this->aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostWithHttpInfo($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostWithHttpInfo
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostWithHttpInfo($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'][0])
    {
        $request = $this->aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostRequest($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostAsync
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostAsync($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'][0])
    {
        return $this->aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
        $request = $this->aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostRequest($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'
     *
     * @param  string $relationship_number BP Relationship Number (required)
     * @param  string $business_partner_company Business Partner Number (required)
     * @param  string $business_partner_person Business Partner Number (required)
     * @param  string $validity_end_date Validity Date (Valid To) (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPostRequest($relationship_number, $business_partner_company, $business_partner_person, $validity_end_date, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'][0])
    {

        // verify the required parameter 'relationship_number' is set
        if ($relationship_number === null || (is_array($relationship_number) && count($relationship_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $relationship_number when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (strlen($relationship_number) > 12) {
            throw new \InvalidArgumentException('invalid length for "$relationship_number" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost, must be smaller than or equal to 12.');
        }
        
        // verify the required parameter 'business_partner_company' is set
        if ($business_partner_company === null || (is_array($business_partner_company) && count($business_partner_company) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner_company when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (strlen($business_partner_company) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner_company" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'business_partner_person' is set
        if ($business_partner_person === null || (is_array($business_partner_person) && count($business_partner_person) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner_person when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (strlen($business_partner_person) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner_person" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'validity_end_date' is set
        if ($validity_end_date === null || (is_array($validity_end_date) && count($validity_end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $validity_end_date when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (!preg_match("/^[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00$/", $validity_end_date)) {
            throw new \InvalidArgumentException("invalid value for \"validity_end_date\" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost, must conform to the pattern /^[0-9]{4}-[0-9]{2}-[0-9]{2}T00:00$/.");
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling EmailAddressApi.aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_address_email_address_type_create' is set
        if ($apibusinesspartnera_address_email_address_type_create === null || (is_array($apibusinesspartnera_address_email_address_type_create) && count($apibusinesspartnera_address_email_address_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_address_email_address_type_create when calling aBPContactToAddressRelationshipNumberRelationshipNumberBusinessPartnerCompanyBusinessPartnerCompanyBusinessPartnerPersonBusinessPartnerPersonValidityEndDatedatetimeValidityEndDateAddressIDAddressIDToEmailAddressPost'
            );
        }


        $resourcePath = '/A_BPContactToAddress(RelationshipNumber=\'{RelationshipNumber}\',BusinessPartnerCompany=\'{BusinessPartnerCompany}\',BusinessPartnerPerson=\'{BusinessPartnerPerson}\',ValidityEndDate=datetime\'{ValidityEndDate}\',AddressID=\'{AddressID}\')/to_EmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($relationship_number !== null) {
            $resourcePath = str_replace(
                '{' . 'RelationshipNumber' . '}',
                ObjectSerializer::toPathValue($relationship_number),
                $resourcePath
            );
        }
        // path params
        if ($business_partner_company !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartnerCompany' . '}',
                ObjectSerializer::toPathValue($business_partner_company),
                $resourcePath
            );
        }
        // path params
        if ($business_partner_person !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartnerPerson' . '}',
                ObjectSerializer::toPathValue($business_partner_person),
                $resourcePath
            );
        }
        // path params
        if ($validity_end_date !== null) {
            $resourcePath = str_replace(
                '{' . 'ValidityEndDate' . '}',
                ObjectSerializer::toPathValue($validity_end_date),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_address_email_address_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_address_email_address_type_create));
            } else {
                $httpBody = $apibusinesspartnera_address_email_address_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetWithHttpInfo
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsync
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsync($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling EmailAddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling EmailAddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling EmailAddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling EmailAddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_EmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostWithHttpInfo
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsync
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsync($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling EmailAddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling EmailAddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_address_email_address_type_create' is set
        if ($apibusinesspartnera_address_email_address_type_create === null || (is_array($apibusinesspartnera_address_email_address_type_create) && count($apibusinesspartnera_address_email_address_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_address_email_address_type_create when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_EmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_address_email_address_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_address_email_address_type_create));
            } else {
                $httpBody = $apibusinesspartnera_address_email_address_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
