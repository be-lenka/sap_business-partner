<?php
/**
 * AddressApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BusinessPartner\ApiException;
use BeLenka\SAP\BusinessPartner\Configuration;
use BeLenka\SAP\BusinessPartner\HeaderSelector;
use BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * AddressApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AddressApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost' => [
            'application/json',
        ],
        'aBusinessPartnerAddressGet' => [
            'application/json',
        ],
        'aBusinessPartnerAddressPost' => [
            'application/json',
        ],
        'aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet' => [
            'application/json',
        ],
        'aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete
     *
     * Deletes business partner address record identified by address ID and business partner number.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete($business_partner, $address_id, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'][0])
    {
        $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteWithHttpInfo($business_partner, $address_id, $contentType);
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteWithHttpInfo
     *
     * Deletes business partner address record identified by address ID and business partner number.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteWithHttpInfo($business_partner, $address_id, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest($business_partner, $address_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteAsync
     *
     * Deletes business partner address record identified by address ID and business partner number.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteAsync($business_partner, $address_id, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteAsyncWithHttpInfo($business_partner, $address_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteAsyncWithHttpInfo
     *
     * Deletes business partner address record identified by address ID and business partner number.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteAsyncWithHttpInfo($business_partner, $address_id, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'][0])
    {
        $returnType = '';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest($business_partner, $address_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDeleteRequest($business_partner, $address_id, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDDelete, must be smaller than or equal to 10.');
        }
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet
     *
     * Retrieves business partner address data by using the key field.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet($business_partner, $address_id, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetWithHttpInfo($business_partner, $address_id, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetWithHttpInfo
     *
     * Retrieves business partner address data by using the key field.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetWithHttpInfo($business_partner, $address_id, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest($business_partner, $address_id, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetAsync
     *
     * Retrieves business partner address data by using the key field.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetAsync($business_partner, $address_id, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetAsyncWithHttpInfo($business_partner, $address_id, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetAsyncWithHttpInfo
     *
     * Retrieves business partner address data by using the key field.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetAsyncWithHttpInfo($business_partner, $address_id, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest($business_partner, $address_id, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGetRequest($business_partner, $address_id, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch
     *
     * Updates business partner address data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusinessPartnerAddressType $modified_a_business_partner_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch($business_partner, $address_id, $modified_a_business_partner_address_type, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'][0])
    {
        $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchWithHttpInfo($business_partner, $address_id, $modified_a_business_partner_address_type, $contentType);
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchWithHttpInfo
     *
     * Updates business partner address data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusinessPartnerAddressType $modified_a_business_partner_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchWithHttpInfo($business_partner, $address_id, $modified_a_business_partner_address_type, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest($business_partner, $address_id, $modified_a_business_partner_address_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchAsync
     *
     * Updates business partner address data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusinessPartnerAddressType $modified_a_business_partner_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchAsync($business_partner, $address_id, $modified_a_business_partner_address_type, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchAsyncWithHttpInfo($business_partner, $address_id, $modified_a_business_partner_address_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchAsyncWithHttpInfo
     *
     * Updates business partner address data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusinessPartnerAddressType $modified_a_business_partner_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchAsyncWithHttpInfo($business_partner, $address_id, $modified_a_business_partner_address_type, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'][0])
    {
        $returnType = '';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest($business_partner, $address_id, $modified_a_business_partner_address_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusinessPartnerAddressType $modified_a_business_partner_address_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatchRequest($business_partner, $address_id, $modified_a_business_partner_address_type, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'modified_a_business_partner_address_type' is set
        if ($modified_a_business_partner_address_type === null || (is_array($modified_a_business_partner_address_type) && count($modified_a_business_partner_address_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_business_partner_address_type when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDPatch'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_business_partner_address_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_business_partner_address_type));
            } else {
                $httpBody = $modified_a_business_partner_address_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet
     *
     * Retrieves address usage linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper20|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetWithHttpInfo
     *
     * Retrieves address usage linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper20|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper20' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper20' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper20', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper20';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper20',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetAsync
     *
     * Retrieves address usage linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetAsync($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetAsyncWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetAsyncWithHttpInfo
     *
     * Retrieves address usage linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetAsyncWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper20';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGetRequest($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsageGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_AddressUsage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost
     *
     * Creates an address usage record linked to a existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABuPaAddressUsageTypeCreate $apibusinesspartnerabu_pa_address_usage_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABuPaAddressUsageType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostWithHttpInfo($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostWithHttpInfo
     *
     * Creates an address usage record linked to a existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABuPaAddressUsageTypeCreate $apibusinesspartnerabu_pa_address_usage_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABuPaAddressUsageType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostWithHttpInfo($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABuPaAddressUsageType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABuPaAddressUsageType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABuPaAddressUsageType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABuPaAddressUsageType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABuPaAddressUsageType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostAsync
     *
     * Creates an address usage record linked to a existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABuPaAddressUsageTypeCreate $apibusinesspartnerabu_pa_address_usage_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostAsync($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostAsyncWithHttpInfo
     *
     * Creates an address usage record linked to a existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABuPaAddressUsageTypeCreate $apibusinesspartnerabu_pa_address_usage_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABuPaAddressUsageType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABuPaAddressUsageTypeCreate $apibusinesspartnerabu_pa_address_usage_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePostRequest($business_partner, $address_id, $apibusinesspartnerabu_pa_address_usage_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnerabu_pa_address_usage_type_create' is set
        if ($apibusinesspartnerabu_pa_address_usage_type_create === null || (is_array($apibusinesspartnerabu_pa_address_usage_type_create) && count($apibusinesspartnerabu_pa_address_usage_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnerabu_pa_address_usage_type_create when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToAddressUsagePost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_AddressUsage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnerabu_pa_address_usage_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnerabu_pa_address_usage_type_create));
            } else {
                $httpBody = $apibusinesspartnerabu_pa_address_usage_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet
     *
     * Retrieves address dependent data for the business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABPAddrDepdntIntlLocNumberType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet($business_partner, $address_id, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetWithHttpInfo($business_partner, $address_id, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetWithHttpInfo
     *
     * Retrieves address dependent data for the business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABPAddrDepdntIntlLocNumberType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetWithHttpInfo($business_partner, $address_id, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest($business_partner, $address_id, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABPAddrDepdntIntlLocNumberType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABPAddrDepdntIntlLocNumberType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABPAddrDepdntIntlLocNumberType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPAddrDepdntIntlLocNumberType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABPAddrDepdntIntlLocNumberType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetAsync
     *
     * Retrieves address dependent data for the business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetAsync($business_partner, $address_id, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetAsyncWithHttpInfo($business_partner, $address_id, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetAsyncWithHttpInfo
     *
     * Retrieves address dependent data for the business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetAsyncWithHttpInfo($business_partner, $address_id, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPAddrDepdntIntlLocNumberType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest($business_partner, $address_id, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGetRequest($business_partner, $address_id, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPAddrDepdntIntlLocNumberGet, must be smaller than or equal to 10.');
        }
        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_BPAddrDepdntIntlLocNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet
     *
     * Get entities from related to_BPIntlAddressVersion
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper18|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetWithHttpInfo
     *
     * Get entities from related to_BPIntlAddressVersion
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper18|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper18' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper18' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper18', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper18';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper18',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetAsync
     *
     * Get entities from related to_BPIntlAddressVersion
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetAsync($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetAsyncWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetAsyncWithHttpInfo
     *
     * Get entities from related to_BPIntlAddressVersion
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetAsyncWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper18';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGetRequest($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_BPIntlAddressVersion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost
     *
     * Add new entity to related to_BPIntlAddressVersion
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate $apibusinesspartnerabp_intl_address_version_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABPIntlAddressVersionType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostWithHttpInfo
     *
     * Add new entity to related to_BPIntlAddressVersion
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate $apibusinesspartnerabp_intl_address_version_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABPIntlAddressVersionType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABPIntlAddressVersionType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABPIntlAddressVersionType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABPIntlAddressVersionType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPIntlAddressVersionType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABPIntlAddressVersionType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostAsync
     *
     * Add new entity to related to_BPIntlAddressVersion
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate $apibusinesspartnerabp_intl_address_version_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostAsync($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostAsyncWithHttpInfo
     *
     * Add new entity to related to_BPIntlAddressVersion
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate $apibusinesspartnerabp_intl_address_version_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABPIntlAddressVersionType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate $apibusinesspartnerabp_intl_address_version_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPostRequest($business_partner, $address_id, $apibusinesspartnerabp_intl_address_version_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnerabp_intl_address_version_type_create' is set
        if ($apibusinesspartnerabp_intl_address_version_type_create === null || (is_array($apibusinesspartnerabp_intl_address_version_type_create) && count($apibusinesspartnerabp_intl_address_version_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnerabp_intl_address_version_type_create when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToBPIntlAddressVersionPost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_BPIntlAddressVersion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnerabp_intl_address_version_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnerabp_intl_address_version_type_create));
            } else {
                $httpBody = $apibusinesspartnerabp_intl_address_version_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetWithHttpInfo
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsync
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsync($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo
     *
     * Retrieves email address data linked to business partner address fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetAsyncWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGetRequest($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_EmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostWithHttpInfo
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsync
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsync($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo
     *
     * Creates a new email address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressEmailAddressType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressEmailAddressTypeCreate $apibusinesspartnera_address_email_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_email_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_address_email_address_type_create' is set
        if ($apibusinesspartnera_address_email_address_type_create === null || (is_array($apibusinesspartnera_address_email_address_type_create) && count($apibusinesspartnera_address_email_address_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_address_email_address_type_create when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToEmailAddressPost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_EmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_address_email_address_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_address_email_address_type_create));
            } else {
                $httpBody = $apibusinesspartnera_address_email_address_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet
     *
     * Retrieves fax address data linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper1|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetWithHttpInfo
     *
     * Retrieves fax address data linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper1|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetAsync
     *
     * Retrieves fax address data linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetAsync($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetAsyncWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetAsyncWithHttpInfo
     *
     * Retrieves fax address data linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetAsyncWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper1';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGetRequest($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_FaxNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost
     *
     * Creates a new fax address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressFaxNumberTypeCreate $apibusinesspartnera_address_fax_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressFaxNumberType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostWithHttpInfo
     *
     * Creates a new fax address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressFaxNumberTypeCreate $apibusinesspartnera_address_fax_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressFaxNumberType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressFaxNumberType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressFaxNumberType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressFaxNumberType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressFaxNumberType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressFaxNumberType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostAsync
     *
     * Creates a new fax address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressFaxNumberTypeCreate $apibusinesspartnera_address_fax_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostAsync($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostAsyncWithHttpInfo
     *
     * Creates a new fax address data for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressFaxNumberTypeCreate $apibusinesspartnera_address_fax_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressFaxNumberType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressFaxNumberTypeCreate $apibusinesspartnera_address_fax_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_fax_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_address_fax_number_type_create' is set
        if ($apibusinesspartnera_address_fax_number_type_create === null || (is_array($apibusinesspartnera_address_fax_number_type_create) && count($apibusinesspartnera_address_fax_number_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_address_fax_number_type_create when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToFaxNumberPost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_FaxNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_address_fax_number_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_address_fax_number_type_create));
            } else {
                $httpBody = $apibusinesspartnera_address_fax_number_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet
     *
     * Retrieves mobile/telephone address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper3|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetWithHttpInfo
     *
     * Retrieves mobile/telephone address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper3|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper3' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper3' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper3', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper3';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetAsync
     *
     * Retrieves mobile/telephone address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetAsync($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetAsyncWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetAsyncWithHttpInfo
     *
     * Retrieves mobile/telephone address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetAsyncWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper3';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGetRequest($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_MobilePhoneNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost
     *
     * Creates a new  mobile/telephone address record for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostWithHttpInfo
     *
     * Creates a new  mobile/telephone address record for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostAsync
     *
     * Creates a new  mobile/telephone address record for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostAsync($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostAsyncWithHttpInfo
     *
     * Creates a new  mobile/telephone address record for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_address_phone_number_type_create' is set
        if ($apibusinesspartnera_address_phone_number_type_create === null || (is_array($apibusinesspartnera_address_phone_number_type_create) && count($apibusinesspartnera_address_phone_number_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_address_phone_number_type_create when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToMobilePhoneNumberPost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_MobilePhoneNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_address_phone_number_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_address_phone_number_type_create));
            } else {
                $httpBody = $apibusinesspartnera_address_phone_number_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet
     *
     * Retrieves mobile/telephone address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper3|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetWithHttpInfo
     *
     * Retrieves mobile/telephone address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper3|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper3' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper3' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper3', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper3';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper3',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetAsync
     *
     * Retrieves mobile/telephone address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetAsync($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetAsyncWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetAsyncWithHttpInfo
     *
     * Retrieves mobile/telephone address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetAsyncWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper3';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGetRequest($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_PhoneNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost
     *
     * Creates a new  mobile/telephone address record for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostWithHttpInfo
     *
     * Creates a new  mobile/telephone address record for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostAsync
     *
     * Creates a new  mobile/telephone address record for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostAsync($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostAsyncWithHttpInfo
     *
     * Creates a new  mobile/telephone address record for the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressPhoneNumberType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressPhoneNumberTypeCreate $apibusinesspartnera_address_phone_number_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPostRequest($business_partner, $address_id, $apibusinesspartnera_address_phone_number_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_address_phone_number_type_create' is set
        if ($apibusinesspartnera_address_phone_number_type_create === null || (is_array($apibusinesspartnera_address_phone_number_type_create) && count($apibusinesspartnera_address_phone_number_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_address_phone_number_type_create when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToPhoneNumberPost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_PhoneNumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_address_phone_number_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_address_phone_number_type_create));
            } else {
                $httpBody = $apibusinesspartnera_address_phone_number_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet
     *
     * Retrieves home page URL address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper2|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetWithHttpInfo
     *
     * Retrieves home page URL address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper2|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetAsync
     *
     * Retrieves home page URL address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetAsync($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetAsyncWithHttpInfo($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetAsyncWithHttpInfo
     *
     * Retrieves home page URL address records linked to business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetAsyncWithHttpInfo($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper2';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest($business_partner, $address_id, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGetRequest($business_partner, $address_id, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_URLAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost
     *
     * Creates a new home page URL address record to the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressHomePageURLTypeCreate $apibusinesspartnera_address_home_page_url_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\AAddressHomePageURLType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostWithHttpInfo
     *
     * Creates a new home page URL address record to the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressHomePageURLTypeCreate $apibusinesspartnera_address_home_page_url_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\AAddressHomePageURLType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'][0])
    {
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\AAddressHomePageURLType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\AAddressHomePageURLType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\AAddressHomePageURLType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressHomePageURLType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\AAddressHomePageURLType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostAsync
     *
     * Creates a new home page URL address record to the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressHomePageURLTypeCreate $apibusinesspartnera_address_home_page_url_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostAsync($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'][0])
    {
        return $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostAsyncWithHttpInfo
     *
     * Creates a new home page URL address record to the existing business partner address.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressHomePageURLTypeCreate $apibusinesspartnera_address_home_page_url_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostAsyncWithHttpInfo($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\AAddressHomePageURLType';
        $request = $this->aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERAAddressHomePageURLTypeCreate $apibusinesspartnera_address_home_page_url_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPostRequest($business_partner, $address_id, $apibusinesspartnera_address_home_page_url_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling AddressApi.aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_address_home_page_url_type_create' is set
        if ($apibusinesspartnera_address_home_page_url_type_create === null || (is_array($apibusinesspartnera_address_home_page_url_type_create) && count($apibusinesspartnera_address_home_page_url_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_address_home_page_url_type_create when calling aBusinessPartnerAddressBusinessPartnerBusinessPartnerAddressIDAddressIDToURLAddressPost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\')/to_URLAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_address_home_page_url_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_address_home_page_url_type_create));
            } else {
                $httpBody = $apibusinesspartnera_address_home_page_url_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressGet
     *
     * Retrieves business partner address data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper24|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressGet'][0])
    {
        list($response) = $this->aBusinessPartnerAddressGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressGetWithHttpInfo
     *
     * Retrieves business partner address data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper24|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressGet'][0])
    {
        $request = $this->aBusinessPartnerAddressGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper24' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper24' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper24', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper24';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper24',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressGetAsync
     *
     * Retrieves business partner address data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressGet'][0])
    {
        return $this->aBusinessPartnerAddressGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressGetAsyncWithHttpInfo
     *
     * Retrieves business partner address data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper24';
        $request = $this->aBusinessPartnerAddressGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerAddressGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerAddressGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerAddressGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_BusinessPartnerAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerAddressPost
     *
     * Creates a new address data for an existing business partner.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerAddressPost($apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressPost'][0])
    {
        list($response) = $this->aBusinessPartnerAddressPostWithHttpInfo($apibusinesspartnera_business_partner_address_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerAddressPostWithHttpInfo
     *
     * Creates a new address data for an existing business partner.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerAddressPostWithHttpInfo($apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressPost'][0])
    {
        $request = $this->aBusinessPartnerAddressPostRequest($apibusinesspartnera_business_partner_address_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerAddressPostAsync
     *
     * Creates a new address data for an existing business partner.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressPostAsync($apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressPost'][0])
    {
        return $this->aBusinessPartnerAddressPostAsyncWithHttpInfo($apibusinesspartnera_business_partner_address_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerAddressPostAsyncWithHttpInfo
     *
     * Creates a new address data for an existing business partner.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerAddressPostAsyncWithHttpInfo($apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType';
        $request = $this->aBusinessPartnerAddressPostRequest($apibusinesspartnera_business_partner_address_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerAddressPost'
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerAddressPostRequest($apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerAddressPost'][0])
    {

        // verify the required parameter 'apibusinesspartnera_business_partner_address_type_create' is set
        if ($apibusinesspartnera_business_partner_address_type_create === null || (is_array($apibusinesspartnera_business_partner_address_type_create) && count($apibusinesspartnera_business_partner_address_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_business_partner_address_type_create when calling aBusinessPartnerAddressPost'
            );
        }


        $resourcePath = '/A_BusinessPartnerAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_business_partner_address_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_business_partner_address_type_create));
            } else {
                $httpBody = $apibusinesspartnera_business_partner_address_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet
     *
     * Retrieves business partner address data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper24|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'][0])
    {
        list($response) = $this->aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetWithHttpInfo($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetWithHttpInfo
     *
     * Retrieves business partner address data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper24|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetWithHttpInfo($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'][0])
    {
        $request = $this->aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper24' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper24' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper24', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper24';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper24',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetAsync
     *
     * Retrieves business partner address data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetAsync($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'][0])
    {
        return $this->aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetAsyncWithHttpInfo($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetAsyncWithHttpInfo
     *
     * Retrieves business partner address data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetAsyncWithHttpInfo($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper24';
        $request = $this->aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGetRequest($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling AddressApi.aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling AddressApi.aBusinessPartnerBusinessPartnerToBusinessPartnerAddressGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_BusinessPartner(\'{BusinessPartner}\')/to_BusinessPartnerAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost
     *
     * Creates a new address data for an existing business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost($business_partner, $apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'][0])
    {
        list($response) = $this->aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostWithHttpInfo($business_partner, $apibusinesspartnera_business_partner_address_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostWithHttpInfo
     *
     * Creates a new address data for an existing business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostWithHttpInfo($business_partner, $apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'][0])
    {
        $request = $this->aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest($business_partner, $apibusinesspartnera_business_partner_address_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostAsync
     *
     * Creates a new address data for an existing business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostAsync($business_partner, $apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'][0])
    {
        return $this->aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostAsyncWithHttpInfo($business_partner, $apibusinesspartnera_business_partner_address_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostAsyncWithHttpInfo
     *
     * Creates a new address data for an existing business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostAsyncWithHttpInfo($business_partner, $apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusinessPartnerAddressType';
        $request = $this->aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest($business_partner, $apibusinesspartnera_business_partner_address_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusinessPartnerAddressTypeCreate $apibusinesspartnera_business_partner_address_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPostRequest($business_partner, $apibusinesspartnera_business_partner_address_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling AddressApi.aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_business_partner_address_type_create' is set
        if ($apibusinesspartnera_business_partner_address_type_create === null || (is_array($apibusinesspartnera_business_partner_address_type_create) && count($apibusinesspartnera_business_partner_address_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_business_partner_address_type_create when calling aBusinessPartnerBusinessPartnerToBusinessPartnerAddressPost'
            );
        }


        $resourcePath = '/A_BusinessPartner(\'{BusinessPartner}\')/to_BusinessPartnerAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_business_partner_address_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_business_partner_address_type_create));
            } else {
                $httpBody = $apibusinesspartnera_business_partner_address_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
