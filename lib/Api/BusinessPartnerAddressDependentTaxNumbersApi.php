<?php
/**
 * BusinessPartnerAddressDependentTaxNumbersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BusinessPartner\ApiException;
use BeLenka\SAP\BusinessPartner\Configuration;
use BeLenka\SAP\BusinessPartner\HeaderSelector;
use BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * BusinessPartnerAddressDependentTaxNumbersApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BusinessPartnerAddressDependentTaxNumbersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete' => [
            'application/json',
        ],
        'aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet' => [
            'application/json',
        ],
        'aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch' => [
            'application/json',
        ],
        'aBusPartAddrDepdntTaxNmbrGet' => [
            'application/json',
        ],
        'aBusPartAddrDepdntTaxNmbrPost' => [
            'application/json',
        ],
        'aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet' => [
            'application/json',
        ],
        'aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete
     *
     * Deletes address dependent tax number data linked to a business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete($business_partner, $address_id, $bp_tax_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'][0])
    {
        $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteWithHttpInfo($business_partner, $address_id, $bp_tax_type, $contentType);
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteWithHttpInfo
     *
     * Deletes address dependent tax number data linked to a business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteWithHttpInfo($business_partner, $address_id, $bp_tax_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'][0])
    {
        $request = $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteRequest($business_partner, $address_id, $bp_tax_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteAsync
     *
     * Deletes address dependent tax number data linked to a business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteAsync($business_partner, $address_id, $bp_tax_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'][0])
    {
        return $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteAsyncWithHttpInfo($business_partner, $address_id, $bp_tax_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteAsyncWithHttpInfo
     *
     * Deletes address dependent tax number data linked to a business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteAsyncWithHttpInfo($business_partner, $address_id, $bp_tax_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'][0])
    {
        $returnType = '';
        $request = $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteRequest($business_partner, $address_id, $bp_tax_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDeleteRequest($business_partner, $address_id, $bp_tax_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'bp_tax_type' is set
        if ($bp_tax_type === null || (is_array($bp_tax_type) && count($bp_tax_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bp_tax_type when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete'
            );
        }
        if (strlen($bp_tax_type) > 4) {
            throw new \InvalidArgumentException('invalid length for "$bp_tax_type" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeDelete, must be smaller than or equal to 4.');
        }
        

        $resourcePath = '/A_BusPartAddrDepdntTaxNmbr(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\',BPTaxType=\'{BPTaxType}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($bp_tax_type !== null) {
            $resourcePath = str_replace(
                '{' . 'BPTaxType' . '}',
                ObjectSerializer::toPathValue($bp_tax_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet
     *
     * Retrieves address dependent business partner tax number data by using key fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet($business_partner, $address_id, $bp_tax_type, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'][0])
    {
        list($response) = $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetWithHttpInfo($business_partner, $address_id, $bp_tax_type, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetWithHttpInfo
     *
     * Retrieves address dependent business partner tax number data by using key fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetWithHttpInfo($business_partner, $address_id, $bp_tax_type, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'][0])
    {
        $request = $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetRequest($business_partner, $address_id, $bp_tax_type, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetAsync
     *
     * Retrieves address dependent business partner tax number data by using key fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetAsync($business_partner, $address_id, $bp_tax_type, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'][0])
    {
        return $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetAsyncWithHttpInfo($business_partner, $address_id, $bp_tax_type, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetAsyncWithHttpInfo
     *
     * Retrieves address dependent business partner tax number data by using key fields.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetAsyncWithHttpInfo($business_partner, $address_id, $bp_tax_type, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType';
        $request = $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetRequest($business_partner, $address_id, $bp_tax_type, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGetRequest($business_partner, $address_id, $bp_tax_type, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'bp_tax_type' is set
        if ($bp_tax_type === null || (is_array($bp_tax_type) && count($bp_tax_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bp_tax_type when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet'
            );
        }
        if (strlen($bp_tax_type) > 4) {
            throw new \InvalidArgumentException('invalid length for "$bp_tax_type" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypeGet, must be smaller than or equal to 4.');
        }
        
        

        $resourcePath = '/A_BusPartAddrDepdntTaxNmbr(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\',BPTaxType=\'{BPTaxType}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($bp_tax_type !== null) {
            $resourcePath = str_replace(
                '{' . 'BPTaxType' . '}',
                ObjectSerializer::toPathValue($bp_tax_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch
     *
     * Updates address dependent tax number data linked to a business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusPartAddrDepdntTaxNmbrType $modified_a_bus_part_addr_depdnt_tax_nmbr_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'][0])
    {
        $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchWithHttpInfo($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, $contentType);
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchWithHttpInfo
     *
     * Updates address dependent tax number data linked to a business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusPartAddrDepdntTaxNmbrType $modified_a_bus_part_addr_depdnt_tax_nmbr_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchWithHttpInfo($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'][0])
    {
        $request = $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchRequest($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchAsync
     *
     * Updates address dependent tax number data linked to a business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusPartAddrDepdntTaxNmbrType $modified_a_bus_part_addr_depdnt_tax_nmbr_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchAsync($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'][0])
    {
        return $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchAsyncWithHttpInfo($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchAsyncWithHttpInfo
     *
     * Updates address dependent tax number data linked to a business partner.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusPartAddrDepdntTaxNmbrType $modified_a_bus_part_addr_depdnt_tax_nmbr_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchAsyncWithHttpInfo($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'][0])
    {
        $returnType = '';
        $request = $this->aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchRequest($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  string $address_id Address Number (required)
     * @param  string $bp_tax_type Tax Number Category (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedABusPartAddrDepdntTaxNmbrType $modified_a_bus_part_addr_depdnt_tax_nmbr_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatchRequest($business_partner, $address_id, $bp_tax_type, $modified_a_bus_part_addr_depdnt_tax_nmbr_type, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'
            );
        }
        if (strlen($address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$address_id" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'bp_tax_type' is set
        if ($bp_tax_type === null || (is_array($bp_tax_type) && count($bp_tax_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bp_tax_type when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'
            );
        }
        if (strlen($bp_tax_type) > 4) {
            throw new \InvalidArgumentException('invalid length for "$bp_tax_type" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'modified_a_bus_part_addr_depdnt_tax_nmbr_type' is set
        if ($modified_a_bus_part_addr_depdnt_tax_nmbr_type === null || (is_array($modified_a_bus_part_addr_depdnt_tax_nmbr_type) && count($modified_a_bus_part_addr_depdnt_tax_nmbr_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_bus_part_addr_depdnt_tax_nmbr_type when calling aBusPartAddrDepdntTaxNmbrBusinessPartnerBusinessPartnerAddressIDAddressIDBPTaxTypeBPTaxTypePatch'
            );
        }


        $resourcePath = '/A_BusPartAddrDepdntTaxNmbr(BusinessPartner=\'{BusinessPartner}\',AddressID=\'{AddressID}\',BPTaxType=\'{BPTaxType}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'AddressID' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($bp_tax_type !== null) {
            $resourcePath = str_replace(
                '{' . 'BPTaxType' . '}',
                ObjectSerializer::toPathValue($bp_tax_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_bus_part_addr_depdnt_tax_nmbr_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_bus_part_addr_depdnt_tax_nmbr_type));
            } else {
                $httpBody = $modified_a_bus_part_addr_depdnt_tax_nmbr_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrGet
     *
     * Retrieves address dependent business partner tax number data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper31|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusPartAddrDepdntTaxNmbrGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'][0])
    {
        list($response) = $this->aBusPartAddrDepdntTaxNmbrGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrGetWithHttpInfo
     *
     * Retrieves address dependent business partner tax number data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper31|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusPartAddrDepdntTaxNmbrGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'][0])
    {
        $request = $this->aBusPartAddrDepdntTaxNmbrGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper31' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper31' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper31', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper31';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper31',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrGetAsync
     *
     * Retrieves address dependent business partner tax number data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'][0])
    {
        return $this->aBusPartAddrDepdntTaxNmbrGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrGetAsyncWithHttpInfo
     *
     * Retrieves address dependent business partner tax number data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper31';
        $request = $this->aBusPartAddrDepdntTaxNmbrGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusPartAddrDepdntTaxNmbrGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusPartAddrDepdntTaxNmbrGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusPartAddrDepdntTaxNmbrGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusPartAddrDepdntTaxNmbr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrPost
     *
     * Creates new address dependent tax number data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusPartAddrDepdntTaxNmbrPost($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'][0])
    {
        list($response) = $this->aBusPartAddrDepdntTaxNmbrPostWithHttpInfo($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrPostWithHttpInfo
     *
     * Creates new address dependent tax number data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusPartAddrDepdntTaxNmbrPostWithHttpInfo($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'][0])
    {
        $request = $this->aBusPartAddrDepdntTaxNmbrPostRequest($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrPostAsync
     *
     * Creates new address dependent tax number data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrPostAsync($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'][0])
    {
        return $this->aBusPartAddrDepdntTaxNmbrPostAsyncWithHttpInfo($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusPartAddrDepdntTaxNmbrPostAsyncWithHttpInfo
     *
     * Creates new address dependent tax number data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusPartAddrDepdntTaxNmbrPostAsyncWithHttpInfo($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType';
        $request = $this->aBusPartAddrDepdntTaxNmbrPostRequest($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusPartAddrDepdntTaxNmbrPost'
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusPartAddrDepdntTaxNmbrPostRequest($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusPartAddrDepdntTaxNmbrPost'][0])
    {

        // verify the required parameter 'apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create' is set
        if ($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create === null || (is_array($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create) && count($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create when calling aBusPartAddrDepdntTaxNmbrPost'
            );
        }


        $resourcePath = '/A_BusPartAddrDepdntTaxNmbr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create));
            } else {
                $httpBody = $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet
     *
     * Retrieves address dependent business partner tax number data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper31|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'][0])
    {
        list($response) = $this->aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetWithHttpInfo($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetWithHttpInfo
     *
     * Retrieves address dependent business partner tax number data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper31|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetWithHttpInfo($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'][0])
    {
        $request = $this->aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetRequest($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper31' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper31' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper31', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper31';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper31',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetAsync
     *
     * Retrieves address dependent business partner tax number data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetAsync($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'][0])
    {
        return $this->aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetAsyncWithHttpInfo($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetAsyncWithHttpInfo
     *
     * Retrieves address dependent business partner tax number data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetAsyncWithHttpInfo($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper31';
        $request = $this->aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetRequest($business_partner, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGetRequest($business_partner, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_BusinessPartner(\'{BusinessPartner}\')/to_BusPartAddrDepdntTaxNmbr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost
     *
     * Creates new address dependent tax number data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'][0])
    {
        list($response) = $this->aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostWithHttpInfo($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostWithHttpInfo
     *
     * Creates new address dependent tax number data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostWithHttpInfo($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'][0])
    {
        $request = $this->aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostRequest($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostAsync
     *
     * Creates new address dependent tax number data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostAsync($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'][0])
    {
        return $this->aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostAsyncWithHttpInfo($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostAsyncWithHttpInfo
     *
     * Creates new address dependent tax number data.
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostAsyncWithHttpInfo($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ABusPartAddrDepdntTaxNmbrType';
        $request = $this->aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostRequest($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'
     *
     * @param  string $business_partner Business Partner Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABusPartAddrDepdntTaxNmbrTypeCreate $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPostRequest($business_partner, $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create, string $contentType = self::contentTypes['aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'][0])
    {

        // verify the required parameter 'business_partner' is set
        if ($business_partner === null || (is_array($business_partner) && count($business_partner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_partner when calling aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'
            );
        }
        if (strlen($business_partner) > 10) {
            throw new \InvalidArgumentException('invalid length for "$business_partner" when calling BusinessPartnerAddressDependentTaxNumbersApi.aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create' is set
        if ($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create === null || (is_array($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create) && count($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create when calling aBusinessPartnerBusinessPartnerToBusPartAddrDepdntTaxNmbrPost'
            );
        }


        $resourcePath = '/A_BusinessPartner(\'{BusinessPartner}\')/to_BusPartAddrDepdntTaxNmbr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($business_partner !== null) {
            $resourcePath = str_replace(
                '{' . 'BusinessPartner' . '}',
                ObjectSerializer::toPathValue($business_partner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create));
            } else {
                $httpBody = $apibusinesspartnera_bus_part_addr_depdnt_tax_nmbr_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
