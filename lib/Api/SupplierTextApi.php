<?php
/**
 * SupplierTextApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BusinessPartner\ApiException;
use BeLenka\SAP\BusinessPartner\Configuration;
use BeLenka\SAP\BusinessPartner\HeaderSelector;
use BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * SupplierTextApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SupplierTextApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aSupplierSupplierToSupplierTextGet' => [
            'application/json',
        ],
        'aSupplierSupplierToSupplierTextPost' => [
            'application/json',
        ],
        'aSupplierTextGet' => [
            'application/json',
        ],
        'aSupplierTextPost' => [
            'application/json',
        ],
        'aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete' => [
            'application/json',
        ],
        'aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet' => [
            'application/json',
        ],
        'aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aSupplierSupplierToSupplierTextGet
     *
     * Retrieves supplier text data.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper54|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aSupplierSupplierToSupplierTextGet($supplier, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextGet'][0])
    {
        list($response) = $this->aSupplierSupplierToSupplierTextGetWithHttpInfo($supplier, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aSupplierSupplierToSupplierTextGetWithHttpInfo
     *
     * Retrieves supplier text data.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper54|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSupplierSupplierToSupplierTextGetWithHttpInfo($supplier, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextGet'][0])
    {
        $request = $this->aSupplierSupplierToSupplierTextGetRequest($supplier, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper54' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper54' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper54', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper54';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper54',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSupplierSupplierToSupplierTextGetAsync
     *
     * Retrieves supplier text data.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierSupplierToSupplierTextGetAsync($supplier, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextGet'][0])
    {
        return $this->aSupplierSupplierToSupplierTextGetAsyncWithHttpInfo($supplier, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSupplierSupplierToSupplierTextGetAsyncWithHttpInfo
     *
     * Retrieves supplier text data.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierSupplierToSupplierTextGetAsyncWithHttpInfo($supplier, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper54';
        $request = $this->aSupplierSupplierToSupplierTextGetRequest($supplier, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSupplierSupplierToSupplierTextGet'
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSupplierSupplierToSupplierTextGetRequest($supplier, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextGet'][0])
    {

        // verify the required parameter 'supplier' is set
        if ($supplier === null || (is_array($supplier) && count($supplier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier when calling aSupplierSupplierToSupplierTextGet'
            );
        }
        if (strlen($supplier) > 10) {
            throw new \InvalidArgumentException('invalid length for "$supplier" when calling SupplierTextApi.aSupplierSupplierToSupplierTextGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SupplierTextApi.aSupplierSupplierToSupplierTextGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SupplierTextApi.aSupplierSupplierToSupplierTextGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_Supplier(\'{Supplier}\')/to_SupplierText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($supplier !== null) {
            $resourcePath = str_replace(
                '{' . 'Supplier' . '}',
                ObjectSerializer::toPathValue($supplier),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSupplierSupplierToSupplierTextPost
     *
     * Creates supplier text data.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ASupplierTextType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aSupplierSupplierToSupplierTextPost($supplier, $apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextPost'][0])
    {
        list($response) = $this->aSupplierSupplierToSupplierTextPostWithHttpInfo($supplier, $apibusinesspartnera_supplier_text_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSupplierSupplierToSupplierTextPostWithHttpInfo
     *
     * Creates supplier text data.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ASupplierTextType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSupplierSupplierToSupplierTextPostWithHttpInfo($supplier, $apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextPost'][0])
    {
        $request = $this->aSupplierSupplierToSupplierTextPostRequest($supplier, $apibusinesspartnera_supplier_text_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSupplierSupplierToSupplierTextPostAsync
     *
     * Creates supplier text data.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierSupplierToSupplierTextPostAsync($supplier, $apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextPost'][0])
    {
        return $this->aSupplierSupplierToSupplierTextPostAsyncWithHttpInfo($supplier, $apibusinesspartnera_supplier_text_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSupplierSupplierToSupplierTextPostAsyncWithHttpInfo
     *
     * Creates supplier text data.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierSupplierToSupplierTextPostAsyncWithHttpInfo($supplier, $apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType';
        $request = $this->aSupplierSupplierToSupplierTextPostRequest($supplier, $apibusinesspartnera_supplier_text_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSupplierSupplierToSupplierTextPost'
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierSupplierToSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSupplierSupplierToSupplierTextPostRequest($supplier, $apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierSupplierToSupplierTextPost'][0])
    {

        // verify the required parameter 'supplier' is set
        if ($supplier === null || (is_array($supplier) && count($supplier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier when calling aSupplierSupplierToSupplierTextPost'
            );
        }
        if (strlen($supplier) > 10) {
            throw new \InvalidArgumentException('invalid length for "$supplier" when calling SupplierTextApi.aSupplierSupplierToSupplierTextPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_supplier_text_type_create' is set
        if ($apibusinesspartnera_supplier_text_type_create === null || (is_array($apibusinesspartnera_supplier_text_type_create) && count($apibusinesspartnera_supplier_text_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_supplier_text_type_create when calling aSupplierSupplierToSupplierTextPost'
            );
        }


        $resourcePath = '/A_Supplier(\'{Supplier}\')/to_SupplierText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplier !== null) {
            $resourcePath = str_replace(
                '{' . 'Supplier' . '}',
                ObjectSerializer::toPathValue($supplier),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_supplier_text_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_supplier_text_type_create));
            } else {
                $httpBody = $apibusinesspartnera_supplier_text_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSupplierTextGet
     *
     * Retrieves supplier text data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper54|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aSupplierTextGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierTextGet'][0])
    {
        list($response) = $this->aSupplierTextGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aSupplierTextGetWithHttpInfo
     *
     * Retrieves supplier text data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper54|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSupplierTextGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierTextGet'][0])
    {
        $request = $this->aSupplierTextGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper54' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper54' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper54', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper54';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper54',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSupplierTextGetAsync
     *
     * Retrieves supplier text data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierTextGet'][0])
    {
        return $this->aSupplierTextGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSupplierTextGetAsyncWithHttpInfo
     *
     * Retrieves supplier text data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper54';
        $request = $this->aSupplierTextGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSupplierTextGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSupplierTextGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aSupplierTextGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SupplierTextApi.aSupplierTextGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SupplierTextApi.aSupplierTextGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_SupplierText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSupplierTextPost
     *
     * Creates supplier text data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ASupplierTextType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aSupplierTextPost($apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierTextPost'][0])
    {
        list($response) = $this->aSupplierTextPostWithHttpInfo($apibusinesspartnera_supplier_text_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aSupplierTextPostWithHttpInfo
     *
     * Creates supplier text data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ASupplierTextType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSupplierTextPostWithHttpInfo($apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierTextPost'][0])
    {
        $request = $this->aSupplierTextPostRequest($apibusinesspartnera_supplier_text_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSupplierTextPostAsync
     *
     * Creates supplier text data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextPostAsync($apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierTextPost'][0])
    {
        return $this->aSupplierTextPostAsyncWithHttpInfo($apibusinesspartnera_supplier_text_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSupplierTextPostAsyncWithHttpInfo
     *
     * Creates supplier text data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextPostAsyncWithHttpInfo($apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierTextPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType';
        $request = $this->aSupplierTextPostRequest($apibusinesspartnera_supplier_text_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSupplierTextPost'
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTextTypeCreate $apibusinesspartnera_supplier_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSupplierTextPostRequest($apibusinesspartnera_supplier_text_type_create, string $contentType = self::contentTypes['aSupplierTextPost'][0])
    {

        // verify the required parameter 'apibusinesspartnera_supplier_text_type_create' is set
        if ($apibusinesspartnera_supplier_text_type_create === null || (is_array($apibusinesspartnera_supplier_text_type_create) && count($apibusinesspartnera_supplier_text_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_supplier_text_type_create when calling aSupplierTextPost'
            );
        }


        $resourcePath = '/A_SupplierText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_supplier_text_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_supplier_text_type_create));
            } else {
                $httpBody = $apibusinesspartnera_supplier_text_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete
     *
     * Deletes supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete($supplier, $language, $long_text_id, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {
        $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteWithHttpInfo($supplier, $language, $long_text_id, $contentType);
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteWithHttpInfo
     *
     * Deletes supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteWithHttpInfo($supplier, $language, $long_text_id, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {
        $request = $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteRequest($supplier, $language, $long_text_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteAsync
     *
     * Deletes supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteAsync($supplier, $language, $long_text_id, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {
        return $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteAsyncWithHttpInfo($supplier, $language, $long_text_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteAsyncWithHttpInfo
     *
     * Deletes supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteAsyncWithHttpInfo($supplier, $language, $long_text_id, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {
        $returnType = '';
        $request = $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteRequest($supplier, $language, $long_text_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDeleteRequest($supplier, $language, $long_text_id, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'][0])
    {

        // verify the required parameter 'supplier' is set
        if ($supplier === null || (is_array($supplier) && count($supplier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'
            );
        }
        if (strlen($supplier) > 10) {
            throw new \InvalidArgumentException('invalid length for "$supplier" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'long_text_id' is set
        if ($long_text_id === null || (is_array($long_text_id) && count($long_text_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $long_text_id when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete'
            );
        }
        if (strlen($long_text_id) > 4) {
            throw new \InvalidArgumentException('invalid length for "$long_text_id" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDDelete, must be smaller than or equal to 4.');
        }
        

        $resourcePath = '/A_SupplierText(Supplier=\'{Supplier}\',Language=\'{Language}\',LongTextID=\'{LongTextID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplier !== null) {
            $resourcePath = str_replace(
                '{' . 'Supplier' . '}',
                ObjectSerializer::toPathValue($supplier),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($long_text_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LongTextID' . '}',
                ObjectSerializer::toPathValue($long_text_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet
     *
     * Retrieves supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ASupplierTextType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet($supplier, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'][0])
    {
        list($response) = $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetWithHttpInfo($supplier, $language, $long_text_id, $select, $contentType);
        return $response;
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetWithHttpInfo
     *
     * Retrieves supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ASupplierTextType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetWithHttpInfo($supplier, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'][0])
    {
        $request = $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetRequest($supplier, $language, $long_text_id, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetAsync
     *
     * Retrieves supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetAsync($supplier, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'][0])
    {
        return $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetAsyncWithHttpInfo($supplier, $language, $long_text_id, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetAsyncWithHttpInfo
     *
     * Retrieves supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetAsyncWithHttpInfo($supplier, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ASupplierTextType';
        $request = $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetRequest($supplier, $language, $long_text_id, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGetRequest($supplier, $language, $long_text_id, $select = null, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'][0])
    {

        // verify the required parameter 'supplier' is set
        if ($supplier === null || (is_array($supplier) && count($supplier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'
            );
        }
        if (strlen($supplier) > 10) {
            throw new \InvalidArgumentException('invalid length for "$supplier" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'long_text_id' is set
        if ($long_text_id === null || (is_array($long_text_id) && count($long_text_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $long_text_id when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet'
            );
        }
        if (strlen($long_text_id) > 4) {
            throw new \InvalidArgumentException('invalid length for "$long_text_id" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDGet, must be smaller than or equal to 4.');
        }
        
        

        $resourcePath = '/A_SupplierText(Supplier=\'{Supplier}\',Language=\'{Language}\',LongTextID=\'{LongTextID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($supplier !== null) {
            $resourcePath = str_replace(
                '{' . 'Supplier' . '}',
                ObjectSerializer::toPathValue($supplier),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($long_text_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LongTextID' . '}',
                ObjectSerializer::toPathValue($long_text_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch
     *
     * Updates supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedASupplierTextType $modified_a_supplier_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch($supplier, $language, $long_text_id, $modified_a_supplier_text_type, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {
        $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchWithHttpInfo($supplier, $language, $long_text_id, $modified_a_supplier_text_type, $contentType);
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchWithHttpInfo
     *
     * Updates supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedASupplierTextType $modified_a_supplier_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchWithHttpInfo($supplier, $language, $long_text_id, $modified_a_supplier_text_type, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {
        $request = $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchRequest($supplier, $language, $long_text_id, $modified_a_supplier_text_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchAsync
     *
     * Updates supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedASupplierTextType $modified_a_supplier_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchAsync($supplier, $language, $long_text_id, $modified_a_supplier_text_type, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {
        return $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchAsyncWithHttpInfo($supplier, $language, $long_text_id, $modified_a_supplier_text_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchAsyncWithHttpInfo
     *
     * Updates supplier text data by key fields.
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedASupplierTextType $modified_a_supplier_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchAsyncWithHttpInfo($supplier, $language, $long_text_id, $modified_a_supplier_text_type, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {
        $returnType = '';
        $request = $this->aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchRequest($supplier, $language, $long_text_id, $modified_a_supplier_text_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'
     *
     * @param  string $supplier Account Number of Supplier (required)
     * @param  string $language Language key (required)
     * @param  string $long_text_id Text ID (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedASupplierTextType $modified_a_supplier_text_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatchRequest($supplier, $language, $long_text_id, $modified_a_supplier_text_type, string $contentType = self::contentTypes['aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'][0])
    {

        // verify the required parameter 'supplier' is set
        if ($supplier === null || (is_array($supplier) && count($supplier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }
        if (strlen($supplier) > 10) {
            throw new \InvalidArgumentException('invalid length for "$supplier" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'long_text_id' is set
        if ($long_text_id === null || (is_array($long_text_id) && count($long_text_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $long_text_id when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }
        if (strlen($long_text_id) > 4) {
            throw new \InvalidArgumentException('invalid length for "$long_text_id" when calling SupplierTextApi.aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'modified_a_supplier_text_type' is set
        if ($modified_a_supplier_text_type === null || (is_array($modified_a_supplier_text_type) && count($modified_a_supplier_text_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_supplier_text_type when calling aSupplierTextSupplierSupplierLanguageLanguageLongTextIDLongTextIDPatch'
            );
        }


        $resourcePath = '/A_SupplierText(Supplier=\'{Supplier}\',Language=\'{Language}\',LongTextID=\'{LongTextID}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($supplier !== null) {
            $resourcePath = str_replace(
                '{' . 'Supplier' . '}',
                ObjectSerializer::toPathValue($supplier),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($long_text_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LongTextID' . '}',
                ObjectSerializer::toPathValue($long_text_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_supplier_text_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_supplier_text_type));
            } else {
                $httpBody = $modified_a_supplier_text_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
