<?php
/**
 * SalesAreaApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\BusinessPartner\ApiException;
use BeLenka\SAP\BusinessPartner\Configuration;
use BeLenka\SAP\BusinessPartner\HeaderSelector;
use BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * SalesAreaApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SalesAreaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'aCustomerCustomerToCustomerSalesAreaGet' => [
            'application/json',
        ],
        'aCustomerCustomerToCustomerSalesAreaPost' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet' => [
            'application/json',
        ],
        'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost' => [
            'application/json',
        ],
        'aCustomerSalesAreaGet' => [
            'application/json',
        ],
        'aCustomerSalesAreaPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation aCustomerCustomerToCustomerSalesAreaGet
     *
     * Retrieves customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper38|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerCustomerToCustomerSalesAreaGet($customer, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'][0])
    {
        list($response) = $this->aCustomerCustomerToCustomerSalesAreaGetWithHttpInfo($customer, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerCustomerToCustomerSalesAreaGetWithHttpInfo
     *
     * Retrieves customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper38|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCustomerToCustomerSalesAreaGetWithHttpInfo($customer, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'][0])
    {
        $request = $this->aCustomerCustomerToCustomerSalesAreaGetRequest($customer, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper38' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper38' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper38', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper38';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper38',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCustomerToCustomerSalesAreaGetAsync
     *
     * Retrieves customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCustomerToCustomerSalesAreaGetAsync($customer, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'][0])
    {
        return $this->aCustomerCustomerToCustomerSalesAreaGetAsyncWithHttpInfo($customer, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCustomerToCustomerSalesAreaGetAsyncWithHttpInfo
     *
     * Retrieves customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCustomerToCustomerSalesAreaGetAsyncWithHttpInfo($customer, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper38';
        $request = $this->aCustomerCustomerToCustomerSalesAreaGetRequest($customer, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCustomerToCustomerSalesAreaGet'
     *
     * @param  string $customer Customer Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCustomerToCustomerSalesAreaGetRequest($customer, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaGet'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerCustomerToCustomerSalesAreaGet'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerCustomerToCustomerSalesAreaGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesAreaApi.aCustomerCustomerToCustomerSalesAreaGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesAreaApi.aCustomerCustomerToCustomerSalesAreaGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_Customer(\'{Customer}\')/to_CustomerSalesArea';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerCustomerToCustomerSalesAreaPost
     *
     * Creates customer sales data.
     *
     * @param  string $customer Customer Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerCustomerToCustomerSalesAreaPost($customer, $apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'][0])
    {
        list($response) = $this->aCustomerCustomerToCustomerSalesAreaPostWithHttpInfo($customer, $apibusinesspartnera_customer_sales_area_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerCustomerToCustomerSalesAreaPostWithHttpInfo
     *
     * Creates customer sales data.
     *
     * @param  string $customer Customer Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerCustomerToCustomerSalesAreaPostWithHttpInfo($customer, $apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'][0])
    {
        $request = $this->aCustomerCustomerToCustomerSalesAreaPostRequest($customer, $apibusinesspartnera_customer_sales_area_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerCustomerToCustomerSalesAreaPostAsync
     *
     * Creates customer sales data.
     *
     * @param  string $customer Customer Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCustomerToCustomerSalesAreaPostAsync($customer, $apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'][0])
    {
        return $this->aCustomerCustomerToCustomerSalesAreaPostAsyncWithHttpInfo($customer, $apibusinesspartnera_customer_sales_area_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerCustomerToCustomerSalesAreaPostAsyncWithHttpInfo
     *
     * Creates customer sales data.
     *
     * @param  string $customer Customer Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerCustomerToCustomerSalesAreaPostAsyncWithHttpInfo($customer, $apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType';
        $request = $this->aCustomerCustomerToCustomerSalesAreaPostRequest($customer, $apibusinesspartnera_customer_sales_area_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerCustomerToCustomerSalesAreaPost'
     *
     * @param  string $customer Customer Number (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerCustomerToCustomerSalesAreaPostRequest($customer, $apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerCustomerToCustomerSalesAreaPost'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerCustomerToCustomerSalesAreaPost'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerCustomerToCustomerSalesAreaPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'apibusinesspartnera_customer_sales_area_type_create' is set
        if ($apibusinesspartnera_customer_sales_area_type_create === null || (is_array($apibusinesspartnera_customer_sales_area_type_create) && count($apibusinesspartnera_customer_sales_area_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_customer_sales_area_type_create when calling aCustomerCustomerToCustomerSalesAreaPost'
            );
        }


        $resourcePath = '/A_Customer(\'{Customer}\')/to_CustomerSalesArea';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_customer_sales_area_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_customer_sales_area_type_create));
            } else {
                $httpBody = $apibusinesspartnera_customer_sales_area_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet
     *
     * Retrieves customer sales area data by key fields.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet($customer, $sales_organization, $distribution_channel, $division, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetWithHttpInfo
     *
     * Retrieves customer sales area data by key fields.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetRequest($customer, $sales_organization, $distribution_channel, $division, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetAsync
     *
     * Retrieves customer sales area data by key fields.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetAsync($customer, $sales_organization, $distribution_channel, $division, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetAsyncWithHttpInfo
     *
     * Retrieves customer sales area data by key fields.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetRequest($customer, $sales_organization, $distribution_channel, $division, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGetRequest($customer, $sales_organization, $distribution_channel, $division, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch
     *
     * Updates customer sales data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerSalesAreaType $modified_a_customer_sales_area_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'][0])
    {
        $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, $contentType);
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchWithHttpInfo
     *
     * Updates customer sales data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerSalesAreaType $modified_a_customer_sales_area_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchRequest($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchAsync
     *
     * Updates customer sales data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerSalesAreaType $modified_a_customer_sales_area_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchAsync($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchAsyncWithHttpInfo
     *
     * Updates customer sales data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerSalesAreaType $modified_a_customer_sales_area_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'][0])
    {
        $returnType = '';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchRequest($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\ModifiedACustomerSalesAreaType $modified_a_customer_sales_area_type New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatchRequest($customer, $sales_organization, $distribution_channel, $division, $modified_a_customer_sales_area_type, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'modified_a_customer_sales_area_type' is set
        if ($modified_a_customer_sales_area_type === null || (is_array($modified_a_customer_sales_area_type) && count($modified_a_customer_sales_area_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modified_a_customer_sales_area_type when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPatch'
            );
        }


        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($modified_a_customer_sales_area_type)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($modified_a_customer_sales_area_type));
            } else {
                $httpBody = $modified_a_customer_sales_area_type;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet
     *
     * Retrieves customer sales area partner function records.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper46|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetWithHttpInfo
     *
     * Retrieves customer sales area partner function records.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper46|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper46' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper46' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper46', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper46';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper46',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetAsync
     *
     * Retrieves customer sales area partner function records.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetAsync($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetAsyncWithHttpInfo
     *
     * Retrieves customer sales area partner function records.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper46';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGetRequest($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet, must be smaller than or equal to 2.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')/to_PartnerFunction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost
     *
     * Creates a new partner function record linked to customer sales area.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate $apibusinesspartnera_cust_sales_partner_func_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustSalesPartnerFuncType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostWithHttpInfo
     *
     * Creates a new partner function record linked to customer sales area.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate $apibusinesspartnera_cust_sales_partner_func_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustSalesPartnerFuncType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustSalesPartnerFuncType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustSalesPartnerFuncType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustSalesPartnerFuncType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustSalesPartnerFuncType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustSalesPartnerFuncType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostAsync
     *
     * Creates a new partner function record linked to customer sales area.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate $apibusinesspartnera_cust_sales_partner_func_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostAsync($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostAsyncWithHttpInfo
     *
     * Creates a new partner function record linked to customer sales area.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate $apibusinesspartnera_cust_sales_partner_func_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustSalesPartnerFuncType';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSalesPartnerFuncTypeCreate $apibusinesspartnera_cust_sales_partner_func_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sales_partner_func_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'apibusinesspartnera_cust_sales_partner_func_type_create' is set
        if ($apibusinesspartnera_cust_sales_partner_func_type_create === null || (is_array($apibusinesspartnera_cust_sales_partner_func_type_create) && count($apibusinesspartnera_cust_sales_partner_func_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_cust_sales_partner_func_type_create when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToPartnerFunctionPost'
            );
        }


        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')/to_PartnerFunction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_cust_sales_partner_func_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_cust_sales_partner_func_type_create));
            } else {
                $httpBody = $apibusinesspartnera_cust_sales_partner_func_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet
     *
     * Retrieves customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper47|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetWithHttpInfo
     *
     * Retrieves customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper47|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper47' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper47' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper47', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper47';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper47',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetAsync
     *
     * Retrieves customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetAsync($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetAsyncWithHttpInfo
     *
     * Retrieves customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper47';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGetRequest($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet, must be smaller than or equal to 2.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')/to_SalesAreaTax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost
     *
     * Retrieves customer sales area tax data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate $apibusinesspartnera_customer_sales_area_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTaxType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostWithHttpInfo
     *
     * Retrieves customer sales area tax data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate $apibusinesspartnera_customer_sales_area_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTaxType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTaxType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTaxType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTaxType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTaxType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTaxType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostAsync
     *
     * Retrieves customer sales area tax data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate $apibusinesspartnera_customer_sales_area_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostAsync($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostAsyncWithHttpInfo
     *
     * Retrieves customer sales area tax data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate $apibusinesspartnera_customer_sales_area_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTaxType';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTaxTypeCreate $apibusinesspartnera_customer_sales_area_tax_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_tax_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'apibusinesspartnera_customer_sales_area_tax_type_create' is set
        if ($apibusinesspartnera_customer_sales_area_tax_type_create === null || (is_array($apibusinesspartnera_customer_sales_area_tax_type_create) && count($apibusinesspartnera_customer_sales_area_tax_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_customer_sales_area_tax_type_create when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTaxPost'
            );
        }


        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')/to_SalesAreaTax';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_customer_sales_area_tax_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_customer_sales_area_tax_type_create));
            } else {
                $httpBody = $apibusinesspartnera_customer_sales_area_tax_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet
     *
     * Retrieves customer sales area text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper48|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetWithHttpInfo
     *
     * Retrieves customer sales area text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper48|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper48' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper48' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper48', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper48';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper48',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetAsync
     *
     * Retrieves customer sales area text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetAsync($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetAsyncWithHttpInfo
     *
     * Retrieves customer sales area text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper48';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGetRequest($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet, must be smaller than or equal to 2.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')/to_SalesAreaText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost
     *
     * Creates a new customer sales area text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate $apibusinesspartnera_customer_sales_area_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTextType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostWithHttpInfo
     *
     * Creates a new customer sales area text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate $apibusinesspartnera_customer_sales_area_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTextType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTextType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTextType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTextType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTextType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTextType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostAsync
     *
     * Creates a new customer sales area text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate $apibusinesspartnera_customer_sales_area_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostAsync($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostAsyncWithHttpInfo
     *
     * Creates a new customer sales area text data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate $apibusinesspartnera_customer_sales_area_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaTextType';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTextTypeCreate $apibusinesspartnera_customer_sales_area_text_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_customer_sales_area_text_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'apibusinesspartnera_customer_sales_area_text_type_create' is set
        if ($apibusinesspartnera_customer_sales_area_text_type_create === null || (is_array($apibusinesspartnera_customer_sales_area_text_type_create) && count($apibusinesspartnera_customer_sales_area_text_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_customer_sales_area_text_type_create when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSalesAreaTextPost'
            );
        }


        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')/to_SalesAreaText';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_customer_sales_area_text_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_customer_sales_area_text_type_create));
            } else {
                $httpBody = $apibusinesspartnera_customer_sales_area_text_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet
     *
     * Retrieves address dependent customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper49|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetWithHttpInfo
     *
     * Retrieves address dependent customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper49|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper49' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper49' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper49', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper49';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper49',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetAsync
     *
     * Retrieves address dependent customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetAsync($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetAsyncWithHttpInfo
     *
     * Retrieves address dependent customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper49';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest($customer, $sales_organization, $distribution_channel, $division, $top, $skip, $filter, $inlinecount, $orderby, $select, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGetRequest($customer, $sales_organization, $distribution_channel, $division, $top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet, must be smaller than or equal to 2.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoGet, must be bigger than or equal to 0.');
        }
        


        
        

        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')/to_SlsAreaAddrDepdntInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost
     *
     * Creates new address dependent customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustSlsAreaAddrDepdntInfoType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'][0])
    {
        list($response) = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostWithHttpInfo
     *
     * Creates new address dependent customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustSlsAreaAddrDepdntInfoType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'][0])
    {
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustSlsAreaAddrDepdntInfoType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustSlsAreaAddrDepdntInfoType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustSlsAreaAddrDepdntInfoType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustSlsAreaAddrDepdntInfoType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustSlsAreaAddrDepdntInfoType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostAsync
     *
     * Creates new address dependent customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostAsync($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'][0])
    {
        return $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostAsyncWithHttpInfo
     *
     * Creates new address dependent customer sales area data.
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostAsyncWithHttpInfo($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustSlsAreaAddrDepdntInfoType';
        $request = $this->aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'
     *
     * @param  string $customer Customer Number (required)
     * @param  string $sales_organization Sales Organization (required)
     * @param  string $distribution_channel Distribution Channel (required)
     * @param  string $division Division (required)
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoTypeCreate $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPostRequest($customer, $sales_organization, $distribution_channel, $division, $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'][0])
    {

        // verify the required parameter 'customer' is set
        if ($customer === null || (is_array($customer) && count($customer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'
            );
        }
        if (strlen($customer) > 10) {
            throw new \InvalidArgumentException('invalid length for "$customer" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'sales_organization' is set
        if ($sales_organization === null || (is_array($sales_organization) && count($sales_organization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_organization when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'
            );
        }
        if (strlen($sales_organization) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sales_organization" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'distribution_channel' is set
        if ($distribution_channel === null || (is_array($distribution_channel) && count($distribution_channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distribution_channel when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'
            );
        }
        if (strlen($distribution_channel) > 2) {
            throw new \InvalidArgumentException('invalid length for "$distribution_channel" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'division' is set
        if ($division === null || (is_array($division) && count($division) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $division when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'
            );
        }
        if (strlen($division) > 2) {
            throw new \InvalidArgumentException('invalid length for "$division" when calling SalesAreaApi.aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost, must be smaller than or equal to 2.');
        }
        
        // verify the required parameter 'apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create' is set
        if ($apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create === null || (is_array($apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create) && count($apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create when calling aCustomerSalesAreaCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionToSlsAreaAddrDepdntInfoPost'
            );
        }


        $resourcePath = '/A_CustomerSalesArea(Customer=\'{Customer}\',SalesOrganization=\'{SalesOrganization}\',DistributionChannel=\'{DistributionChannel}\',Division=\'{Division}\')/to_SlsAreaAddrDepdntInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer !== null) {
            $resourcePath = str_replace(
                '{' . 'Customer' . '}',
                ObjectSerializer::toPathValue($customer),
                $resourcePath
            );
        }
        // path params
        if ($sales_organization !== null) {
            $resourcePath = str_replace(
                '{' . 'SalesOrganization' . '}',
                ObjectSerializer::toPathValue($sales_organization),
                $resourcePath
            );
        }
        // path params
        if ($distribution_channel !== null) {
            $resourcePath = str_replace(
                '{' . 'DistributionChannel' . '}',
                ObjectSerializer::toPathValue($distribution_channel),
                $resourcePath
            );
        }
        // path params
        if ($division !== null) {
            $resourcePath = str_replace(
                '{' . 'Division' . '}',
                ObjectSerializer::toPathValue($division),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create));
            } else {
                $httpBody = $apibusinesspartnera_cust_sls_area_addr_depdnt_info_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaGet
     *
     * Retrieves customer sales area data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\Wrapper38|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaGet($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaGet'][0])
    {
        list($response) = $this->aCustomerSalesAreaGetWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaGetWithHttpInfo
     *
     * Retrieves customer sales area data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\Wrapper38|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaGetWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaGet'][0])
    {
        $request = $this->aCustomerSalesAreaGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper38' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\Wrapper38' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\Wrapper38', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper38';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\Wrapper38',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaGetAsync
     *
     * Retrieves customer sales area data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaGetAsync($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaGet'][0])
    {
        return $this->aCustomerSalesAreaGetAsyncWithHttpInfo($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaGetAsyncWithHttpInfo
     *
     * Retrieves customer sales area data.
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaGet'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\Wrapper38';
        $request = $this->aCustomerSalesAreaGetRequest($top, $skip, $filter, $inlinecount, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;66) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;64) (optional)
     * @param  string $inlinecount Include count of items, see [Inlinecount](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;67) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;65) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;68) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](https://help.sap.com/doc/5890d27be418427993fafa6722cdc03b/Cloud/en-US/OdataV2.pdf#page&#x3D;63) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaGetRequest($top = null, $skip = null, $filter = null, $inlinecount = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['aCustomerSalesAreaGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling SalesAreaApi.aCustomerSalesAreaGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling SalesAreaApi.aCustomerSalesAreaGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/A_CustomerSalesArea';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inlinecount,
            '$inlinecount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation aCustomerSalesAreaPost
     *
     * Creates customer sales data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType|\BeLenka\SAP\BusinessPartner\Model\Error
     */
    public function aCustomerSalesAreaPost($apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaPost'][0])
    {
        list($response) = $this->aCustomerSalesAreaPostWithHttpInfo($apibusinesspartnera_customer_sales_area_type_create, $contentType);
        return $response;
    }

    /**
     * Operation aCustomerSalesAreaPostWithHttpInfo
     *
     * Creates customer sales data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\BusinessPartner\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType|\BeLenka\SAP\BusinessPartner\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function aCustomerSalesAreaPostWithHttpInfo($apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaPost'][0])
    {
        $request = $this->aCustomerSalesAreaPostRequest($apibusinesspartnera_customer_sales_area_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation aCustomerSalesAreaPostAsync
     *
     * Creates customer sales data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaPostAsync($apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaPost'][0])
    {
        return $this->aCustomerSalesAreaPostAsyncWithHttpInfo($apibusinesspartnera_customer_sales_area_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation aCustomerSalesAreaPostAsyncWithHttpInfo
     *
     * Creates customer sales data.
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function aCustomerSalesAreaPostAsyncWithHttpInfo($apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaPost'][0])
    {
        $returnType = '\BeLenka\SAP\BusinessPartner\Model\ACustomerSalesAreaType';
        $request = $this->aCustomerSalesAreaPostRequest($apibusinesspartnera_customer_sales_area_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'aCustomerSalesAreaPost'
     *
     * @param  \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerSalesAreaTypeCreate $apibusinesspartnera_customer_sales_area_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['aCustomerSalesAreaPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function aCustomerSalesAreaPostRequest($apibusinesspartnera_customer_sales_area_type_create, string $contentType = self::contentTypes['aCustomerSalesAreaPost'][0])
    {

        // verify the required parameter 'apibusinesspartnera_customer_sales_area_type_create' is set
        if ($apibusinesspartnera_customer_sales_area_type_create === null || (is_array($apibusinesspartnera_customer_sales_area_type_create) && count($apibusinesspartnera_customer_sales_area_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $apibusinesspartnera_customer_sales_area_type_create when calling aCustomerSalesAreaPost'
            );
        }


        $resourcePath = '/A_CustomerSalesArea';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($apibusinesspartnera_customer_sales_area_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($apibusinesspartnera_customer_sales_area_type_create));
            } else {
                $httpBody = $apibusinesspartnera_customer_sales_area_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
