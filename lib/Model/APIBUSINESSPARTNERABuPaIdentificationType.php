<?php
/**
 * APIBUSINESSPARTNERABuPaIdentificationType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABuPaIdentificationType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABuPaIdentificationType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BuPaIdentificationType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_partner' => 'string',
        'bp_identification_type' => 'string',
        'bp_identification_number' => 'string',
        'bp_idn_nmbr_issuing_institute' => 'string',
        'bp_identification_entry_date' => 'string',
        'country' => 'string',
        'region' => 'string',
        'validity_start_date' => 'string',
        'validity_end_date' => 'string',
        'authorization_group' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_partner' => null,
        'bp_identification_type' => null,
        'bp_identification_number' => null,
        'bp_idn_nmbr_issuing_institute' => null,
        'bp_identification_entry_date' => null,
        'country' => null,
        'region' => null,
        'validity_start_date' => null,
        'validity_end_date' => null,
        'authorization_group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_partner' => false,
		'bp_identification_type' => false,
		'bp_identification_number' => false,
		'bp_idn_nmbr_issuing_institute' => true,
		'bp_identification_entry_date' => true,
		'country' => true,
		'region' => true,
		'validity_start_date' => true,
		'validity_end_date' => true,
		'authorization_group' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_partner' => 'BusinessPartner',
        'bp_identification_type' => 'BPIdentificationType',
        'bp_identification_number' => 'BPIdentificationNumber',
        'bp_idn_nmbr_issuing_institute' => 'BPIdnNmbrIssuingInstitute',
        'bp_identification_entry_date' => 'BPIdentificationEntryDate',
        'country' => 'Country',
        'region' => 'Region',
        'validity_start_date' => 'ValidityStartDate',
        'validity_end_date' => 'ValidityEndDate',
        'authorization_group' => 'AuthorizationGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_partner' => 'setBusinessPartner',
        'bp_identification_type' => 'setBpIdentificationType',
        'bp_identification_number' => 'setBpIdentificationNumber',
        'bp_idn_nmbr_issuing_institute' => 'setBpIdnNmbrIssuingInstitute',
        'bp_identification_entry_date' => 'setBpIdentificationEntryDate',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'validity_start_date' => 'setValidityStartDate',
        'validity_end_date' => 'setValidityEndDate',
        'authorization_group' => 'setAuthorizationGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_partner' => 'getBusinessPartner',
        'bp_identification_type' => 'getBpIdentificationType',
        'bp_identification_number' => 'getBpIdentificationNumber',
        'bp_idn_nmbr_issuing_institute' => 'getBpIdnNmbrIssuingInstitute',
        'bp_identification_entry_date' => 'getBpIdentificationEntryDate',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'validity_start_date' => 'getValidityStartDate',
        'validity_end_date' => 'getValidityEndDate',
        'authorization_group' => 'getAuthorizationGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_partner', $data ?? [], null);
        $this->setIfExists('bp_identification_type', $data ?? [], null);
        $this->setIfExists('bp_identification_number', $data ?? [], null);
        $this->setIfExists('bp_idn_nmbr_issuing_institute', $data ?? [], null);
        $this->setIfExists('bp_identification_entry_date', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('validity_start_date', $data ?? [], null);
        $this->setIfExists('validity_end_date', $data ?? [], null);
        $this->setIfExists('authorization_group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['business_partner']) && (mb_strlen($this->container['business_partner']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['bp_identification_type']) && (mb_strlen($this->container['bp_identification_type']) > 6)) {
            $invalidProperties[] = "invalid value for 'bp_identification_type', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['bp_identification_number']) && (mb_strlen($this->container['bp_identification_number']) > 60)) {
            $invalidProperties[] = "invalid value for 'bp_identification_number', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['bp_idn_nmbr_issuing_institute']) && (mb_strlen($this->container['bp_idn_nmbr_issuing_institute']) > 40)) {
            $invalidProperties[] = "invalid value for 'bp_idn_nmbr_issuing_institute', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 3)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 3)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['authorization_group']) && (mb_strlen($this->container['authorization_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'authorization_group', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_partner
     *
     * @return string|null
     */
    public function getBusinessPartner()
    {
        return $this->container['business_partner'];
    }

    /**
     * Sets business_partner
     *
     * @param string|null $business_partner Business Partner Number
     *
     * @return self
     */
    public function setBusinessPartner($business_partner)
    {
        if (is_null($business_partner)) {
            throw new \InvalidArgumentException('non-nullable business_partner cannot be null');
        }
        if ((mb_strlen($business_partner) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner when calling APIBUSINESSPARTNERABuPaIdentificationType., must be smaller than or equal to 10.');
        }

        $this->container['business_partner'] = $business_partner;

        return $this;
    }

    /**
     * Gets bp_identification_type
     *
     * @return string|null
     */
    public function getBpIdentificationType()
    {
        return $this->container['bp_identification_type'];
    }

    /**
     * Sets bp_identification_type
     *
     * @param string|null $bp_identification_type bp_identification_type
     *
     * @return self
     */
    public function setBpIdentificationType($bp_identification_type)
    {
        if (is_null($bp_identification_type)) {
            throw new \InvalidArgumentException('non-nullable bp_identification_type cannot be null');
        }
        if ((mb_strlen($bp_identification_type) > 6)) {
            throw new \InvalidArgumentException('invalid length for $bp_identification_type when calling APIBUSINESSPARTNERABuPaIdentificationType., must be smaller than or equal to 6.');
        }

        $this->container['bp_identification_type'] = $bp_identification_type;

        return $this;
    }

    /**
     * Gets bp_identification_number
     *
     * @return string|null
     */
    public function getBpIdentificationNumber()
    {
        return $this->container['bp_identification_number'];
    }

    /**
     * Sets bp_identification_number
     *
     * @param string|null $bp_identification_number Identification Number
     *
     * @return self
     */
    public function setBpIdentificationNumber($bp_identification_number)
    {
        if (is_null($bp_identification_number)) {
            throw new \InvalidArgumentException('non-nullable bp_identification_number cannot be null');
        }
        if ((mb_strlen($bp_identification_number) > 60)) {
            throw new \InvalidArgumentException('invalid length for $bp_identification_number when calling APIBUSINESSPARTNERABuPaIdentificationType., must be smaller than or equal to 60.');
        }

        $this->container['bp_identification_number'] = $bp_identification_number;

        return $this;
    }

    /**
     * Gets bp_idn_nmbr_issuing_institute
     *
     * @return string|null
     */
    public function getBpIdnNmbrIssuingInstitute()
    {
        return $this->container['bp_idn_nmbr_issuing_institute'];
    }

    /**
     * Sets bp_idn_nmbr_issuing_institute
     *
     * @param string|null $bp_idn_nmbr_issuing_institute Responsible Institution for ID Number
     *
     * @return self
     */
    public function setBpIdnNmbrIssuingInstitute($bp_idn_nmbr_issuing_institute)
    {
        if (is_null($bp_idn_nmbr_issuing_institute)) {
            array_push($this->openAPINullablesSetToNull, 'bp_idn_nmbr_issuing_institute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_idn_nmbr_issuing_institute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_idn_nmbr_issuing_institute) && (mb_strlen($bp_idn_nmbr_issuing_institute) > 40)) {
            throw new \InvalidArgumentException('invalid length for $bp_idn_nmbr_issuing_institute when calling APIBUSINESSPARTNERABuPaIdentificationType., must be smaller than or equal to 40.');
        }

        $this->container['bp_idn_nmbr_issuing_institute'] = $bp_idn_nmbr_issuing_institute;

        return $this;
    }

    /**
     * Gets bp_identification_entry_date
     *
     * @return string|null
     */
    public function getBpIdentificationEntryDate()
    {
        return $this->container['bp_identification_entry_date'];
    }

    /**
     * Sets bp_identification_entry_date
     *
     * @param string|null $bp_identification_entry_date Date of Entry for ID Number
     *
     * @return self
     */
    public function setBpIdentificationEntryDate($bp_identification_entry_date)
    {
        if (is_null($bp_identification_entry_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_identification_entry_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_identification_entry_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_identification_entry_date'] = $bp_identification_entry_date;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country/Region in Which ID Number is Valid or Was Assigned
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($country) && (mb_strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling APIBUSINESSPARTNERABuPaIdentificationType., must be smaller than or equal to 3.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region (State, Province, County)
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($region) && (mb_strlen($region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $region when calling APIBUSINESSPARTNERABuPaIdentificationType., must be smaller than or equal to 3.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets validity_start_date
     *
     * @return string|null
     */
    public function getValidityStartDate()
    {
        return $this->container['validity_start_date'];
    }

    /**
     * Sets validity_start_date
     *
     * @param string|null $validity_start_date Validity Start for ID Number
     *
     * @return self
     */
    public function setValidityStartDate($validity_start_date)
    {
        if (is_null($validity_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'validity_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validity_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validity_start_date'] = $validity_start_date;

        return $this;
    }

    /**
     * Gets validity_end_date
     *
     * @return string|null
     */
    public function getValidityEndDate()
    {
        return $this->container['validity_end_date'];
    }

    /**
     * Sets validity_end_date
     *
     * @param string|null $validity_end_date Validity End for ID Number
     *
     * @return self
     */
    public function setValidityEndDate($validity_end_date)
    {
        if (is_null($validity_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'validity_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validity_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validity_end_date'] = $validity_end_date;

        return $this;
    }

    /**
     * Gets authorization_group
     *
     * @return string|null
     */
    public function getAuthorizationGroup()
    {
        return $this->container['authorization_group'];
    }

    /**
     * Sets authorization_group
     *
     * @param string|null $authorization_group authorization_group
     *
     * @return self
     */
    public function setAuthorizationGroup($authorization_group)
    {
        if (is_null($authorization_group)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_group) && (mb_strlen($authorization_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $authorization_group when calling APIBUSINESSPARTNERABuPaIdentificationType., must be smaller than or equal to 4.');
        }

        $this->container['authorization_group'] = $authorization_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


