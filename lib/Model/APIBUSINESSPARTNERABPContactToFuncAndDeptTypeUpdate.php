<?php
/**
 * APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BPContactToFuncAndDeptType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contact_person_authority_type' => 'string',
        'contact_person_department' => 'string',
        'contact_person_department_name' => 'string',
        'contact_person_function' => 'string',
        'contact_person_function_name' => 'string',
        'contact_person_remark_text' => 'string',
        'contact_person_vip_type' => 'string',
        'email_address' => 'string',
        'fax_number' => 'string',
        'fax_number_extension' => 'string',
        'phone_number' => 'string',
        'phone_number_extension' => 'string',
        'relationship_category' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contact_person_authority_type' => null,
        'contact_person_department' => null,
        'contact_person_department_name' => null,
        'contact_person_function' => null,
        'contact_person_function_name' => null,
        'contact_person_remark_text' => null,
        'contact_person_vip_type' => null,
        'email_address' => null,
        'fax_number' => null,
        'fax_number_extension' => null,
        'phone_number' => null,
        'phone_number_extension' => null,
        'relationship_category' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contact_person_authority_type' => true,
		'contact_person_department' => true,
		'contact_person_department_name' => true,
		'contact_person_function' => true,
		'contact_person_function_name' => true,
		'contact_person_remark_text' => true,
		'contact_person_vip_type' => true,
		'email_address' => true,
		'fax_number' => true,
		'fax_number_extension' => true,
		'phone_number' => true,
		'phone_number_extension' => true,
		'relationship_category' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_person_authority_type' => 'ContactPersonAuthorityType',
        'contact_person_department' => 'ContactPersonDepartment',
        'contact_person_department_name' => 'ContactPersonDepartmentName',
        'contact_person_function' => 'ContactPersonFunction',
        'contact_person_function_name' => 'ContactPersonFunctionName',
        'contact_person_remark_text' => 'ContactPersonRemarkText',
        'contact_person_vip_type' => 'ContactPersonVIPType',
        'email_address' => 'EmailAddress',
        'fax_number' => 'FaxNumber',
        'fax_number_extension' => 'FaxNumberExtension',
        'phone_number' => 'PhoneNumber',
        'phone_number_extension' => 'PhoneNumberExtension',
        'relationship_category' => 'RelationshipCategory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_person_authority_type' => 'setContactPersonAuthorityType',
        'contact_person_department' => 'setContactPersonDepartment',
        'contact_person_department_name' => 'setContactPersonDepartmentName',
        'contact_person_function' => 'setContactPersonFunction',
        'contact_person_function_name' => 'setContactPersonFunctionName',
        'contact_person_remark_text' => 'setContactPersonRemarkText',
        'contact_person_vip_type' => 'setContactPersonVipType',
        'email_address' => 'setEmailAddress',
        'fax_number' => 'setFaxNumber',
        'fax_number_extension' => 'setFaxNumberExtension',
        'phone_number' => 'setPhoneNumber',
        'phone_number_extension' => 'setPhoneNumberExtension',
        'relationship_category' => 'setRelationshipCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_person_authority_type' => 'getContactPersonAuthorityType',
        'contact_person_department' => 'getContactPersonDepartment',
        'contact_person_department_name' => 'getContactPersonDepartmentName',
        'contact_person_function' => 'getContactPersonFunction',
        'contact_person_function_name' => 'getContactPersonFunctionName',
        'contact_person_remark_text' => 'getContactPersonRemarkText',
        'contact_person_vip_type' => 'getContactPersonVipType',
        'email_address' => 'getEmailAddress',
        'fax_number' => 'getFaxNumber',
        'fax_number_extension' => 'getFaxNumberExtension',
        'phone_number' => 'getPhoneNumber',
        'phone_number_extension' => 'getPhoneNumberExtension',
        'relationship_category' => 'getRelationshipCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contact_person_authority_type', $data ?? [], null);
        $this->setIfExists('contact_person_department', $data ?? [], null);
        $this->setIfExists('contact_person_department_name', $data ?? [], null);
        $this->setIfExists('contact_person_function', $data ?? [], null);
        $this->setIfExists('contact_person_function_name', $data ?? [], null);
        $this->setIfExists('contact_person_remark_text', $data ?? [], null);
        $this->setIfExists('contact_person_vip_type', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('fax_number', $data ?? [], null);
        $this->setIfExists('fax_number_extension', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('phone_number_extension', $data ?? [], null);
        $this->setIfExists('relationship_category', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['contact_person_authority_type']) && (mb_strlen($this->container['contact_person_authority_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'contact_person_authority_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['contact_person_department']) && (mb_strlen($this->container['contact_person_department']) > 4)) {
            $invalidProperties[] = "invalid value for 'contact_person_department', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['contact_person_department_name']) && (mb_strlen($this->container['contact_person_department_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'contact_person_department_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['contact_person_function']) && (mb_strlen($this->container['contact_person_function']) > 4)) {
            $invalidProperties[] = "invalid value for 'contact_person_function', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['contact_person_function_name']) && (mb_strlen($this->container['contact_person_function_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'contact_person_function_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['contact_person_remark_text']) && (mb_strlen($this->container['contact_person_remark_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'contact_person_remark_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['contact_person_vip_type']) && (mb_strlen($this->container['contact_person_vip_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'contact_person_vip_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 241)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 241.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['fax_number_extension']) && (mb_strlen($this->container['fax_number_extension']) > 10)) {
            $invalidProperties[] = "invalid value for 'fax_number_extension', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['phone_number_extension']) && (mb_strlen($this->container['phone_number_extension']) > 10)) {
            $invalidProperties[] = "invalid value for 'phone_number_extension', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['relationship_category']) && (mb_strlen($this->container['relationship_category']) > 6)) {
            $invalidProperties[] = "invalid value for 'relationship_category', the character length must be smaller than or equal to 6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_person_authority_type
     *
     * @return string|null
     */
    public function getContactPersonAuthorityType()
    {
        return $this->container['contact_person_authority_type'];
    }

    /**
     * Sets contact_person_authority_type
     *
     * @param string|null $contact_person_authority_type Partner's Authority
     *
     * @return self
     */
    public function setContactPersonAuthorityType($contact_person_authority_type)
    {
        if (is_null($contact_person_authority_type)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_authority_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_authority_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_authority_type) && (mb_strlen($contact_person_authority_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_authority_type when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['contact_person_authority_type'] = $contact_person_authority_type;

        return $this;
    }

    /**
     * Gets contact_person_department
     *
     * @return string|null
     */
    public function getContactPersonDepartment()
    {
        return $this->container['contact_person_department'];
    }

    /**
     * Sets contact_person_department
     *
     * @param string|null $contact_person_department contact_person_department
     *
     * @return self
     */
    public function setContactPersonDepartment($contact_person_department)
    {
        if (is_null($contact_person_department)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_department) && (mb_strlen($contact_person_department) > 4)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_department when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['contact_person_department'] = $contact_person_department;

        return $this;
    }

    /**
     * Gets contact_person_department_name
     *
     * @return string|null
     */
    public function getContactPersonDepartmentName()
    {
        return $this->container['contact_person_department_name'];
    }

    /**
     * Sets contact_person_department_name
     *
     * @param string|null $contact_person_department_name Department at business partner
     *
     * @return self
     */
    public function setContactPersonDepartmentName($contact_person_department_name)
    {
        if (is_null($contact_person_department_name)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_department_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_department_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_department_name) && (mb_strlen($contact_person_department_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_department_name when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['contact_person_department_name'] = $contact_person_department_name;

        return $this;
    }

    /**
     * Gets contact_person_function
     *
     * @return string|null
     */
    public function getContactPersonFunction()
    {
        return $this->container['contact_person_function'];
    }

    /**
     * Sets contact_person_function
     *
     * @param string|null $contact_person_function Function of partner
     *
     * @return self
     */
    public function setContactPersonFunction($contact_person_function)
    {
        if (is_null($contact_person_function)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_function');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_function', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_function) && (mb_strlen($contact_person_function) > 4)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_function when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['contact_person_function'] = $contact_person_function;

        return $this;
    }

    /**
     * Gets contact_person_function_name
     *
     * @return string|null
     */
    public function getContactPersonFunctionName()
    {
        return $this->container['contact_person_function_name'];
    }

    /**
     * Sets contact_person_function_name
     *
     * @param string|null $contact_person_function_name Function name of partner
     *
     * @return self
     */
    public function setContactPersonFunctionName($contact_person_function_name)
    {
        if (is_null($contact_person_function_name)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_function_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_function_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_function_name) && (mb_strlen($contact_person_function_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_function_name when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['contact_person_function_name'] = $contact_person_function_name;

        return $this;
    }

    /**
     * Gets contact_person_remark_text
     *
     * @return string|null
     */
    public function getContactPersonRemarkText()
    {
        return $this->container['contact_person_remark_text'];
    }

    /**
     * Sets contact_person_remark_text
     *
     * @param string|null $contact_person_remark_text Notes for Partner
     *
     * @return self
     */
    public function setContactPersonRemarkText($contact_person_remark_text)
    {
        if (is_null($contact_person_remark_text)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_remark_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_remark_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_remark_text) && (mb_strlen($contact_person_remark_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_remark_text when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['contact_person_remark_text'] = $contact_person_remark_text;

        return $this;
    }

    /**
     * Gets contact_person_vip_type
     *
     * @return string|null
     */
    public function getContactPersonVipType()
    {
        return $this->container['contact_person_vip_type'];
    }

    /**
     * Sets contact_person_vip_type
     *
     * @param string|null $contact_person_vip_type VIP Partner
     *
     * @return self
     */
    public function setContactPersonVipType($contact_person_vip_type)
    {
        if (is_null($contact_person_vip_type)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_vip_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_vip_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_vip_type) && (mb_strlen($contact_person_vip_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_vip_type when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['contact_person_vip_type'] = $contact_person_vip_type;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            array_push($this->openAPINullablesSetToNull, 'email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email_address) && (mb_strlen($email_address) > 241)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 241.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string|null
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string|null $fax_number Fax Number: Dialing Code and Number
     *
     * @return self
     */
    public function setFaxNumber($fax_number)
    {
        if (is_null($fax_number)) {
            array_push($this->openAPINullablesSetToNull, 'fax_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fax_number) && (mb_strlen($fax_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 30.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets fax_number_extension
     *
     * @return string|null
     */
    public function getFaxNumberExtension()
    {
        return $this->container['fax_number_extension'];
    }

    /**
     * Sets fax_number_extension
     *
     * @param string|null $fax_number_extension Fax no.: Extension
     *
     * @return self
     */
    public function setFaxNumberExtension($fax_number_extension)
    {
        if (is_null($fax_number_extension)) {
            array_push($this->openAPINullablesSetToNull, 'fax_number_extension');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax_number_extension', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fax_number_extension) && (mb_strlen($fax_number_extension) > 10)) {
            throw new \InvalidArgumentException('invalid length for $fax_number_extension when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['fax_number_extension'] = $fax_number_extension;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Telephone No.: Dialing Code and Number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 30.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_number_extension
     *
     * @return string|null
     */
    public function getPhoneNumberExtension()
    {
        return $this->container['phone_number_extension'];
    }

    /**
     * Sets phone_number_extension
     *
     * @param string|null $phone_number_extension Telephone no.: Extension
     *
     * @return self
     */
    public function setPhoneNumberExtension($phone_number_extension)
    {
        if (is_null($phone_number_extension)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number_extension');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number_extension', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone_number_extension) && (mb_strlen($phone_number_extension) > 10)) {
            throw new \InvalidArgumentException('invalid length for $phone_number_extension when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['phone_number_extension'] = $phone_number_extension;

        return $this;
    }

    /**
     * Gets relationship_category
     *
     * @return string|null
     */
    public function getRelationshipCategory()
    {
        return $this->container['relationship_category'];
    }

    /**
     * Sets relationship_category
     *
     * @param string|null $relationship_category Business Partner Relationship Category
     *
     * @return self
     */
    public function setRelationshipCategory($relationship_category)
    {
        if (is_null($relationship_category)) {
            array_push($this->openAPINullablesSetToNull, 'relationship_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relationship_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($relationship_category) && (mb_strlen($relationship_category) > 6)) {
            throw new \InvalidArgumentException('invalid length for $relationship_category when calling APIBUSINESSPARTNERABPContactToFuncAndDeptTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['relationship_category'] = $relationship_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


