<?php
/**
 * APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BPFinancialServicesExtnType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_partner_is_vip' => 'bool',
        'trading_partner' => 'string',
        'factory_calendar' => 'string',
        'business_partner_office_country' => 'string',
        'business_partner_office_region' => 'string',
        'bp_registered_office_name' => 'string',
        'bp_balance_sheet_currency' => 'string',
        'bp_last_cptl_incr_amt_in_bal_sht_crcy' => 'float',
        'bp_last_capital_increase_year' => 'string',
        'bp_balance_sheet_display_type' => 'string',
        'business_partner_citizenship' => 'string',
        'bp_marital_property_regime' => 'string',
        'business_partner_income_currency' => 'string',
        'bp_number_of_children' => 'float',
        'bp_number_of_household_members' => 'float',
        'bp_annual_net_inc_amt_in_income_crcy' => 'float',
        'bp_monthly_net_inc_amt_in_income_crcy' => 'float',
        'bp_annual_net_income_year' => 'string',
        'bp_monthly_net_income_month' => 'string',
        'bp_monthly_net_income_year' => 'string',
        'bp_place_of_death_name' => 'string',
        'customer_is_unwanted' => 'bool',
        'undesirability_reason' => 'string',
        'undesirability_comment' => 'string',
        'last_customer_contact_date' => 'string',
        'bp_grouping_character' => 'string',
        'bp_letter_salutation' => 'string',
        'business_partner_target_group' => 'string',
        'business_partner_employee_group' => 'string',
        'business_partner_is_employee' => 'bool',
        'bp_termn_bus_relations_bank_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_partner_is_vip' => null,
        'trading_partner' => null,
        'factory_calendar' => null,
        'business_partner_office_country' => null,
        'business_partner_office_region' => null,
        'bp_registered_office_name' => null,
        'bp_balance_sheet_currency' => null,
        'bp_last_cptl_incr_amt_in_bal_sht_crcy' => 'decimal',
        'bp_last_capital_increase_year' => null,
        'bp_balance_sheet_display_type' => null,
        'business_partner_citizenship' => null,
        'bp_marital_property_regime' => null,
        'business_partner_income_currency' => null,
        'bp_number_of_children' => 'decimal',
        'bp_number_of_household_members' => 'decimal',
        'bp_annual_net_inc_amt_in_income_crcy' => 'decimal',
        'bp_monthly_net_inc_amt_in_income_crcy' => 'decimal',
        'bp_annual_net_income_year' => null,
        'bp_monthly_net_income_month' => null,
        'bp_monthly_net_income_year' => null,
        'bp_place_of_death_name' => null,
        'customer_is_unwanted' => null,
        'undesirability_reason' => null,
        'undesirability_comment' => null,
        'last_customer_contact_date' => null,
        'bp_grouping_character' => null,
        'bp_letter_salutation' => null,
        'business_partner_target_group' => null,
        'business_partner_employee_group' => null,
        'business_partner_is_employee' => null,
        'bp_termn_bus_relations_bank_date' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_partner_is_vip' => true,
		'trading_partner' => true,
		'factory_calendar' => true,
		'business_partner_office_country' => true,
		'business_partner_office_region' => true,
		'bp_registered_office_name' => true,
		'bp_balance_sheet_currency' => true,
		'bp_last_cptl_incr_amt_in_bal_sht_crcy' => true,
		'bp_last_capital_increase_year' => true,
		'bp_balance_sheet_display_type' => true,
		'business_partner_citizenship' => true,
		'bp_marital_property_regime' => true,
		'business_partner_income_currency' => true,
		'bp_number_of_children' => true,
		'bp_number_of_household_members' => true,
		'bp_annual_net_inc_amt_in_income_crcy' => true,
		'bp_monthly_net_inc_amt_in_income_crcy' => true,
		'bp_annual_net_income_year' => true,
		'bp_monthly_net_income_month' => true,
		'bp_monthly_net_income_year' => true,
		'bp_place_of_death_name' => true,
		'customer_is_unwanted' => true,
		'undesirability_reason' => true,
		'undesirability_comment' => true,
		'last_customer_contact_date' => true,
		'bp_grouping_character' => true,
		'bp_letter_salutation' => true,
		'business_partner_target_group' => true,
		'business_partner_employee_group' => true,
		'business_partner_is_employee' => true,
		'bp_termn_bus_relations_bank_date' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_partner_is_vip' => 'BusinessPartnerIsVIP',
        'trading_partner' => 'TradingPartner',
        'factory_calendar' => 'FactoryCalendar',
        'business_partner_office_country' => 'BusinessPartnerOfficeCountry',
        'business_partner_office_region' => 'BusinessPartnerOfficeRegion',
        'bp_registered_office_name' => 'BPRegisteredOfficeName',
        'bp_balance_sheet_currency' => 'BPBalanceSheetCurrency',
        'bp_last_cptl_incr_amt_in_bal_sht_crcy' => 'BPLastCptlIncrAmtInBalShtCrcy',
        'bp_last_capital_increase_year' => 'BPLastCapitalIncreaseYear',
        'bp_balance_sheet_display_type' => 'BPBalanceSheetDisplayType',
        'business_partner_citizenship' => 'BusinessPartnerCitizenship',
        'bp_marital_property_regime' => 'BPMaritalPropertyRegime',
        'business_partner_income_currency' => 'BusinessPartnerIncomeCurrency',
        'bp_number_of_children' => 'BPNumberOfChildren',
        'bp_number_of_household_members' => 'BPNumberOfHouseholdMembers',
        'bp_annual_net_inc_amt_in_income_crcy' => 'BPAnnualNetIncAmtInIncomeCrcy',
        'bp_monthly_net_inc_amt_in_income_crcy' => 'BPMonthlyNetIncAmtInIncomeCrcy',
        'bp_annual_net_income_year' => 'BPAnnualNetIncomeYear',
        'bp_monthly_net_income_month' => 'BPMonthlyNetIncomeMonth',
        'bp_monthly_net_income_year' => 'BPMonthlyNetIncomeYear',
        'bp_place_of_death_name' => 'BPPlaceOfDeathName',
        'customer_is_unwanted' => 'CustomerIsUnwanted',
        'undesirability_reason' => 'UndesirabilityReason',
        'undesirability_comment' => 'UndesirabilityComment',
        'last_customer_contact_date' => 'LastCustomerContactDate',
        'bp_grouping_character' => 'BPGroupingCharacter',
        'bp_letter_salutation' => 'BPLetterSalutation',
        'business_partner_target_group' => 'BusinessPartnerTargetGroup',
        'business_partner_employee_group' => 'BusinessPartnerEmployeeGroup',
        'business_partner_is_employee' => 'BusinessPartnerIsEmployee',
        'bp_termn_bus_relations_bank_date' => 'BPTermnBusRelationsBankDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_partner_is_vip' => 'setBusinessPartnerIsVip',
        'trading_partner' => 'setTradingPartner',
        'factory_calendar' => 'setFactoryCalendar',
        'business_partner_office_country' => 'setBusinessPartnerOfficeCountry',
        'business_partner_office_region' => 'setBusinessPartnerOfficeRegion',
        'bp_registered_office_name' => 'setBpRegisteredOfficeName',
        'bp_balance_sheet_currency' => 'setBpBalanceSheetCurrency',
        'bp_last_cptl_incr_amt_in_bal_sht_crcy' => 'setBpLastCptlIncrAmtInBalShtCrcy',
        'bp_last_capital_increase_year' => 'setBpLastCapitalIncreaseYear',
        'bp_balance_sheet_display_type' => 'setBpBalanceSheetDisplayType',
        'business_partner_citizenship' => 'setBusinessPartnerCitizenship',
        'bp_marital_property_regime' => 'setBpMaritalPropertyRegime',
        'business_partner_income_currency' => 'setBusinessPartnerIncomeCurrency',
        'bp_number_of_children' => 'setBpNumberOfChildren',
        'bp_number_of_household_members' => 'setBpNumberOfHouseholdMembers',
        'bp_annual_net_inc_amt_in_income_crcy' => 'setBpAnnualNetIncAmtInIncomeCrcy',
        'bp_monthly_net_inc_amt_in_income_crcy' => 'setBpMonthlyNetIncAmtInIncomeCrcy',
        'bp_annual_net_income_year' => 'setBpAnnualNetIncomeYear',
        'bp_monthly_net_income_month' => 'setBpMonthlyNetIncomeMonth',
        'bp_monthly_net_income_year' => 'setBpMonthlyNetIncomeYear',
        'bp_place_of_death_name' => 'setBpPlaceOfDeathName',
        'customer_is_unwanted' => 'setCustomerIsUnwanted',
        'undesirability_reason' => 'setUndesirabilityReason',
        'undesirability_comment' => 'setUndesirabilityComment',
        'last_customer_contact_date' => 'setLastCustomerContactDate',
        'bp_grouping_character' => 'setBpGroupingCharacter',
        'bp_letter_salutation' => 'setBpLetterSalutation',
        'business_partner_target_group' => 'setBusinessPartnerTargetGroup',
        'business_partner_employee_group' => 'setBusinessPartnerEmployeeGroup',
        'business_partner_is_employee' => 'setBusinessPartnerIsEmployee',
        'bp_termn_bus_relations_bank_date' => 'setBpTermnBusRelationsBankDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_partner_is_vip' => 'getBusinessPartnerIsVip',
        'trading_partner' => 'getTradingPartner',
        'factory_calendar' => 'getFactoryCalendar',
        'business_partner_office_country' => 'getBusinessPartnerOfficeCountry',
        'business_partner_office_region' => 'getBusinessPartnerOfficeRegion',
        'bp_registered_office_name' => 'getBpRegisteredOfficeName',
        'bp_balance_sheet_currency' => 'getBpBalanceSheetCurrency',
        'bp_last_cptl_incr_amt_in_bal_sht_crcy' => 'getBpLastCptlIncrAmtInBalShtCrcy',
        'bp_last_capital_increase_year' => 'getBpLastCapitalIncreaseYear',
        'bp_balance_sheet_display_type' => 'getBpBalanceSheetDisplayType',
        'business_partner_citizenship' => 'getBusinessPartnerCitizenship',
        'bp_marital_property_regime' => 'getBpMaritalPropertyRegime',
        'business_partner_income_currency' => 'getBusinessPartnerIncomeCurrency',
        'bp_number_of_children' => 'getBpNumberOfChildren',
        'bp_number_of_household_members' => 'getBpNumberOfHouseholdMembers',
        'bp_annual_net_inc_amt_in_income_crcy' => 'getBpAnnualNetIncAmtInIncomeCrcy',
        'bp_monthly_net_inc_amt_in_income_crcy' => 'getBpMonthlyNetIncAmtInIncomeCrcy',
        'bp_annual_net_income_year' => 'getBpAnnualNetIncomeYear',
        'bp_monthly_net_income_month' => 'getBpMonthlyNetIncomeMonth',
        'bp_monthly_net_income_year' => 'getBpMonthlyNetIncomeYear',
        'bp_place_of_death_name' => 'getBpPlaceOfDeathName',
        'customer_is_unwanted' => 'getCustomerIsUnwanted',
        'undesirability_reason' => 'getUndesirabilityReason',
        'undesirability_comment' => 'getUndesirabilityComment',
        'last_customer_contact_date' => 'getLastCustomerContactDate',
        'bp_grouping_character' => 'getBpGroupingCharacter',
        'bp_letter_salutation' => 'getBpLetterSalutation',
        'business_partner_target_group' => 'getBusinessPartnerTargetGroup',
        'business_partner_employee_group' => 'getBusinessPartnerEmployeeGroup',
        'business_partner_is_employee' => 'getBusinessPartnerIsEmployee',
        'bp_termn_bus_relations_bank_date' => 'getBpTermnBusRelationsBankDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_partner_is_vip', $data ?? [], null);
        $this->setIfExists('trading_partner', $data ?? [], null);
        $this->setIfExists('factory_calendar', $data ?? [], null);
        $this->setIfExists('business_partner_office_country', $data ?? [], null);
        $this->setIfExists('business_partner_office_region', $data ?? [], null);
        $this->setIfExists('bp_registered_office_name', $data ?? [], null);
        $this->setIfExists('bp_balance_sheet_currency', $data ?? [], null);
        $this->setIfExists('bp_last_cptl_incr_amt_in_bal_sht_crcy', $data ?? [], null);
        $this->setIfExists('bp_last_capital_increase_year', $data ?? [], null);
        $this->setIfExists('bp_balance_sheet_display_type', $data ?? [], null);
        $this->setIfExists('business_partner_citizenship', $data ?? [], null);
        $this->setIfExists('bp_marital_property_regime', $data ?? [], null);
        $this->setIfExists('business_partner_income_currency', $data ?? [], null);
        $this->setIfExists('bp_number_of_children', $data ?? [], null);
        $this->setIfExists('bp_number_of_household_members', $data ?? [], null);
        $this->setIfExists('bp_annual_net_inc_amt_in_income_crcy', $data ?? [], null);
        $this->setIfExists('bp_monthly_net_inc_amt_in_income_crcy', $data ?? [], null);
        $this->setIfExists('bp_annual_net_income_year', $data ?? [], null);
        $this->setIfExists('bp_monthly_net_income_month', $data ?? [], null);
        $this->setIfExists('bp_monthly_net_income_year', $data ?? [], null);
        $this->setIfExists('bp_place_of_death_name', $data ?? [], null);
        $this->setIfExists('customer_is_unwanted', $data ?? [], null);
        $this->setIfExists('undesirability_reason', $data ?? [], null);
        $this->setIfExists('undesirability_comment', $data ?? [], null);
        $this->setIfExists('last_customer_contact_date', $data ?? [], null);
        $this->setIfExists('bp_grouping_character', $data ?? [], null);
        $this->setIfExists('bp_letter_salutation', $data ?? [], null);
        $this->setIfExists('business_partner_target_group', $data ?? [], null);
        $this->setIfExists('business_partner_employee_group', $data ?? [], null);
        $this->setIfExists('business_partner_is_employee', $data ?? [], null);
        $this->setIfExists('bp_termn_bus_relations_bank_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['trading_partner']) && (mb_strlen($this->container['trading_partner']) > 6)) {
            $invalidProperties[] = "invalid value for 'trading_partner', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['factory_calendar']) && (mb_strlen($this->container['factory_calendar']) > 2)) {
            $invalidProperties[] = "invalid value for 'factory_calendar', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['business_partner_office_country']) && (mb_strlen($this->container['business_partner_office_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'business_partner_office_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['business_partner_office_region']) && (mb_strlen($this->container['business_partner_office_region']) > 3)) {
            $invalidProperties[] = "invalid value for 'business_partner_office_region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bp_registered_office_name']) && (mb_strlen($this->container['bp_registered_office_name']) > 35)) {
            $invalidProperties[] = "invalid value for 'bp_registered_office_name', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['bp_balance_sheet_currency']) && (mb_strlen($this->container['bp_balance_sheet_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'bp_balance_sheet_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['bp_last_capital_increase_year']) && (mb_strlen($this->container['bp_last_capital_increase_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'bp_last_capital_increase_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['bp_balance_sheet_display_type']) && (mb_strlen($this->container['bp_balance_sheet_display_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'bp_balance_sheet_display_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['business_partner_citizenship']) && (mb_strlen($this->container['business_partner_citizenship']) > 3)) {
            $invalidProperties[] = "invalid value for 'business_partner_citizenship', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bp_marital_property_regime']) && (mb_strlen($this->container['bp_marital_property_regime']) > 2)) {
            $invalidProperties[] = "invalid value for 'bp_marital_property_regime', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['business_partner_income_currency']) && (mb_strlen($this->container['business_partner_income_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'business_partner_income_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['bp_annual_net_income_year']) && (mb_strlen($this->container['bp_annual_net_income_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'bp_annual_net_income_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['bp_monthly_net_income_month']) && (mb_strlen($this->container['bp_monthly_net_income_month']) > 2)) {
            $invalidProperties[] = "invalid value for 'bp_monthly_net_income_month', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bp_monthly_net_income_year']) && (mb_strlen($this->container['bp_monthly_net_income_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'bp_monthly_net_income_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['bp_place_of_death_name']) && (mb_strlen($this->container['bp_place_of_death_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'bp_place_of_death_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['undesirability_reason']) && (mb_strlen($this->container['undesirability_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'undesirability_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['undesirability_comment']) && (mb_strlen($this->container['undesirability_comment']) > 35)) {
            $invalidProperties[] = "invalid value for 'undesirability_comment', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['bp_grouping_character']) && (mb_strlen($this->container['bp_grouping_character']) > 10)) {
            $invalidProperties[] = "invalid value for 'bp_grouping_character', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['bp_letter_salutation']) && (mb_strlen($this->container['bp_letter_salutation']) > 2)) {
            $invalidProperties[] = "invalid value for 'bp_letter_salutation', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['business_partner_target_group']) && (mb_strlen($this->container['business_partner_target_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'business_partner_target_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['business_partner_employee_group']) && (mb_strlen($this->container['business_partner_employee_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'business_partner_employee_group', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_partner_is_vip
     *
     * @return bool|null
     */
    public function getBusinessPartnerIsVip()
    {
        return $this->container['business_partner_is_vip'];
    }

    /**
     * Sets business_partner_is_vip
     *
     * @param bool|null $business_partner_is_vip Business Partner Is VIP
     *
     * @return self
     */
    public function setBusinessPartnerIsVip($business_partner_is_vip)
    {
        if (is_null($business_partner_is_vip)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_is_vip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_is_vip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_is_vip'] = $business_partner_is_vip;

        return $this;
    }

    /**
     * Gets trading_partner
     *
     * @return string|null
     */
    public function getTradingPartner()
    {
        return $this->container['trading_partner'];
    }

    /**
     * Sets trading_partner
     *
     * @param string|null $trading_partner Company ID of Trading Partner
     *
     * @return self
     */
    public function setTradingPartner($trading_partner)
    {
        if (is_null($trading_partner)) {
            array_push($this->openAPINullablesSetToNull, 'trading_partner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trading_partner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($trading_partner) && (mb_strlen($trading_partner) > 6)) {
            throw new \InvalidArgumentException('invalid length for $trading_partner when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['trading_partner'] = $trading_partner;

        return $this;
    }

    /**
     * Gets factory_calendar
     *
     * @return string|null
     */
    public function getFactoryCalendar()
    {
        return $this->container['factory_calendar'];
    }

    /**
     * Sets factory_calendar
     *
     * @param string|null $factory_calendar factory_calendar
     *
     * @return self
     */
    public function setFactoryCalendar($factory_calendar)
    {
        if (is_null($factory_calendar)) {
            array_push($this->openAPINullablesSetToNull, 'factory_calendar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('factory_calendar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($factory_calendar) && (mb_strlen($factory_calendar) > 2)) {
            throw new \InvalidArgumentException('invalid length for $factory_calendar when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['factory_calendar'] = $factory_calendar;

        return $this;
    }

    /**
     * Gets business_partner_office_country
     *
     * @return string|null
     */
    public function getBusinessPartnerOfficeCountry()
    {
        return $this->container['business_partner_office_country'];
    }

    /**
     * Sets business_partner_office_country
     *
     * @param string|null $business_partner_office_country Country/Region of Registered Office
     *
     * @return self
     */
    public function setBusinessPartnerOfficeCountry($business_partner_office_country)
    {
        if (is_null($business_partner_office_country)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_office_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_office_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_office_country) && (mb_strlen($business_partner_office_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_office_country when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['business_partner_office_country'] = $business_partner_office_country;

        return $this;
    }

    /**
     * Gets business_partner_office_region
     *
     * @return string|null
     */
    public function getBusinessPartnerOfficeRegion()
    {
        return $this->container['business_partner_office_region'];
    }

    /**
     * Sets business_partner_office_region
     *
     * @param string|null $business_partner_office_region Region of Registered Office
     *
     * @return self
     */
    public function setBusinessPartnerOfficeRegion($business_partner_office_region)
    {
        if (is_null($business_partner_office_region)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_office_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_office_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_office_region) && (mb_strlen($business_partner_office_region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_office_region when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['business_partner_office_region'] = $business_partner_office_region;

        return $this;
    }

    /**
     * Gets bp_registered_office_name
     *
     * @return string|null
     */
    public function getBpRegisteredOfficeName()
    {
        return $this->container['bp_registered_office_name'];
    }

    /**
     * Sets bp_registered_office_name
     *
     * @param string|null $bp_registered_office_name bp_registered_office_name
     *
     * @return self
     */
    public function setBpRegisteredOfficeName($bp_registered_office_name)
    {
        if (is_null($bp_registered_office_name)) {
            array_push($this->openAPINullablesSetToNull, 'bp_registered_office_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_registered_office_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_registered_office_name) && (mb_strlen($bp_registered_office_name) > 35)) {
            throw new \InvalidArgumentException('invalid length for $bp_registered_office_name when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['bp_registered_office_name'] = $bp_registered_office_name;

        return $this;
    }

    /**
     * Gets bp_balance_sheet_currency
     *
     * @return string|null
     */
    public function getBpBalanceSheetCurrency()
    {
        return $this->container['bp_balance_sheet_currency'];
    }

    /**
     * Sets bp_balance_sheet_currency
     *
     * @param string|null $bp_balance_sheet_currency Balance Sheet Currency
     *
     * @return self
     */
    public function setBpBalanceSheetCurrency($bp_balance_sheet_currency)
    {
        if (is_null($bp_balance_sheet_currency)) {
            array_push($this->openAPINullablesSetToNull, 'bp_balance_sheet_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_balance_sheet_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_balance_sheet_currency) && (mb_strlen($bp_balance_sheet_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $bp_balance_sheet_currency when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['bp_balance_sheet_currency'] = $bp_balance_sheet_currency;

        return $this;
    }

    /**
     * Gets bp_last_cptl_incr_amt_in_bal_sht_crcy
     *
     * @return float|null
     */
    public function getBpLastCptlIncrAmtInBalShtCrcy()
    {
        return $this->container['bp_last_cptl_incr_amt_in_bal_sht_crcy'];
    }

    /**
     * Sets bp_last_cptl_incr_amt_in_bal_sht_crcy
     *
     * @param float|null $bp_last_cptl_incr_amt_in_bal_sht_crcy Amount of last capital increase
     *
     * @return self
     */
    public function setBpLastCptlIncrAmtInBalShtCrcy($bp_last_cptl_incr_amt_in_bal_sht_crcy)
    {
        if (is_null($bp_last_cptl_incr_amt_in_bal_sht_crcy)) {
            array_push($this->openAPINullablesSetToNull, 'bp_last_cptl_incr_amt_in_bal_sht_crcy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_last_cptl_incr_amt_in_bal_sht_crcy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['bp_last_cptl_incr_amt_in_bal_sht_crcy'] = $bp_last_cptl_incr_amt_in_bal_sht_crcy;

        return $this;
    }

    /**
     * Gets bp_last_capital_increase_year
     *
     * @return string|null
     */
    public function getBpLastCapitalIncreaseYear()
    {
        return $this->container['bp_last_capital_increase_year'];
    }

    /**
     * Sets bp_last_capital_increase_year
     *
     * @param string|null $bp_last_capital_increase_year Year of Last Capital Increase
     *
     * @return self
     */
    public function setBpLastCapitalIncreaseYear($bp_last_capital_increase_year)
    {
        if (is_null($bp_last_capital_increase_year)) {
            array_push($this->openAPINullablesSetToNull, 'bp_last_capital_increase_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_last_capital_increase_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_last_capital_increase_year) && (mb_strlen($bp_last_capital_increase_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $bp_last_capital_increase_year when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['bp_last_capital_increase_year'] = $bp_last_capital_increase_year;

        return $this;
    }

    /**
     * Gets bp_balance_sheet_display_type
     *
     * @return string|null
     */
    public function getBpBalanceSheetDisplayType()
    {
        return $this->container['bp_balance_sheet_display_type'];
    }

    /**
     * Sets bp_balance_sheet_display_type
     *
     * @param string|null $bp_balance_sheet_display_type Balance Sheet Display
     *
     * @return self
     */
    public function setBpBalanceSheetDisplayType($bp_balance_sheet_display_type)
    {
        if (is_null($bp_balance_sheet_display_type)) {
            array_push($this->openAPINullablesSetToNull, 'bp_balance_sheet_display_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_balance_sheet_display_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_balance_sheet_display_type) && (mb_strlen($bp_balance_sheet_display_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bp_balance_sheet_display_type when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['bp_balance_sheet_display_type'] = $bp_balance_sheet_display_type;

        return $this;
    }

    /**
     * Gets business_partner_citizenship
     *
     * @return string|null
     */
    public function getBusinessPartnerCitizenship()
    {
        return $this->container['business_partner_citizenship'];
    }

    /**
     * Sets business_partner_citizenship
     *
     * @param string|null $business_partner_citizenship business_partner_citizenship
     *
     * @return self
     */
    public function setBusinessPartnerCitizenship($business_partner_citizenship)
    {
        if (is_null($business_partner_citizenship)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_citizenship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_citizenship', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_citizenship) && (mb_strlen($business_partner_citizenship) > 3)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_citizenship when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['business_partner_citizenship'] = $business_partner_citizenship;

        return $this;
    }

    /**
     * Gets bp_marital_property_regime
     *
     * @return string|null
     */
    public function getBpMaritalPropertyRegime()
    {
        return $this->container['bp_marital_property_regime'];
    }

    /**
     * Sets bp_marital_property_regime
     *
     * @param string|null $bp_marital_property_regime Marital property regime
     *
     * @return self
     */
    public function setBpMaritalPropertyRegime($bp_marital_property_regime)
    {
        if (is_null($bp_marital_property_regime)) {
            array_push($this->openAPINullablesSetToNull, 'bp_marital_property_regime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_marital_property_regime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_marital_property_regime) && (mb_strlen($bp_marital_property_regime) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bp_marital_property_regime when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['bp_marital_property_regime'] = $bp_marital_property_regime;

        return $this;
    }

    /**
     * Gets business_partner_income_currency
     *
     * @return string|null
     */
    public function getBusinessPartnerIncomeCurrency()
    {
        return $this->container['business_partner_income_currency'];
    }

    /**
     * Sets business_partner_income_currency
     *
     * @param string|null $business_partner_income_currency Currency of Net Income
     *
     * @return self
     */
    public function setBusinessPartnerIncomeCurrency($business_partner_income_currency)
    {
        if (is_null($business_partner_income_currency)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_income_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_income_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_income_currency) && (mb_strlen($business_partner_income_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_income_currency when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['business_partner_income_currency'] = $business_partner_income_currency;

        return $this;
    }

    /**
     * Gets bp_number_of_children
     *
     * @return float|null
     */
    public function getBpNumberOfChildren()
    {
        return $this->container['bp_number_of_children'];
    }

    /**
     * Sets bp_number_of_children
     *
     * @param float|null $bp_number_of_children Number of Children Belonging to the Business Partner
     *
     * @return self
     */
    public function setBpNumberOfChildren($bp_number_of_children)
    {
        if (is_null($bp_number_of_children)) {
            array_push($this->openAPINullablesSetToNull, 'bp_number_of_children');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_number_of_children', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['bp_number_of_children'] = $bp_number_of_children;

        return $this;
    }

    /**
     * Gets bp_number_of_household_members
     *
     * @return float|null
     */
    public function getBpNumberOfHouseholdMembers()
    {
        return $this->container['bp_number_of_household_members'];
    }

    /**
     * Sets bp_number_of_household_members
     *
     * @param float|null $bp_number_of_household_members Number of People Living in the Household
     *
     * @return self
     */
    public function setBpNumberOfHouseholdMembers($bp_number_of_household_members)
    {
        if (is_null($bp_number_of_household_members)) {
            array_push($this->openAPINullablesSetToNull, 'bp_number_of_household_members');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_number_of_household_members', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['bp_number_of_household_members'] = $bp_number_of_household_members;

        return $this;
    }

    /**
     * Gets bp_annual_net_inc_amt_in_income_crcy
     *
     * @return float|null
     */
    public function getBpAnnualNetIncAmtInIncomeCrcy()
    {
        return $this->container['bp_annual_net_inc_amt_in_income_crcy'];
    }

    /**
     * Sets bp_annual_net_inc_amt_in_income_crcy
     *
     * @param float|null $bp_annual_net_inc_amt_in_income_crcy bp_annual_net_inc_amt_in_income_crcy
     *
     * @return self
     */
    public function setBpAnnualNetIncAmtInIncomeCrcy($bp_annual_net_inc_amt_in_income_crcy)
    {
        if (is_null($bp_annual_net_inc_amt_in_income_crcy)) {
            array_push($this->openAPINullablesSetToNull, 'bp_annual_net_inc_amt_in_income_crcy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_annual_net_inc_amt_in_income_crcy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['bp_annual_net_inc_amt_in_income_crcy'] = $bp_annual_net_inc_amt_in_income_crcy;

        return $this;
    }

    /**
     * Gets bp_monthly_net_inc_amt_in_income_crcy
     *
     * @return float|null
     */
    public function getBpMonthlyNetIncAmtInIncomeCrcy()
    {
        return $this->container['bp_monthly_net_inc_amt_in_income_crcy'];
    }

    /**
     * Sets bp_monthly_net_inc_amt_in_income_crcy
     *
     * @param float|null $bp_monthly_net_inc_amt_in_income_crcy Monthly Net Income of Business Partner
     *
     * @return self
     */
    public function setBpMonthlyNetIncAmtInIncomeCrcy($bp_monthly_net_inc_amt_in_income_crcy)
    {
        if (is_null($bp_monthly_net_inc_amt_in_income_crcy)) {
            array_push($this->openAPINullablesSetToNull, 'bp_monthly_net_inc_amt_in_income_crcy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_monthly_net_inc_amt_in_income_crcy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['bp_monthly_net_inc_amt_in_income_crcy'] = $bp_monthly_net_inc_amt_in_income_crcy;

        return $this;
    }

    /**
     * Gets bp_annual_net_income_year
     *
     * @return string|null
     */
    public function getBpAnnualNetIncomeYear()
    {
        return $this->container['bp_annual_net_income_year'];
    }

    /**
     * Sets bp_annual_net_income_year
     *
     * @param string|null $bp_annual_net_income_year Year of Net Annual Income
     *
     * @return self
     */
    public function setBpAnnualNetIncomeYear($bp_annual_net_income_year)
    {
        if (is_null($bp_annual_net_income_year)) {
            array_push($this->openAPINullablesSetToNull, 'bp_annual_net_income_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_annual_net_income_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_annual_net_income_year) && (mb_strlen($bp_annual_net_income_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $bp_annual_net_income_year when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['bp_annual_net_income_year'] = $bp_annual_net_income_year;

        return $this;
    }

    /**
     * Gets bp_monthly_net_income_month
     *
     * @return string|null
     */
    public function getBpMonthlyNetIncomeMonth()
    {
        return $this->container['bp_monthly_net_income_month'];
    }

    /**
     * Sets bp_monthly_net_income_month
     *
     * @param string|null $bp_monthly_net_income_month Calendar Month of Monthly Net Income
     *
     * @return self
     */
    public function setBpMonthlyNetIncomeMonth($bp_monthly_net_income_month)
    {
        if (is_null($bp_monthly_net_income_month)) {
            array_push($this->openAPINullablesSetToNull, 'bp_monthly_net_income_month');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_monthly_net_income_month', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_monthly_net_income_month) && (mb_strlen($bp_monthly_net_income_month) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bp_monthly_net_income_month when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['bp_monthly_net_income_month'] = $bp_monthly_net_income_month;

        return $this;
    }

    /**
     * Gets bp_monthly_net_income_year
     *
     * @return string|null
     */
    public function getBpMonthlyNetIncomeYear()
    {
        return $this->container['bp_monthly_net_income_year'];
    }

    /**
     * Sets bp_monthly_net_income_year
     *
     * @param string|null $bp_monthly_net_income_year Year of Monthly Net Income
     *
     * @return self
     */
    public function setBpMonthlyNetIncomeYear($bp_monthly_net_income_year)
    {
        if (is_null($bp_monthly_net_income_year)) {
            array_push($this->openAPINullablesSetToNull, 'bp_monthly_net_income_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_monthly_net_income_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_monthly_net_income_year) && (mb_strlen($bp_monthly_net_income_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $bp_monthly_net_income_year when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['bp_monthly_net_income_year'] = $bp_monthly_net_income_year;

        return $this;
    }

    /**
     * Gets bp_place_of_death_name
     *
     * @return string|null
     */
    public function getBpPlaceOfDeathName()
    {
        return $this->container['bp_place_of_death_name'];
    }

    /**
     * Sets bp_place_of_death_name
     *
     * @param string|null $bp_place_of_death_name Name of Place of Death of Natural Person
     *
     * @return self
     */
    public function setBpPlaceOfDeathName($bp_place_of_death_name)
    {
        if (is_null($bp_place_of_death_name)) {
            array_push($this->openAPINullablesSetToNull, 'bp_place_of_death_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_place_of_death_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_place_of_death_name) && (mb_strlen($bp_place_of_death_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $bp_place_of_death_name when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['bp_place_of_death_name'] = $bp_place_of_death_name;

        return $this;
    }

    /**
     * Gets customer_is_unwanted
     *
     * @return bool|null
     */
    public function getCustomerIsUnwanted()
    {
        return $this->container['customer_is_unwanted'];
    }

    /**
     * Sets customer_is_unwanted
     *
     * @param bool|null $customer_is_unwanted customer_is_unwanted
     *
     * @return self
     */
    public function setCustomerIsUnwanted($customer_is_unwanted)
    {
        if (is_null($customer_is_unwanted)) {
            array_push($this->openAPINullablesSetToNull, 'customer_is_unwanted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_is_unwanted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_is_unwanted'] = $customer_is_unwanted;

        return $this;
    }

    /**
     * Gets undesirability_reason
     *
     * @return string|null
     */
    public function getUndesirabilityReason()
    {
        return $this->container['undesirability_reason'];
    }

    /**
     * Sets undesirability_reason
     *
     * @param string|null $undesirability_reason Reason for Undesirability
     *
     * @return self
     */
    public function setUndesirabilityReason($undesirability_reason)
    {
        if (is_null($undesirability_reason)) {
            array_push($this->openAPINullablesSetToNull, 'undesirability_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('undesirability_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($undesirability_reason) && (mb_strlen($undesirability_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $undesirability_reason when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['undesirability_reason'] = $undesirability_reason;

        return $this;
    }

    /**
     * Gets undesirability_comment
     *
     * @return string|null
     */
    public function getUndesirabilityComment()
    {
        return $this->container['undesirability_comment'];
    }

    /**
     * Sets undesirability_comment
     *
     * @param string|null $undesirability_comment Comment on Undesirability
     *
     * @return self
     */
    public function setUndesirabilityComment($undesirability_comment)
    {
        if (is_null($undesirability_comment)) {
            array_push($this->openAPINullablesSetToNull, 'undesirability_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('undesirability_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($undesirability_comment) && (mb_strlen($undesirability_comment) > 35)) {
            throw new \InvalidArgumentException('invalid length for $undesirability_comment when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['undesirability_comment'] = $undesirability_comment;

        return $this;
    }

    /**
     * Gets last_customer_contact_date
     *
     * @return string|null
     */
    public function getLastCustomerContactDate()
    {
        return $this->container['last_customer_contact_date'];
    }

    /**
     * Sets last_customer_contact_date
     *
     * @param string|null $last_customer_contact_date Date of Last Customer Contact
     *
     * @return self
     */
    public function setLastCustomerContactDate($last_customer_contact_date)
    {
        if (is_null($last_customer_contact_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_customer_contact_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_customer_contact_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_customer_contact_date'] = $last_customer_contact_date;

        return $this;
    }

    /**
     * Gets bp_grouping_character
     *
     * @return string|null
     */
    public function getBpGroupingCharacter()
    {
        return $this->container['bp_grouping_character'];
    }

    /**
     * Sets bp_grouping_character
     *
     * @param string|null $bp_grouping_character Grouping Character
     *
     * @return self
     */
    public function setBpGroupingCharacter($bp_grouping_character)
    {
        if (is_null($bp_grouping_character)) {
            array_push($this->openAPINullablesSetToNull, 'bp_grouping_character');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_grouping_character', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_grouping_character) && (mb_strlen($bp_grouping_character) > 10)) {
            throw new \InvalidArgumentException('invalid length for $bp_grouping_character when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['bp_grouping_character'] = $bp_grouping_character;

        return $this;
    }

    /**
     * Gets bp_letter_salutation
     *
     * @return string|null
     */
    public function getBpLetterSalutation()
    {
        return $this->container['bp_letter_salutation'];
    }

    /**
     * Sets bp_letter_salutation
     *
     * @param string|null $bp_letter_salutation bp_letter_salutation
     *
     * @return self
     */
    public function setBpLetterSalutation($bp_letter_salutation)
    {
        if (is_null($bp_letter_salutation)) {
            array_push($this->openAPINullablesSetToNull, 'bp_letter_salutation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_letter_salutation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_letter_salutation) && (mb_strlen($bp_letter_salutation) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bp_letter_salutation when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['bp_letter_salutation'] = $bp_letter_salutation;

        return $this;
    }

    /**
     * Gets business_partner_target_group
     *
     * @return string|null
     */
    public function getBusinessPartnerTargetGroup()
    {
        return $this->container['business_partner_target_group'];
    }

    /**
     * Sets business_partner_target_group
     *
     * @param string|null $business_partner_target_group business_partner_target_group
     *
     * @return self
     */
    public function setBusinessPartnerTargetGroup($business_partner_target_group)
    {
        if (is_null($business_partner_target_group)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_target_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_target_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_target_group) && (mb_strlen($business_partner_target_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_target_group when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['business_partner_target_group'] = $business_partner_target_group;

        return $this;
    }

    /**
     * Gets business_partner_employee_group
     *
     * @return string|null
     */
    public function getBusinessPartnerEmployeeGroup()
    {
        return $this->container['business_partner_employee_group'];
    }

    /**
     * Sets business_partner_employee_group
     *
     * @param string|null $business_partner_employee_group business_partner_employee_group
     *
     * @return self
     */
    public function setBusinessPartnerEmployeeGroup($business_partner_employee_group)
    {
        if (is_null($business_partner_employee_group)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_employee_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_employee_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_employee_group) && (mb_strlen($business_partner_employee_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_employee_group when calling APIBUSINESSPARTNERABPFinancialServicesExtnTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['business_partner_employee_group'] = $business_partner_employee_group;

        return $this;
    }

    /**
     * Gets business_partner_is_employee
     *
     * @return bool|null
     */
    public function getBusinessPartnerIsEmployee()
    {
        return $this->container['business_partner_is_employee'];
    }

    /**
     * Sets business_partner_is_employee
     *
     * @param bool|null $business_partner_is_employee business_partner_is_employee
     *
     * @return self
     */
    public function setBusinessPartnerIsEmployee($business_partner_is_employee)
    {
        if (is_null($business_partner_is_employee)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_is_employee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_is_employee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_is_employee'] = $business_partner_is_employee;

        return $this;
    }

    /**
     * Gets bp_termn_bus_relations_bank_date
     *
     * @return string|null
     */
    public function getBpTermnBusRelationsBankDate()
    {
        return $this->container['bp_termn_bus_relations_bank_date'];
    }

    /**
     * Sets bp_termn_bus_relations_bank_date
     *
     * @param string|null $bp_termn_bus_relations_bank_date Termination Date for Business Relations with the Bank
     *
     * @return self
     */
    public function setBpTermnBusRelationsBankDate($bp_termn_bus_relations_bank_date)
    {
        if (is_null($bp_termn_bus_relations_bank_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_termn_bus_relations_bank_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_termn_bus_relations_bank_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_termn_bus_relations_bank_date'] = $bp_termn_bus_relations_bank_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


