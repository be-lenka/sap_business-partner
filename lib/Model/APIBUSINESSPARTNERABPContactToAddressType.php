<?php
/**
 * APIBUSINESSPARTNERABPContactToAddressType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABPContactToAddressType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABPContactToAddressType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BPContactToAddressType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'relationship_number' => 'string',
        'business_partner_company' => 'string',
        'business_partner_person' => 'string',
        'validity_end_date' => 'string',
        'address_id' => 'string',
        'address_number' => 'string',
        'additional_street_prefix_name' => 'string',
        'additional_street_suffix_name' => 'string',
        'address_time_zone' => 'string',
        'care_of_name' => 'string',
        'city_code' => 'string',
        'city_name' => 'string',
        'company_postal_code' => 'string',
        'country' => 'string',
        'county' => 'string',
        'delivery_service_number' => 'string',
        'delivery_service_type_code' => 'string',
        'district' => 'string',
        'form_of_address' => 'string',
        'full_name' => 'string',
        'home_city_name' => 'string',
        'house_number' => 'string',
        'house_number_supplement_text' => 'string',
        'language' => 'string',
        'po_box' => 'string',
        'po_box_deviating_city_name' => 'string',
        'po_box_deviating_country' => 'string',
        'po_box_deviating_region' => 'string',
        'po_box_is_without_number' => 'bool',
        'po_box_lobby_name' => 'string',
        'po_box_postal_code' => 'string',
        'person' => 'string',
        'postal_code' => 'string',
        'prfrd_comm_medium_type' => 'string',
        'region' => 'string',
        'street_name' => 'string',
        'street_prefix_name' => 'string',
        'street_suffix_name' => 'string',
        'tax_jurisdiction' => 'string',
        'transport_zone' => 'string',
        'address_representation_code' => 'string',
        'contact_person_building' => 'string',
        'contact_person_prfrd_comm_medium' => 'string',
        'contact_relationship_department' => 'string',
        'contact_relationship_function' => 'string',
        'correspondence_short_name' => 'string',
        'floor' => 'string',
        'inhouse_mail' => 'string',
        'is_default_address' => 'bool',
        'room_number' => 'string',
        'to_email_address' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToEmailAddress',
        'to_fax_number' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToFaxNumber',
        'to_mobile_phone_number' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToMobilePhoneNumber',
        'to_phone_number' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToMobilePhoneNumber',
        'to_url_address' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToURLAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'relationship_number' => null,
        'business_partner_company' => null,
        'business_partner_person' => null,
        'validity_end_date' => null,
        'address_id' => null,
        'address_number' => null,
        'additional_street_prefix_name' => null,
        'additional_street_suffix_name' => null,
        'address_time_zone' => null,
        'care_of_name' => null,
        'city_code' => null,
        'city_name' => null,
        'company_postal_code' => null,
        'country' => null,
        'county' => null,
        'delivery_service_number' => null,
        'delivery_service_type_code' => null,
        'district' => null,
        'form_of_address' => null,
        'full_name' => null,
        'home_city_name' => null,
        'house_number' => null,
        'house_number_supplement_text' => null,
        'language' => null,
        'po_box' => null,
        'po_box_deviating_city_name' => null,
        'po_box_deviating_country' => null,
        'po_box_deviating_region' => null,
        'po_box_is_without_number' => null,
        'po_box_lobby_name' => null,
        'po_box_postal_code' => null,
        'person' => null,
        'postal_code' => null,
        'prfrd_comm_medium_type' => null,
        'region' => null,
        'street_name' => null,
        'street_prefix_name' => null,
        'street_suffix_name' => null,
        'tax_jurisdiction' => null,
        'transport_zone' => null,
        'address_representation_code' => null,
        'contact_person_building' => null,
        'contact_person_prfrd_comm_medium' => null,
        'contact_relationship_department' => null,
        'contact_relationship_function' => null,
        'correspondence_short_name' => null,
        'floor' => null,
        'inhouse_mail' => null,
        'is_default_address' => null,
        'room_number' => null,
        'to_email_address' => null,
        'to_fax_number' => null,
        'to_mobile_phone_number' => null,
        'to_phone_number' => null,
        'to_url_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'relationship_number' => false,
		'business_partner_company' => false,
		'business_partner_person' => false,
		'validity_end_date' => false,
		'address_id' => false,
		'address_number' => true,
		'additional_street_prefix_name' => true,
		'additional_street_suffix_name' => true,
		'address_time_zone' => true,
		'care_of_name' => true,
		'city_code' => true,
		'city_name' => true,
		'company_postal_code' => true,
		'country' => true,
		'county' => true,
		'delivery_service_number' => true,
		'delivery_service_type_code' => true,
		'district' => true,
		'form_of_address' => true,
		'full_name' => true,
		'home_city_name' => true,
		'house_number' => true,
		'house_number_supplement_text' => true,
		'language' => true,
		'po_box' => true,
		'po_box_deviating_city_name' => true,
		'po_box_deviating_country' => true,
		'po_box_deviating_region' => true,
		'po_box_is_without_number' => true,
		'po_box_lobby_name' => true,
		'po_box_postal_code' => true,
		'person' => true,
		'postal_code' => true,
		'prfrd_comm_medium_type' => true,
		'region' => true,
		'street_name' => true,
		'street_prefix_name' => true,
		'street_suffix_name' => true,
		'tax_jurisdiction' => true,
		'transport_zone' => true,
		'address_representation_code' => true,
		'contact_person_building' => true,
		'contact_person_prfrd_comm_medium' => true,
		'contact_relationship_department' => true,
		'contact_relationship_function' => true,
		'correspondence_short_name' => true,
		'floor' => true,
		'inhouse_mail' => true,
		'is_default_address' => true,
		'room_number' => true,
		'to_email_address' => false,
		'to_fax_number' => false,
		'to_mobile_phone_number' => false,
		'to_phone_number' => false,
		'to_url_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'relationship_number' => 'RelationshipNumber',
        'business_partner_company' => 'BusinessPartnerCompany',
        'business_partner_person' => 'BusinessPartnerPerson',
        'validity_end_date' => 'ValidityEndDate',
        'address_id' => 'AddressID',
        'address_number' => 'AddressNumber',
        'additional_street_prefix_name' => 'AdditionalStreetPrefixName',
        'additional_street_suffix_name' => 'AdditionalStreetSuffixName',
        'address_time_zone' => 'AddressTimeZone',
        'care_of_name' => 'CareOfName',
        'city_code' => 'CityCode',
        'city_name' => 'CityName',
        'company_postal_code' => 'CompanyPostalCode',
        'country' => 'Country',
        'county' => 'County',
        'delivery_service_number' => 'DeliveryServiceNumber',
        'delivery_service_type_code' => 'DeliveryServiceTypeCode',
        'district' => 'District',
        'form_of_address' => 'FormOfAddress',
        'full_name' => 'FullName',
        'home_city_name' => 'HomeCityName',
        'house_number' => 'HouseNumber',
        'house_number_supplement_text' => 'HouseNumberSupplementText',
        'language' => 'Language',
        'po_box' => 'POBox',
        'po_box_deviating_city_name' => 'POBoxDeviatingCityName',
        'po_box_deviating_country' => 'POBoxDeviatingCountry',
        'po_box_deviating_region' => 'POBoxDeviatingRegion',
        'po_box_is_without_number' => 'POBoxIsWithoutNumber',
        'po_box_lobby_name' => 'POBoxLobbyName',
        'po_box_postal_code' => 'POBoxPostalCode',
        'person' => 'Person',
        'postal_code' => 'PostalCode',
        'prfrd_comm_medium_type' => 'PrfrdCommMediumType',
        'region' => 'Region',
        'street_name' => 'StreetName',
        'street_prefix_name' => 'StreetPrefixName',
        'street_suffix_name' => 'StreetSuffixName',
        'tax_jurisdiction' => 'TaxJurisdiction',
        'transport_zone' => 'TransportZone',
        'address_representation_code' => 'AddressRepresentationCode',
        'contact_person_building' => 'ContactPersonBuilding',
        'contact_person_prfrd_comm_medium' => 'ContactPersonPrfrdCommMedium',
        'contact_relationship_department' => 'ContactRelationshipDepartment',
        'contact_relationship_function' => 'ContactRelationshipFunction',
        'correspondence_short_name' => 'CorrespondenceShortName',
        'floor' => 'Floor',
        'inhouse_mail' => 'InhouseMail',
        'is_default_address' => 'IsDefaultAddress',
        'room_number' => 'RoomNumber',
        'to_email_address' => 'to_EmailAddress',
        'to_fax_number' => 'to_FaxNumber',
        'to_mobile_phone_number' => 'to_MobilePhoneNumber',
        'to_phone_number' => 'to_PhoneNumber',
        'to_url_address' => 'to_URLAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'relationship_number' => 'setRelationshipNumber',
        'business_partner_company' => 'setBusinessPartnerCompany',
        'business_partner_person' => 'setBusinessPartnerPerson',
        'validity_end_date' => 'setValidityEndDate',
        'address_id' => 'setAddressId',
        'address_number' => 'setAddressNumber',
        'additional_street_prefix_name' => 'setAdditionalStreetPrefixName',
        'additional_street_suffix_name' => 'setAdditionalStreetSuffixName',
        'address_time_zone' => 'setAddressTimeZone',
        'care_of_name' => 'setCareOfName',
        'city_code' => 'setCityCode',
        'city_name' => 'setCityName',
        'company_postal_code' => 'setCompanyPostalCode',
        'country' => 'setCountry',
        'county' => 'setCounty',
        'delivery_service_number' => 'setDeliveryServiceNumber',
        'delivery_service_type_code' => 'setDeliveryServiceTypeCode',
        'district' => 'setDistrict',
        'form_of_address' => 'setFormOfAddress',
        'full_name' => 'setFullName',
        'home_city_name' => 'setHomeCityName',
        'house_number' => 'setHouseNumber',
        'house_number_supplement_text' => 'setHouseNumberSupplementText',
        'language' => 'setLanguage',
        'po_box' => 'setPoBox',
        'po_box_deviating_city_name' => 'setPoBoxDeviatingCityName',
        'po_box_deviating_country' => 'setPoBoxDeviatingCountry',
        'po_box_deviating_region' => 'setPoBoxDeviatingRegion',
        'po_box_is_without_number' => 'setPoBoxIsWithoutNumber',
        'po_box_lobby_name' => 'setPoBoxLobbyName',
        'po_box_postal_code' => 'setPoBoxPostalCode',
        'person' => 'setPerson',
        'postal_code' => 'setPostalCode',
        'prfrd_comm_medium_type' => 'setPrfrdCommMediumType',
        'region' => 'setRegion',
        'street_name' => 'setStreetName',
        'street_prefix_name' => 'setStreetPrefixName',
        'street_suffix_name' => 'setStreetSuffixName',
        'tax_jurisdiction' => 'setTaxJurisdiction',
        'transport_zone' => 'setTransportZone',
        'address_representation_code' => 'setAddressRepresentationCode',
        'contact_person_building' => 'setContactPersonBuilding',
        'contact_person_prfrd_comm_medium' => 'setContactPersonPrfrdCommMedium',
        'contact_relationship_department' => 'setContactRelationshipDepartment',
        'contact_relationship_function' => 'setContactRelationshipFunction',
        'correspondence_short_name' => 'setCorrespondenceShortName',
        'floor' => 'setFloor',
        'inhouse_mail' => 'setInhouseMail',
        'is_default_address' => 'setIsDefaultAddress',
        'room_number' => 'setRoomNumber',
        'to_email_address' => 'setToEmailAddress',
        'to_fax_number' => 'setToFaxNumber',
        'to_mobile_phone_number' => 'setToMobilePhoneNumber',
        'to_phone_number' => 'setToPhoneNumber',
        'to_url_address' => 'setToUrlAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'relationship_number' => 'getRelationshipNumber',
        'business_partner_company' => 'getBusinessPartnerCompany',
        'business_partner_person' => 'getBusinessPartnerPerson',
        'validity_end_date' => 'getValidityEndDate',
        'address_id' => 'getAddressId',
        'address_number' => 'getAddressNumber',
        'additional_street_prefix_name' => 'getAdditionalStreetPrefixName',
        'additional_street_suffix_name' => 'getAdditionalStreetSuffixName',
        'address_time_zone' => 'getAddressTimeZone',
        'care_of_name' => 'getCareOfName',
        'city_code' => 'getCityCode',
        'city_name' => 'getCityName',
        'company_postal_code' => 'getCompanyPostalCode',
        'country' => 'getCountry',
        'county' => 'getCounty',
        'delivery_service_number' => 'getDeliveryServiceNumber',
        'delivery_service_type_code' => 'getDeliveryServiceTypeCode',
        'district' => 'getDistrict',
        'form_of_address' => 'getFormOfAddress',
        'full_name' => 'getFullName',
        'home_city_name' => 'getHomeCityName',
        'house_number' => 'getHouseNumber',
        'house_number_supplement_text' => 'getHouseNumberSupplementText',
        'language' => 'getLanguage',
        'po_box' => 'getPoBox',
        'po_box_deviating_city_name' => 'getPoBoxDeviatingCityName',
        'po_box_deviating_country' => 'getPoBoxDeviatingCountry',
        'po_box_deviating_region' => 'getPoBoxDeviatingRegion',
        'po_box_is_without_number' => 'getPoBoxIsWithoutNumber',
        'po_box_lobby_name' => 'getPoBoxLobbyName',
        'po_box_postal_code' => 'getPoBoxPostalCode',
        'person' => 'getPerson',
        'postal_code' => 'getPostalCode',
        'prfrd_comm_medium_type' => 'getPrfrdCommMediumType',
        'region' => 'getRegion',
        'street_name' => 'getStreetName',
        'street_prefix_name' => 'getStreetPrefixName',
        'street_suffix_name' => 'getStreetSuffixName',
        'tax_jurisdiction' => 'getTaxJurisdiction',
        'transport_zone' => 'getTransportZone',
        'address_representation_code' => 'getAddressRepresentationCode',
        'contact_person_building' => 'getContactPersonBuilding',
        'contact_person_prfrd_comm_medium' => 'getContactPersonPrfrdCommMedium',
        'contact_relationship_department' => 'getContactRelationshipDepartment',
        'contact_relationship_function' => 'getContactRelationshipFunction',
        'correspondence_short_name' => 'getCorrespondenceShortName',
        'floor' => 'getFloor',
        'inhouse_mail' => 'getInhouseMail',
        'is_default_address' => 'getIsDefaultAddress',
        'room_number' => 'getRoomNumber',
        'to_email_address' => 'getToEmailAddress',
        'to_fax_number' => 'getToFaxNumber',
        'to_mobile_phone_number' => 'getToMobilePhoneNumber',
        'to_phone_number' => 'getToPhoneNumber',
        'to_url_address' => 'getToUrlAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('relationship_number', $data ?? [], null);
        $this->setIfExists('business_partner_company', $data ?? [], null);
        $this->setIfExists('business_partner_person', $data ?? [], null);
        $this->setIfExists('validity_end_date', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('address_number', $data ?? [], null);
        $this->setIfExists('additional_street_prefix_name', $data ?? [], null);
        $this->setIfExists('additional_street_suffix_name', $data ?? [], null);
        $this->setIfExists('address_time_zone', $data ?? [], null);
        $this->setIfExists('care_of_name', $data ?? [], null);
        $this->setIfExists('city_code', $data ?? [], null);
        $this->setIfExists('city_name', $data ?? [], null);
        $this->setIfExists('company_postal_code', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('delivery_service_number', $data ?? [], null);
        $this->setIfExists('delivery_service_type_code', $data ?? [], null);
        $this->setIfExists('district', $data ?? [], null);
        $this->setIfExists('form_of_address', $data ?? [], null);
        $this->setIfExists('full_name', $data ?? [], null);
        $this->setIfExists('home_city_name', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('house_number_supplement_text', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('po_box', $data ?? [], null);
        $this->setIfExists('po_box_deviating_city_name', $data ?? [], null);
        $this->setIfExists('po_box_deviating_country', $data ?? [], null);
        $this->setIfExists('po_box_deviating_region', $data ?? [], null);
        $this->setIfExists('po_box_is_without_number', $data ?? [], null);
        $this->setIfExists('po_box_lobby_name', $data ?? [], null);
        $this->setIfExists('po_box_postal_code', $data ?? [], null);
        $this->setIfExists('person', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('prfrd_comm_medium_type', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('street_prefix_name', $data ?? [], null);
        $this->setIfExists('street_suffix_name', $data ?? [], null);
        $this->setIfExists('tax_jurisdiction', $data ?? [], null);
        $this->setIfExists('transport_zone', $data ?? [], null);
        $this->setIfExists('address_representation_code', $data ?? [], null);
        $this->setIfExists('contact_person_building', $data ?? [], null);
        $this->setIfExists('contact_person_prfrd_comm_medium', $data ?? [], null);
        $this->setIfExists('contact_relationship_department', $data ?? [], null);
        $this->setIfExists('contact_relationship_function', $data ?? [], null);
        $this->setIfExists('correspondence_short_name', $data ?? [], null);
        $this->setIfExists('floor', $data ?? [], null);
        $this->setIfExists('inhouse_mail', $data ?? [], null);
        $this->setIfExists('is_default_address', $data ?? [], null);
        $this->setIfExists('room_number', $data ?? [], null);
        $this->setIfExists('to_email_address', $data ?? [], null);
        $this->setIfExists('to_fax_number', $data ?? [], null);
        $this->setIfExists('to_mobile_phone_number', $data ?? [], null);
        $this->setIfExists('to_phone_number', $data ?? [], null);
        $this->setIfExists('to_url_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['relationship_number']) && (mb_strlen($this->container['relationship_number']) > 12)) {
            $invalidProperties[] = "invalid value for 'relationship_number', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['business_partner_company']) && (mb_strlen($this->container['business_partner_company']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner_company', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['business_partner_person']) && (mb_strlen($this->container['business_partner_person']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner_person', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_id']) && (mb_strlen($this->container['address_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'address_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_number']) && (mb_strlen($this->container['address_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'address_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['additional_street_prefix_name']) && (mb_strlen($this->container['additional_street_prefix_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'additional_street_prefix_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['additional_street_suffix_name']) && (mb_strlen($this->container['additional_street_suffix_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'additional_street_suffix_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['address_time_zone']) && (mb_strlen($this->container['address_time_zone']) > 6)) {
            $invalidProperties[] = "invalid value for 'address_time_zone', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['care_of_name']) && (mb_strlen($this->container['care_of_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'care_of_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['city_code']) && (mb_strlen($this->container['city_code']) > 12)) {
            $invalidProperties[] = "invalid value for 'city_code', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['city_name']) && (mb_strlen($this->container['city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['company_postal_code']) && (mb_strlen($this->container['company_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'company_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 3)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 40)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['delivery_service_number']) && (mb_strlen($this->container['delivery_service_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_service_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_service_type_code']) && (mb_strlen($this->container['delivery_service_type_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'delivery_service_type_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['district']) && (mb_strlen($this->container['district']) > 40)) {
            $invalidProperties[] = "invalid value for 'district', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['form_of_address']) && (mb_strlen($this->container['form_of_address']) > 4)) {
            $invalidProperties[] = "invalid value for 'form_of_address', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['full_name']) && (mb_strlen($this->container['full_name']) > 80)) {
            $invalidProperties[] = "invalid value for 'full_name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['home_city_name']) && (mb_strlen($this->container['home_city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'home_city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['house_number']) && (mb_strlen($this->container['house_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['house_number_supplement_text']) && (mb_strlen($this->container['house_number_supplement_text']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number_supplement_text', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 2)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['po_box']) && (mb_strlen($this->container['po_box']) > 10)) {
            $invalidProperties[] = "invalid value for 'po_box', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['po_box_deviating_city_name']) && (mb_strlen($this->container['po_box_deviating_city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['po_box_deviating_country']) && (mb_strlen($this->container['po_box_deviating_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['po_box_deviating_region']) && (mb_strlen($this->container['po_box_deviating_region']) > 3)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['po_box_lobby_name']) && (mb_strlen($this->container['po_box_lobby_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'po_box_lobby_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['po_box_postal_code']) && (mb_strlen($this->container['po_box_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'po_box_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['person']) && (mb_strlen($this->container['person']) > 10)) {
            $invalidProperties[] = "invalid value for 'person', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['prfrd_comm_medium_type']) && (mb_strlen($this->container['prfrd_comm_medium_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'prfrd_comm_medium_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 3)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['street_name']) && (mb_strlen($this->container['street_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['street_prefix_name']) && (mb_strlen($this->container['street_prefix_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_prefix_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_suffix_name']) && (mb_strlen($this->container['street_suffix_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_suffix_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['tax_jurisdiction']) && (mb_strlen($this->container['tax_jurisdiction']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_jurisdiction', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['transport_zone']) && (mb_strlen($this->container['transport_zone']) > 10)) {
            $invalidProperties[] = "invalid value for 'transport_zone', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_representation_code']) && (mb_strlen($this->container['address_representation_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'address_representation_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['contact_person_building']) && (mb_strlen($this->container['contact_person_building']) > 10)) {
            $invalidProperties[] = "invalid value for 'contact_person_building', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['contact_person_prfrd_comm_medium']) && (mb_strlen($this->container['contact_person_prfrd_comm_medium']) > 3)) {
            $invalidProperties[] = "invalid value for 'contact_person_prfrd_comm_medium', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['contact_relationship_department']) && (mb_strlen($this->container['contact_relationship_department']) > 40)) {
            $invalidProperties[] = "invalid value for 'contact_relationship_department', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['contact_relationship_function']) && (mb_strlen($this->container['contact_relationship_function']) > 40)) {
            $invalidProperties[] = "invalid value for 'contact_relationship_function', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['correspondence_short_name']) && (mb_strlen($this->container['correspondence_short_name']) > 10)) {
            $invalidProperties[] = "invalid value for 'correspondence_short_name', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['floor']) && (mb_strlen($this->container['floor']) > 10)) {
            $invalidProperties[] = "invalid value for 'floor', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['inhouse_mail']) && (mb_strlen($this->container['inhouse_mail']) > 10)) {
            $invalidProperties[] = "invalid value for 'inhouse_mail', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['room_number']) && (mb_strlen($this->container['room_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'room_number', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets relationship_number
     *
     * @return string|null
     */
    public function getRelationshipNumber()
    {
        return $this->container['relationship_number'];
    }

    /**
     * Sets relationship_number
     *
     * @param string|null $relationship_number BP Relationship Number
     *
     * @return self
     */
    public function setRelationshipNumber($relationship_number)
    {
        if (is_null($relationship_number)) {
            throw new \InvalidArgumentException('non-nullable relationship_number cannot be null');
        }
        if ((mb_strlen($relationship_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $relationship_number when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 12.');
        }

        $this->container['relationship_number'] = $relationship_number;

        return $this;
    }

    /**
     * Gets business_partner_company
     *
     * @return string|null
     */
    public function getBusinessPartnerCompany()
    {
        return $this->container['business_partner_company'];
    }

    /**
     * Sets business_partner_company
     *
     * @param string|null $business_partner_company Business Partner Number
     *
     * @return self
     */
    public function setBusinessPartnerCompany($business_partner_company)
    {
        if (is_null($business_partner_company)) {
            throw new \InvalidArgumentException('non-nullable business_partner_company cannot be null');
        }
        if ((mb_strlen($business_partner_company) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_company when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['business_partner_company'] = $business_partner_company;

        return $this;
    }

    /**
     * Gets business_partner_person
     *
     * @return string|null
     */
    public function getBusinessPartnerPerson()
    {
        return $this->container['business_partner_person'];
    }

    /**
     * Sets business_partner_person
     *
     * @param string|null $business_partner_person Business Partner Number
     *
     * @return self
     */
    public function setBusinessPartnerPerson($business_partner_person)
    {
        if (is_null($business_partner_person)) {
            throw new \InvalidArgumentException('non-nullable business_partner_person cannot be null');
        }
        if ((mb_strlen($business_partner_person) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_person when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['business_partner_person'] = $business_partner_person;

        return $this;
    }

    /**
     * Gets validity_end_date
     *
     * @return string|null
     */
    public function getValidityEndDate()
    {
        return $this->container['validity_end_date'];
    }

    /**
     * Sets validity_end_date
     *
     * @param string|null $validity_end_date Validity Date (Valid To)
     *
     * @return self
     */
    public function setValidityEndDate($validity_end_date)
    {
        if (is_null($validity_end_date)) {
            throw new \InvalidArgumentException('non-nullable validity_end_date cannot be null');
        }
        $this->container['validity_end_date'] = $validity_end_date;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string|null $address_id address_id
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            throw new \InvalidArgumentException('non-nullable address_id cannot be null');
        }
        if ((mb_strlen($address_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $address_id when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets address_number
     *
     * @return string|null
     */
    public function getAddressNumber()
    {
        return $this->container['address_number'];
    }

    /**
     * Sets address_number
     *
     * @param string|null $address_number address_number
     *
     * @return self
     */
    public function setAddressNumber($address_number)
    {
        if (is_null($address_number)) {
            array_push($this->openAPINullablesSetToNull, 'address_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_number) && (mb_strlen($address_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $address_number when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['address_number'] = $address_number;

        return $this;
    }

    /**
     * Gets additional_street_prefix_name
     *
     * @return string|null
     */
    public function getAdditionalStreetPrefixName()
    {
        return $this->container['additional_street_prefix_name'];
    }

    /**
     * Sets additional_street_prefix_name
     *
     * @param string|null $additional_street_prefix_name additional_street_prefix_name
     *
     * @return self
     */
    public function setAdditionalStreetPrefixName($additional_street_prefix_name)
    {
        if (is_null($additional_street_prefix_name)) {
            array_push($this->openAPINullablesSetToNull, 'additional_street_prefix_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_street_prefix_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_street_prefix_name) && (mb_strlen($additional_street_prefix_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $additional_street_prefix_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['additional_street_prefix_name'] = $additional_street_prefix_name;

        return $this;
    }

    /**
     * Gets additional_street_suffix_name
     *
     * @return string|null
     */
    public function getAdditionalStreetSuffixName()
    {
        return $this->container['additional_street_suffix_name'];
    }

    /**
     * Sets additional_street_suffix_name
     *
     * @param string|null $additional_street_suffix_name additional_street_suffix_name
     *
     * @return self
     */
    public function setAdditionalStreetSuffixName($additional_street_suffix_name)
    {
        if (is_null($additional_street_suffix_name)) {
            array_push($this->openAPINullablesSetToNull, 'additional_street_suffix_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_street_suffix_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_street_suffix_name) && (mb_strlen($additional_street_suffix_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $additional_street_suffix_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['additional_street_suffix_name'] = $additional_street_suffix_name;

        return $this;
    }

    /**
     * Gets address_time_zone
     *
     * @return string|null
     */
    public function getAddressTimeZone()
    {
        return $this->container['address_time_zone'];
    }

    /**
     * Sets address_time_zone
     *
     * @param string|null $address_time_zone Address Time Zone
     *
     * @return self
     */
    public function setAddressTimeZone($address_time_zone)
    {
        if (is_null($address_time_zone)) {
            array_push($this->openAPINullablesSetToNull, 'address_time_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_time_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_time_zone) && (mb_strlen($address_time_zone) > 6)) {
            throw new \InvalidArgumentException('invalid length for $address_time_zone when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 6.');
        }

        $this->container['address_time_zone'] = $address_time_zone;

        return $this;
    }

    /**
     * Gets care_of_name
     *
     * @return string|null
     */
    public function getCareOfName()
    {
        return $this->container['care_of_name'];
    }

    /**
     * Sets care_of_name
     *
     * @param string|null $care_of_name c/o name
     *
     * @return self
     */
    public function setCareOfName($care_of_name)
    {
        if (is_null($care_of_name)) {
            array_push($this->openAPINullablesSetToNull, 'care_of_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('care_of_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($care_of_name) && (mb_strlen($care_of_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $care_of_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['care_of_name'] = $care_of_name;

        return $this;
    }

    /**
     * Gets city_code
     *
     * @return string|null
     */
    public function getCityCode()
    {
        return $this->container['city_code'];
    }

    /**
     * Sets city_code
     *
     * @param string|null $city_code City code for city/street file
     *
     * @return self
     */
    public function setCityCode($city_code)
    {
        if (is_null($city_code)) {
            array_push($this->openAPINullablesSetToNull, 'city_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city_code) && (mb_strlen($city_code) > 12)) {
            throw new \InvalidArgumentException('invalid length for $city_code when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 12.');
        }

        $this->container['city_code'] = $city_code;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string|null
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string|null $city_name city_name
     *
     * @return self
     */
    public function setCityName($city_name)
    {
        if (is_null($city_name)) {
            array_push($this->openAPINullablesSetToNull, 'city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city_name) && (mb_strlen($city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets company_postal_code
     *
     * @return string|null
     */
    public function getCompanyPostalCode()
    {
        return $this->container['company_postal_code'];
    }

    /**
     * Sets company_postal_code
     *
     * @param string|null $company_postal_code Company Postal Code (for Large Customers)
     *
     * @return self
     */
    public function setCompanyPostalCode($company_postal_code)
    {
        if (is_null($company_postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'company_postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company_postal_code) && (mb_strlen($company_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $company_postal_code when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['company_postal_code'] = $company_postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($country) && (mb_strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 3.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county county
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (is_null($county)) {
            array_push($this->openAPINullablesSetToNull, 'county');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('county', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($county) && (mb_strlen($county) > 40)) {
            throw new \InvalidArgumentException('invalid length for $county when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets delivery_service_number
     *
     * @return string|null
     */
    public function getDeliveryServiceNumber()
    {
        return $this->container['delivery_service_number'];
    }

    /**
     * Sets delivery_service_number
     *
     * @param string|null $delivery_service_number Number of Delivery Service
     *
     * @return self
     */
    public function setDeliveryServiceNumber($delivery_service_number)
    {
        if (is_null($delivery_service_number)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_service_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_service_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_service_number) && (mb_strlen($delivery_service_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_service_number when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['delivery_service_number'] = $delivery_service_number;

        return $this;
    }

    /**
     * Gets delivery_service_type_code
     *
     * @return string|null
     */
    public function getDeliveryServiceTypeCode()
    {
        return $this->container['delivery_service_type_code'];
    }

    /**
     * Sets delivery_service_type_code
     *
     * @param string|null $delivery_service_type_code Type of Delivery Service
     *
     * @return self
     */
    public function setDeliveryServiceTypeCode($delivery_service_type_code)
    {
        if (is_null($delivery_service_type_code)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_service_type_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_service_type_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_service_type_code) && (mb_strlen($delivery_service_type_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $delivery_service_type_code when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 4.');
        }

        $this->container['delivery_service_type_code'] = $delivery_service_type_code;

        return $this;
    }

    /**
     * Gets district
     *
     * @return string|null
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param string|null $district district
     *
     * @return self
     */
    public function setDistrict($district)
    {
        if (is_null($district)) {
            array_push($this->openAPINullablesSetToNull, 'district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($district) && (mb_strlen($district) > 40)) {
            throw new \InvalidArgumentException('invalid length for $district when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets form_of_address
     *
     * @return string|null
     */
    public function getFormOfAddress()
    {
        return $this->container['form_of_address'];
    }

    /**
     * Sets form_of_address
     *
     * @param string|null $form_of_address Form-of-Address Key
     *
     * @return self
     */
    public function setFormOfAddress($form_of_address)
    {
        if (is_null($form_of_address)) {
            array_push($this->openAPINullablesSetToNull, 'form_of_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_of_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($form_of_address) && (mb_strlen($form_of_address) > 4)) {
            throw new \InvalidArgumentException('invalid length for $form_of_address when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 4.');
        }

        $this->container['form_of_address'] = $form_of_address;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name Full name of a party (Bus. Partner, Org. Unit, Doc. address)
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        if (is_null($full_name)) {
            array_push($this->openAPINullablesSetToNull, 'full_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('full_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($full_name) && (mb_strlen($full_name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $full_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 80.');
        }

        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets home_city_name
     *
     * @return string|null
     */
    public function getHomeCityName()
    {
        return $this->container['home_city_name'];
    }

    /**
     * Sets home_city_name
     *
     * @param string|null $home_city_name City (different from postal city)
     *
     * @return self
     */
    public function setHomeCityName($home_city_name)
    {
        if (is_null($home_city_name)) {
            array_push($this->openAPINullablesSetToNull, 'home_city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($home_city_name) && (mb_strlen($home_city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $home_city_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['home_city_name'] = $home_city_name;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string|null $house_number house_number
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if (is_null($house_number)) {
            array_push($this->openAPINullablesSetToNull, 'house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_number) && (mb_strlen($house_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_supplement_text
     *
     * @return string|null
     */
    public function getHouseNumberSupplementText()
    {
        return $this->container['house_number_supplement_text'];
    }

    /**
     * Sets house_number_supplement_text
     *
     * @param string|null $house_number_supplement_text House number supplement
     *
     * @return self
     */
    public function setHouseNumberSupplementText($house_number_supplement_text)
    {
        if (is_null($house_number_supplement_text)) {
            array_push($this->openAPINullablesSetToNull, 'house_number_supplement_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number_supplement_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_number_supplement_text) && (mb_strlen($house_number_supplement_text) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number_supplement_text when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['house_number_supplement_text'] = $house_number_supplement_text;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            array_push($this->openAPINullablesSetToNull, 'language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($language) && (mb_strlen($language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $language when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 2.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets po_box
     *
     * @return string|null
     */
    public function getPoBox()
    {
        return $this->container['po_box'];
    }

    /**
     * Sets po_box
     *
     * @param string|null $po_box po_box
     *
     * @return self
     */
    public function setPoBox($po_box)
    {
        if (is_null($po_box)) {
            array_push($this->openAPINullablesSetToNull, 'po_box');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box) && (mb_strlen($po_box) > 10)) {
            throw new \InvalidArgumentException('invalid length for $po_box when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['po_box'] = $po_box;

        return $this;
    }

    /**
     * Gets po_box_deviating_city_name
     *
     * @return string|null
     */
    public function getPoBoxDeviatingCityName()
    {
        return $this->container['po_box_deviating_city_name'];
    }

    /**
     * Sets po_box_deviating_city_name
     *
     * @param string|null $po_box_deviating_city_name PO Box city
     *
     * @return self
     */
    public function setPoBoxDeviatingCityName($po_box_deviating_city_name)
    {
        if (is_null($po_box_deviating_city_name)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_deviating_city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_deviating_city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_deviating_city_name) && (mb_strlen($po_box_deviating_city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_city_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['po_box_deviating_city_name'] = $po_box_deviating_city_name;

        return $this;
    }

    /**
     * Gets po_box_deviating_country
     *
     * @return string|null
     */
    public function getPoBoxDeviatingCountry()
    {
        return $this->container['po_box_deviating_country'];
    }

    /**
     * Sets po_box_deviating_country
     *
     * @param string|null $po_box_deviating_country PO Box of Country/Region
     *
     * @return self
     */
    public function setPoBoxDeviatingCountry($po_box_deviating_country)
    {
        if (is_null($po_box_deviating_country)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_deviating_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_deviating_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_deviating_country) && (mb_strlen($po_box_deviating_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_country when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 3.');
        }

        $this->container['po_box_deviating_country'] = $po_box_deviating_country;

        return $this;
    }

    /**
     * Gets po_box_deviating_region
     *
     * @return string|null
     */
    public function getPoBoxDeviatingRegion()
    {
        return $this->container['po_box_deviating_region'];
    }

    /**
     * Sets po_box_deviating_region
     *
     * @param string|null $po_box_deviating_region Region for PO Box (Country/Region, State, Province, ...)
     *
     * @return self
     */
    public function setPoBoxDeviatingRegion($po_box_deviating_region)
    {
        if (is_null($po_box_deviating_region)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_deviating_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_deviating_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_deviating_region) && (mb_strlen($po_box_deviating_region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_region when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 3.');
        }

        $this->container['po_box_deviating_region'] = $po_box_deviating_region;

        return $this;
    }

    /**
     * Gets po_box_is_without_number
     *
     * @return bool|null
     */
    public function getPoBoxIsWithoutNumber()
    {
        return $this->container['po_box_is_without_number'];
    }

    /**
     * Sets po_box_is_without_number
     *
     * @param bool|null $po_box_is_without_number Flag: PO Box Without Number
     *
     * @return self
     */
    public function setPoBoxIsWithoutNumber($po_box_is_without_number)
    {
        if (is_null($po_box_is_without_number)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_is_without_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_is_without_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['po_box_is_without_number'] = $po_box_is_without_number;

        return $this;
    }

    /**
     * Gets po_box_lobby_name
     *
     * @return string|null
     */
    public function getPoBoxLobbyName()
    {
        return $this->container['po_box_lobby_name'];
    }

    /**
     * Sets po_box_lobby_name
     *
     * @param string|null $po_box_lobby_name po_box_lobby_name
     *
     * @return self
     */
    public function setPoBoxLobbyName($po_box_lobby_name)
    {
        if (is_null($po_box_lobby_name)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_lobby_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_lobby_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_lobby_name) && (mb_strlen($po_box_lobby_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $po_box_lobby_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['po_box_lobby_name'] = $po_box_lobby_name;

        return $this;
    }

    /**
     * Gets po_box_postal_code
     *
     * @return string|null
     */
    public function getPoBoxPostalCode()
    {
        return $this->container['po_box_postal_code'];
    }

    /**
     * Sets po_box_postal_code
     *
     * @param string|null $po_box_postal_code po_box_postal_code
     *
     * @return self
     */
    public function setPoBoxPostalCode($po_box_postal_code)
    {
        if (is_null($po_box_postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_postal_code) && (mb_strlen($po_box_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $po_box_postal_code when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['po_box_postal_code'] = $po_box_postal_code;

        return $this;
    }

    /**
     * Gets person
     *
     * @return string|null
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param string|null $person person
     *
     * @return self
     */
    public function setPerson($person)
    {
        if (is_null($person)) {
            array_push($this->openAPINullablesSetToNull, 'person');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('person', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($person) && (mb_strlen($person) > 10)) {
            throw new \InvalidArgumentException('invalid length for $person when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code City Postal Code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            array_push($this->openAPINullablesSetToNull, 'postal_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postal_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets prfrd_comm_medium_type
     *
     * @return string|null
     */
    public function getPrfrdCommMediumType()
    {
        return $this->container['prfrd_comm_medium_type'];
    }

    /**
     * Sets prfrd_comm_medium_type
     *
     * @param string|null $prfrd_comm_medium_type Communication Method (Key) (Business Address Services)
     *
     * @return self
     */
    public function setPrfrdCommMediumType($prfrd_comm_medium_type)
    {
        if (is_null($prfrd_comm_medium_type)) {
            array_push($this->openAPINullablesSetToNull, 'prfrd_comm_medium_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prfrd_comm_medium_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($prfrd_comm_medium_type) && (mb_strlen($prfrd_comm_medium_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $prfrd_comm_medium_type when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 3.');
        }

        $this->container['prfrd_comm_medium_type'] = $prfrd_comm_medium_type;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region (State, Province, County)
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($region) && (mb_strlen($region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $region when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 3.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_name) && (mb_strlen($street_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 60.');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_prefix_name
     *
     * @return string|null
     */
    public function getStreetPrefixName()
    {
        return $this->container['street_prefix_name'];
    }

    /**
     * Sets street_prefix_name
     *
     * @param string|null $street_prefix_name street_prefix_name
     *
     * @return self
     */
    public function setStreetPrefixName($street_prefix_name)
    {
        if (is_null($street_prefix_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_prefix_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_prefix_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_prefix_name) && (mb_strlen($street_prefix_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_prefix_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['street_prefix_name'] = $street_prefix_name;

        return $this;
    }

    /**
     * Gets street_suffix_name
     *
     * @return string|null
     */
    public function getStreetSuffixName()
    {
        return $this->container['street_suffix_name'];
    }

    /**
     * Sets street_suffix_name
     *
     * @param string|null $street_suffix_name street_suffix_name
     *
     * @return self
     */
    public function setStreetSuffixName($street_suffix_name)
    {
        if (is_null($street_suffix_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_suffix_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_suffix_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_suffix_name) && (mb_strlen($street_suffix_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['street_suffix_name'] = $street_suffix_name;

        return $this;
    }

    /**
     * Gets tax_jurisdiction
     *
     * @return string|null
     */
    public function getTaxJurisdiction()
    {
        return $this->container['tax_jurisdiction'];
    }

    /**
     * Sets tax_jurisdiction
     *
     * @param string|null $tax_jurisdiction tax_jurisdiction
     *
     * @return self
     */
    public function setTaxJurisdiction($tax_jurisdiction)
    {
        if (is_null($tax_jurisdiction)) {
            array_push($this->openAPINullablesSetToNull, 'tax_jurisdiction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_jurisdiction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_jurisdiction) && (mb_strlen($tax_jurisdiction) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_jurisdiction when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 15.');
        }

        $this->container['tax_jurisdiction'] = $tax_jurisdiction;

        return $this;
    }

    /**
     * Gets transport_zone
     *
     * @return string|null
     */
    public function getTransportZone()
    {
        return $this->container['transport_zone'];
    }

    /**
     * Sets transport_zone
     *
     * @param string|null $transport_zone Transportation zone to or from which the goods are delivered
     *
     * @return self
     */
    public function setTransportZone($transport_zone)
    {
        if (is_null($transport_zone)) {
            array_push($this->openAPINullablesSetToNull, 'transport_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transport_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transport_zone) && (mb_strlen($transport_zone) > 10)) {
            throw new \InvalidArgumentException('invalid length for $transport_zone when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['transport_zone'] = $transport_zone;

        return $this;
    }

    /**
     * Gets address_representation_code
     *
     * @return string|null
     */
    public function getAddressRepresentationCode()
    {
        return $this->container['address_representation_code'];
    }

    /**
     * Sets address_representation_code
     *
     * @param string|null $address_representation_code Version ID for International Addresses
     *
     * @return self
     */
    public function setAddressRepresentationCode($address_representation_code)
    {
        if (is_null($address_representation_code)) {
            array_push($this->openAPINullablesSetToNull, 'address_representation_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_representation_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_representation_code) && (mb_strlen($address_representation_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $address_representation_code when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 1.');
        }

        $this->container['address_representation_code'] = $address_representation_code;

        return $this;
    }

    /**
     * Gets contact_person_building
     *
     * @return string|null
     */
    public function getContactPersonBuilding()
    {
        return $this->container['contact_person_building'];
    }

    /**
     * Sets contact_person_building
     *
     * @param string|null $contact_person_building Building (number or code)
     *
     * @return self
     */
    public function setContactPersonBuilding($contact_person_building)
    {
        if (is_null($contact_person_building)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_building');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_building', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_building) && (mb_strlen($contact_person_building) > 10)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_building when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['contact_person_building'] = $contact_person_building;

        return $this;
    }

    /**
     * Gets contact_person_prfrd_comm_medium
     *
     * @return string|null
     */
    public function getContactPersonPrfrdCommMedium()
    {
        return $this->container['contact_person_prfrd_comm_medium'];
    }

    /**
     * Sets contact_person_prfrd_comm_medium
     *
     * @param string|null $contact_person_prfrd_comm_medium Communication Method (Key) (Business Address Services)
     *
     * @return self
     */
    public function setContactPersonPrfrdCommMedium($contact_person_prfrd_comm_medium)
    {
        if (is_null($contact_person_prfrd_comm_medium)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_prfrd_comm_medium');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_prfrd_comm_medium', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_prfrd_comm_medium) && (mb_strlen($contact_person_prfrd_comm_medium) > 3)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_prfrd_comm_medium when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 3.');
        }

        $this->container['contact_person_prfrd_comm_medium'] = $contact_person_prfrd_comm_medium;

        return $this;
    }

    /**
     * Gets contact_relationship_department
     *
     * @return string|null
     */
    public function getContactRelationshipDepartment()
    {
        return $this->container['contact_relationship_department'];
    }

    /**
     * Sets contact_relationship_department
     *
     * @param string|null $contact_relationship_department contact_relationship_department
     *
     * @return self
     */
    public function setContactRelationshipDepartment($contact_relationship_department)
    {
        if (is_null($contact_relationship_department)) {
            array_push($this->openAPINullablesSetToNull, 'contact_relationship_department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_relationship_department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_relationship_department) && (mb_strlen($contact_relationship_department) > 40)) {
            throw new \InvalidArgumentException('invalid length for $contact_relationship_department when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['contact_relationship_department'] = $contact_relationship_department;

        return $this;
    }

    /**
     * Gets contact_relationship_function
     *
     * @return string|null
     */
    public function getContactRelationshipFunction()
    {
        return $this->container['contact_relationship_function'];
    }

    /**
     * Sets contact_relationship_function
     *
     * @param string|null $contact_relationship_function contact_relationship_function
     *
     * @return self
     */
    public function setContactRelationshipFunction($contact_relationship_function)
    {
        if (is_null($contact_relationship_function)) {
            array_push($this->openAPINullablesSetToNull, 'contact_relationship_function');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_relationship_function', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_relationship_function) && (mb_strlen($contact_relationship_function) > 40)) {
            throw new \InvalidArgumentException('invalid length for $contact_relationship_function when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 40.');
        }

        $this->container['contact_relationship_function'] = $contact_relationship_function;

        return $this;
    }

    /**
     * Gets correspondence_short_name
     *
     * @return string|null
     */
    public function getCorrespondenceShortName()
    {
        return $this->container['correspondence_short_name'];
    }

    /**
     * Sets correspondence_short_name
     *
     * @param string|null $correspondence_short_name Short name for correspondence
     *
     * @return self
     */
    public function setCorrespondenceShortName($correspondence_short_name)
    {
        if (is_null($correspondence_short_name)) {
            array_push($this->openAPINullablesSetToNull, 'correspondence_short_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correspondence_short_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($correspondence_short_name) && (mb_strlen($correspondence_short_name) > 10)) {
            throw new \InvalidArgumentException('invalid length for $correspondence_short_name when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['correspondence_short_name'] = $correspondence_short_name;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return string|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param string|null $floor Floor in building
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (is_null($floor)) {
            array_push($this->openAPINullablesSetToNull, 'floor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($floor) && (mb_strlen($floor) > 10)) {
            throw new \InvalidArgumentException('invalid length for $floor when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets inhouse_mail
     *
     * @return string|null
     */
    public function getInhouseMail()
    {
        return $this->container['inhouse_mail'];
    }

    /**
     * Sets inhouse_mail
     *
     * @param string|null $inhouse_mail Internal Mail Postal Code
     *
     * @return self
     */
    public function setInhouseMail($inhouse_mail)
    {
        if (is_null($inhouse_mail)) {
            array_push($this->openAPINullablesSetToNull, 'inhouse_mail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inhouse_mail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inhouse_mail) && (mb_strlen($inhouse_mail) > 10)) {
            throw new \InvalidArgumentException('invalid length for $inhouse_mail when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['inhouse_mail'] = $inhouse_mail;

        return $this;
    }

    /**
     * Gets is_default_address
     *
     * @return bool|null
     */
    public function getIsDefaultAddress()
    {
        return $this->container['is_default_address'];
    }

    /**
     * Sets is_default_address
     *
     * @param bool|null $is_default_address Indicator: Address is standard address
     *
     * @return self
     */
    public function setIsDefaultAddress($is_default_address)
    {
        if (is_null($is_default_address)) {
            array_push($this->openAPINullablesSetToNull, 'is_default_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_default_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_default_address'] = $is_default_address;

        return $this;
    }

    /**
     * Gets room_number
     *
     * @return string|null
     */
    public function getRoomNumber()
    {
        return $this->container['room_number'];
    }

    /**
     * Sets room_number
     *
     * @param string|null $room_number Room or Apartment Number
     *
     * @return self
     */
    public function setRoomNumber($room_number)
    {
        if (is_null($room_number)) {
            array_push($this->openAPINullablesSetToNull, 'room_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($room_number) && (mb_strlen($room_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $room_number when calling APIBUSINESSPARTNERABPContactToAddressType., must be smaller than or equal to 10.');
        }

        $this->container['room_number'] = $room_number;

        return $this;
    }

    /**
     * Gets to_email_address
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToEmailAddress|null
     */
    public function getToEmailAddress()
    {
        return $this->container['to_email_address'];
    }

    /**
     * Sets to_email_address
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToEmailAddress|null $to_email_address to_email_address
     *
     * @return self
     */
    public function setToEmailAddress($to_email_address)
    {
        if (is_null($to_email_address)) {
            throw new \InvalidArgumentException('non-nullable to_email_address cannot be null');
        }
        $this->container['to_email_address'] = $to_email_address;

        return $this;
    }

    /**
     * Gets to_fax_number
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToFaxNumber|null
     */
    public function getToFaxNumber()
    {
        return $this->container['to_fax_number'];
    }

    /**
     * Sets to_fax_number
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToFaxNumber|null $to_fax_number to_fax_number
     *
     * @return self
     */
    public function setToFaxNumber($to_fax_number)
    {
        if (is_null($to_fax_number)) {
            throw new \InvalidArgumentException('non-nullable to_fax_number cannot be null');
        }
        $this->container['to_fax_number'] = $to_fax_number;

        return $this;
    }

    /**
     * Gets to_mobile_phone_number
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToMobilePhoneNumber|null
     */
    public function getToMobilePhoneNumber()
    {
        return $this->container['to_mobile_phone_number'];
    }

    /**
     * Sets to_mobile_phone_number
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToMobilePhoneNumber|null $to_mobile_phone_number to_mobile_phone_number
     *
     * @return self
     */
    public function setToMobilePhoneNumber($to_mobile_phone_number)
    {
        if (is_null($to_mobile_phone_number)) {
            throw new \InvalidArgumentException('non-nullable to_mobile_phone_number cannot be null');
        }
        $this->container['to_mobile_phone_number'] = $to_mobile_phone_number;

        return $this;
    }

    /**
     * Gets to_phone_number
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToMobilePhoneNumber|null
     */
    public function getToPhoneNumber()
    {
        return $this->container['to_phone_number'];
    }

    /**
     * Sets to_phone_number
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToMobilePhoneNumber|null $to_phone_number to_phone_number
     *
     * @return self
     */
    public function setToPhoneNumber($to_phone_number)
    {
        if (is_null($to_phone_number)) {
            throw new \InvalidArgumentException('non-nullable to_phone_number cannot be null');
        }
        $this->container['to_phone_number'] = $to_phone_number;

        return $this;
    }

    /**
     * Gets to_url_address
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToURLAddress|null
     */
    public function getToUrlAddress()
    {
        return $this->container['to_url_address'];
    }

    /**
     * Sets to_url_address
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERABPContactToAddressTypeToURLAddress|null $to_url_address to_url_address
     *
     * @return self
     */
    public function setToUrlAddress($to_url_address)
    {
        if (is_null($to_url_address)) {
            throw new \InvalidArgumentException('non-nullable to_url_address cannot be null');
        }
        $this->container['to_url_address'] = $to_url_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


