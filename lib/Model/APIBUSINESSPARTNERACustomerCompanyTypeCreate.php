<?php
/**
 * APIBUSINESSPARTNERACustomerCompanyTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERACustomerCompanyTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERACustomerCompanyTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_CustomerCompanyType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer' => 'string',
        'company_code' => 'string',
        'apar_tolerance_group' => 'string',
        'account_by_customer' => 'string',
        'accounting_clerk' => 'string',
        'accounting_clerk_fax_number' => 'string',
        'accounting_clerk_internet_address' => 'string',
        'accounting_clerk_phone_number' => 'string',
        'alternative_payer_account' => 'string',
        'authorization_group' => 'string',
        'collective_invoice_variant' => 'string',
        'customer_account_note' => 'string',
        'customer_head_office' => 'string',
        'customer_supplier_clearing_is_used' => 'bool',
        'house_bank' => 'string',
        'interest_calculation_code' => 'string',
        'interest_calculation_date' => 'string',
        'intrst_calc_frequency_in_months' => 'string',
        'is_to_be_locally_processed' => 'bool',
        'item_is_to_be_paid_separately' => 'bool',
        'layout_sorting_rule' => 'string',
        'payment_blocking_reason' => 'string',
        'payment_methods_list' => 'string',
        'payment_reason' => 'string',
        'payment_terms' => 'string',
        'payt_advice_is_sentby_edi' => 'bool',
        'physical_inventory_block_ind' => 'bool',
        'reconciliation_account' => 'string',
        'record_payment_history_indicator' => 'bool',
        'user_at_customer' => 'string',
        'deletion_indicator' => 'bool',
        'cash_planning_group' => 'string',
        'known_or_negotiated_leave' => 'string',
        'value_adjustment_key' => 'string',
        'customer_account_group' => 'string',
        'to_company_text' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToCompanyText',
        'to_customer_dunning' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToCustomerDunning',
        'to_with_holding_tax' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToWithHoldingTax'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer' => null,
        'company_code' => null,
        'apar_tolerance_group' => null,
        'account_by_customer' => null,
        'accounting_clerk' => null,
        'accounting_clerk_fax_number' => null,
        'accounting_clerk_internet_address' => null,
        'accounting_clerk_phone_number' => null,
        'alternative_payer_account' => null,
        'authorization_group' => null,
        'collective_invoice_variant' => null,
        'customer_account_note' => null,
        'customer_head_office' => null,
        'customer_supplier_clearing_is_used' => null,
        'house_bank' => null,
        'interest_calculation_code' => null,
        'interest_calculation_date' => null,
        'intrst_calc_frequency_in_months' => null,
        'is_to_be_locally_processed' => null,
        'item_is_to_be_paid_separately' => null,
        'layout_sorting_rule' => null,
        'payment_blocking_reason' => null,
        'payment_methods_list' => null,
        'payment_reason' => null,
        'payment_terms' => null,
        'payt_advice_is_sentby_edi' => null,
        'physical_inventory_block_ind' => null,
        'reconciliation_account' => null,
        'record_payment_history_indicator' => null,
        'user_at_customer' => null,
        'deletion_indicator' => null,
        'cash_planning_group' => null,
        'known_or_negotiated_leave' => null,
        'value_adjustment_key' => null,
        'customer_account_group' => null,
        'to_company_text' => null,
        'to_customer_dunning' => null,
        'to_with_holding_tax' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer' => false,
		'company_code' => false,
		'apar_tolerance_group' => true,
		'account_by_customer' => true,
		'accounting_clerk' => true,
		'accounting_clerk_fax_number' => true,
		'accounting_clerk_internet_address' => true,
		'accounting_clerk_phone_number' => true,
		'alternative_payer_account' => true,
		'authorization_group' => true,
		'collective_invoice_variant' => true,
		'customer_account_note' => true,
		'customer_head_office' => true,
		'customer_supplier_clearing_is_used' => true,
		'house_bank' => true,
		'interest_calculation_code' => true,
		'interest_calculation_date' => true,
		'intrst_calc_frequency_in_months' => true,
		'is_to_be_locally_processed' => true,
		'item_is_to_be_paid_separately' => true,
		'layout_sorting_rule' => true,
		'payment_blocking_reason' => true,
		'payment_methods_list' => true,
		'payment_reason' => true,
		'payment_terms' => true,
		'payt_advice_is_sentby_edi' => true,
		'physical_inventory_block_ind' => true,
		'reconciliation_account' => true,
		'record_payment_history_indicator' => true,
		'user_at_customer' => true,
		'deletion_indicator' => true,
		'cash_planning_group' => true,
		'known_or_negotiated_leave' => true,
		'value_adjustment_key' => true,
		'customer_account_group' => true,
		'to_company_text' => false,
		'to_customer_dunning' => false,
		'to_with_holding_tax' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer' => 'Customer',
        'company_code' => 'CompanyCode',
        'apar_tolerance_group' => 'APARToleranceGroup',
        'account_by_customer' => 'AccountByCustomer',
        'accounting_clerk' => 'AccountingClerk',
        'accounting_clerk_fax_number' => 'AccountingClerkFaxNumber',
        'accounting_clerk_internet_address' => 'AccountingClerkInternetAddress',
        'accounting_clerk_phone_number' => 'AccountingClerkPhoneNumber',
        'alternative_payer_account' => 'AlternativePayerAccount',
        'authorization_group' => 'AuthorizationGroup',
        'collective_invoice_variant' => 'CollectiveInvoiceVariant',
        'customer_account_note' => 'CustomerAccountNote',
        'customer_head_office' => 'CustomerHeadOffice',
        'customer_supplier_clearing_is_used' => 'CustomerSupplierClearingIsUsed',
        'house_bank' => 'HouseBank',
        'interest_calculation_code' => 'InterestCalculationCode',
        'interest_calculation_date' => 'InterestCalculationDate',
        'intrst_calc_frequency_in_months' => 'IntrstCalcFrequencyInMonths',
        'is_to_be_locally_processed' => 'IsToBeLocallyProcessed',
        'item_is_to_be_paid_separately' => 'ItemIsToBePaidSeparately',
        'layout_sorting_rule' => 'LayoutSortingRule',
        'payment_blocking_reason' => 'PaymentBlockingReason',
        'payment_methods_list' => 'PaymentMethodsList',
        'payment_reason' => 'PaymentReason',
        'payment_terms' => 'PaymentTerms',
        'payt_advice_is_sentby_edi' => 'PaytAdviceIsSentbyEDI',
        'physical_inventory_block_ind' => 'PhysicalInventoryBlockInd',
        'reconciliation_account' => 'ReconciliationAccount',
        'record_payment_history_indicator' => 'RecordPaymentHistoryIndicator',
        'user_at_customer' => 'UserAtCustomer',
        'deletion_indicator' => 'DeletionIndicator',
        'cash_planning_group' => 'CashPlanningGroup',
        'known_or_negotiated_leave' => 'KnownOrNegotiatedLeave',
        'value_adjustment_key' => 'ValueAdjustmentKey',
        'customer_account_group' => 'CustomerAccountGroup',
        'to_company_text' => 'to_CompanyText',
        'to_customer_dunning' => 'to_CustomerDunning',
        'to_with_holding_tax' => 'to_WithHoldingTax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer' => 'setCustomer',
        'company_code' => 'setCompanyCode',
        'apar_tolerance_group' => 'setAparToleranceGroup',
        'account_by_customer' => 'setAccountByCustomer',
        'accounting_clerk' => 'setAccountingClerk',
        'accounting_clerk_fax_number' => 'setAccountingClerkFaxNumber',
        'accounting_clerk_internet_address' => 'setAccountingClerkInternetAddress',
        'accounting_clerk_phone_number' => 'setAccountingClerkPhoneNumber',
        'alternative_payer_account' => 'setAlternativePayerAccount',
        'authorization_group' => 'setAuthorizationGroup',
        'collective_invoice_variant' => 'setCollectiveInvoiceVariant',
        'customer_account_note' => 'setCustomerAccountNote',
        'customer_head_office' => 'setCustomerHeadOffice',
        'customer_supplier_clearing_is_used' => 'setCustomerSupplierClearingIsUsed',
        'house_bank' => 'setHouseBank',
        'interest_calculation_code' => 'setInterestCalculationCode',
        'interest_calculation_date' => 'setInterestCalculationDate',
        'intrst_calc_frequency_in_months' => 'setIntrstCalcFrequencyInMonths',
        'is_to_be_locally_processed' => 'setIsToBeLocallyProcessed',
        'item_is_to_be_paid_separately' => 'setItemIsToBePaidSeparately',
        'layout_sorting_rule' => 'setLayoutSortingRule',
        'payment_blocking_reason' => 'setPaymentBlockingReason',
        'payment_methods_list' => 'setPaymentMethodsList',
        'payment_reason' => 'setPaymentReason',
        'payment_terms' => 'setPaymentTerms',
        'payt_advice_is_sentby_edi' => 'setPaytAdviceIsSentbyEdi',
        'physical_inventory_block_ind' => 'setPhysicalInventoryBlockInd',
        'reconciliation_account' => 'setReconciliationAccount',
        'record_payment_history_indicator' => 'setRecordPaymentHistoryIndicator',
        'user_at_customer' => 'setUserAtCustomer',
        'deletion_indicator' => 'setDeletionIndicator',
        'cash_planning_group' => 'setCashPlanningGroup',
        'known_or_negotiated_leave' => 'setKnownOrNegotiatedLeave',
        'value_adjustment_key' => 'setValueAdjustmentKey',
        'customer_account_group' => 'setCustomerAccountGroup',
        'to_company_text' => 'setToCompanyText',
        'to_customer_dunning' => 'setToCustomerDunning',
        'to_with_holding_tax' => 'setToWithHoldingTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer' => 'getCustomer',
        'company_code' => 'getCompanyCode',
        'apar_tolerance_group' => 'getAparToleranceGroup',
        'account_by_customer' => 'getAccountByCustomer',
        'accounting_clerk' => 'getAccountingClerk',
        'accounting_clerk_fax_number' => 'getAccountingClerkFaxNumber',
        'accounting_clerk_internet_address' => 'getAccountingClerkInternetAddress',
        'accounting_clerk_phone_number' => 'getAccountingClerkPhoneNumber',
        'alternative_payer_account' => 'getAlternativePayerAccount',
        'authorization_group' => 'getAuthorizationGroup',
        'collective_invoice_variant' => 'getCollectiveInvoiceVariant',
        'customer_account_note' => 'getCustomerAccountNote',
        'customer_head_office' => 'getCustomerHeadOffice',
        'customer_supplier_clearing_is_used' => 'getCustomerSupplierClearingIsUsed',
        'house_bank' => 'getHouseBank',
        'interest_calculation_code' => 'getInterestCalculationCode',
        'interest_calculation_date' => 'getInterestCalculationDate',
        'intrst_calc_frequency_in_months' => 'getIntrstCalcFrequencyInMonths',
        'is_to_be_locally_processed' => 'getIsToBeLocallyProcessed',
        'item_is_to_be_paid_separately' => 'getItemIsToBePaidSeparately',
        'layout_sorting_rule' => 'getLayoutSortingRule',
        'payment_blocking_reason' => 'getPaymentBlockingReason',
        'payment_methods_list' => 'getPaymentMethodsList',
        'payment_reason' => 'getPaymentReason',
        'payment_terms' => 'getPaymentTerms',
        'payt_advice_is_sentby_edi' => 'getPaytAdviceIsSentbyEdi',
        'physical_inventory_block_ind' => 'getPhysicalInventoryBlockInd',
        'reconciliation_account' => 'getReconciliationAccount',
        'record_payment_history_indicator' => 'getRecordPaymentHistoryIndicator',
        'user_at_customer' => 'getUserAtCustomer',
        'deletion_indicator' => 'getDeletionIndicator',
        'cash_planning_group' => 'getCashPlanningGroup',
        'known_or_negotiated_leave' => 'getKnownOrNegotiatedLeave',
        'value_adjustment_key' => 'getValueAdjustmentKey',
        'customer_account_group' => 'getCustomerAccountGroup',
        'to_company_text' => 'getToCompanyText',
        'to_customer_dunning' => 'getToCustomerDunning',
        'to_with_holding_tax' => 'getToWithHoldingTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('company_code', $data ?? [], null);
        $this->setIfExists('apar_tolerance_group', $data ?? [], null);
        $this->setIfExists('account_by_customer', $data ?? [], null);
        $this->setIfExists('accounting_clerk', $data ?? [], null);
        $this->setIfExists('accounting_clerk_fax_number', $data ?? [], null);
        $this->setIfExists('accounting_clerk_internet_address', $data ?? [], null);
        $this->setIfExists('accounting_clerk_phone_number', $data ?? [], null);
        $this->setIfExists('alternative_payer_account', $data ?? [], null);
        $this->setIfExists('authorization_group', $data ?? [], null);
        $this->setIfExists('collective_invoice_variant', $data ?? [], null);
        $this->setIfExists('customer_account_note', $data ?? [], null);
        $this->setIfExists('customer_head_office', $data ?? [], null);
        $this->setIfExists('customer_supplier_clearing_is_used', $data ?? [], null);
        $this->setIfExists('house_bank', $data ?? [], null);
        $this->setIfExists('interest_calculation_code', $data ?? [], null);
        $this->setIfExists('interest_calculation_date', $data ?? [], null);
        $this->setIfExists('intrst_calc_frequency_in_months', $data ?? [], null);
        $this->setIfExists('is_to_be_locally_processed', $data ?? [], null);
        $this->setIfExists('item_is_to_be_paid_separately', $data ?? [], null);
        $this->setIfExists('layout_sorting_rule', $data ?? [], null);
        $this->setIfExists('payment_blocking_reason', $data ?? [], null);
        $this->setIfExists('payment_methods_list', $data ?? [], null);
        $this->setIfExists('payment_reason', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('payt_advice_is_sentby_edi', $data ?? [], null);
        $this->setIfExists('physical_inventory_block_ind', $data ?? [], null);
        $this->setIfExists('reconciliation_account', $data ?? [], null);
        $this->setIfExists('record_payment_history_indicator', $data ?? [], null);
        $this->setIfExists('user_at_customer', $data ?? [], null);
        $this->setIfExists('deletion_indicator', $data ?? [], null);
        $this->setIfExists('cash_planning_group', $data ?? [], null);
        $this->setIfExists('known_or_negotiated_leave', $data ?? [], null);
        $this->setIfExists('value_adjustment_key', $data ?? [], null);
        $this->setIfExists('customer_account_group', $data ?? [], null);
        $this->setIfExists('to_company_text', $data ?? [], null);
        $this->setIfExists('to_customer_dunning', $data ?? [], null);
        $this->setIfExists('to_with_holding_tax', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ((mb_strlen($this->container['customer']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['company_code'] === null) {
            $invalidProperties[] = "'company_code' can't be null";
        }
        if ((mb_strlen($this->container['company_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['apar_tolerance_group']) && (mb_strlen($this->container['apar_tolerance_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'apar_tolerance_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['account_by_customer']) && (mb_strlen($this->container['account_by_customer']) > 12)) {
            $invalidProperties[] = "invalid value for 'account_by_customer', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['accounting_clerk']) && (mb_strlen($this->container['accounting_clerk']) > 2)) {
            $invalidProperties[] = "invalid value for 'accounting_clerk', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['accounting_clerk_fax_number']) && (mb_strlen($this->container['accounting_clerk_fax_number']) > 31)) {
            $invalidProperties[] = "invalid value for 'accounting_clerk_fax_number', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['accounting_clerk_internet_address']) && (mb_strlen($this->container['accounting_clerk_internet_address']) > 130)) {
            $invalidProperties[] = "invalid value for 'accounting_clerk_internet_address', the character length must be smaller than or equal to 130.";
        }

        if (!is_null($this->container['accounting_clerk_phone_number']) && (mb_strlen($this->container['accounting_clerk_phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'accounting_clerk_phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['alternative_payer_account']) && (mb_strlen($this->container['alternative_payer_account']) > 10)) {
            $invalidProperties[] = "invalid value for 'alternative_payer_account', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['authorization_group']) && (mb_strlen($this->container['authorization_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'authorization_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['collective_invoice_variant']) && (mb_strlen($this->container['collective_invoice_variant']) > 1)) {
            $invalidProperties[] = "invalid value for 'collective_invoice_variant', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_account_note']) && (mb_strlen($this->container['customer_account_note']) > 30)) {
            $invalidProperties[] = "invalid value for 'customer_account_note', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['customer_head_office']) && (mb_strlen($this->container['customer_head_office']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer_head_office', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['house_bank']) && (mb_strlen($this->container['house_bank']) > 5)) {
            $invalidProperties[] = "invalid value for 'house_bank', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['interest_calculation_code']) && (mb_strlen($this->container['interest_calculation_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'interest_calculation_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['intrst_calc_frequency_in_months']) && (mb_strlen($this->container['intrst_calc_frequency_in_months']) > 2)) {
            $invalidProperties[] = "invalid value for 'intrst_calc_frequency_in_months', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['layout_sorting_rule']) && (mb_strlen($this->container['layout_sorting_rule']) > 3)) {
            $invalidProperties[] = "invalid value for 'layout_sorting_rule', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['payment_blocking_reason']) && (mb_strlen($this->container['payment_blocking_reason']) > 1)) {
            $invalidProperties[] = "invalid value for 'payment_blocking_reason', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['payment_methods_list']) && (mb_strlen($this->container['payment_methods_list']) > 10)) {
            $invalidProperties[] = "invalid value for 'payment_methods_list', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['payment_reason']) && (mb_strlen($this->container['payment_reason']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_reason', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['payment_terms']) && (mb_strlen($this->container['payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['reconciliation_account']) && (mb_strlen($this->container['reconciliation_account']) > 10)) {
            $invalidProperties[] = "invalid value for 'reconciliation_account', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['user_at_customer']) && (mb_strlen($this->container['user_at_customer']) > 15)) {
            $invalidProperties[] = "invalid value for 'user_at_customer', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['cash_planning_group']) && (mb_strlen($this->container['cash_planning_group']) > 10)) {
            $invalidProperties[] = "invalid value for 'cash_planning_group', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['known_or_negotiated_leave']) && (mb_strlen($this->container['known_or_negotiated_leave']) > 4)) {
            $invalidProperties[] = "invalid value for 'known_or_negotiated_leave', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['value_adjustment_key']) && (mb_strlen($this->container['value_adjustment_key']) > 2)) {
            $invalidProperties[] = "invalid value for 'value_adjustment_key', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_account_group']) && (mb_strlen($this->container['customer_account_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_account_group', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer Number
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        if ((mb_strlen($customer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string $company_code company_code
     *
     * @return self
     */
    public function setCompanyCode($company_code)
    {
        if (is_null($company_code)) {
            throw new \InvalidArgumentException('non-nullable company_code cannot be null');
        }
        if ((mb_strlen($company_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets apar_tolerance_group
     *
     * @return string|null
     */
    public function getAparToleranceGroup()
    {
        return $this->container['apar_tolerance_group'];
    }

    /**
     * Sets apar_tolerance_group
     *
     * @param string|null $apar_tolerance_group Tolerance Group for Business Partner/G/L Account
     *
     * @return self
     */
    public function setAparToleranceGroup($apar_tolerance_group)
    {
        if (is_null($apar_tolerance_group)) {
            array_push($this->openAPINullablesSetToNull, 'apar_tolerance_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apar_tolerance_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($apar_tolerance_group) && (mb_strlen($apar_tolerance_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $apar_tolerance_group when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['apar_tolerance_group'] = $apar_tolerance_group;

        return $this;
    }

    /**
     * Gets account_by_customer
     *
     * @return string|null
     */
    public function getAccountByCustomer()
    {
        return $this->container['account_by_customer'];
    }

    /**
     * Sets account_by_customer
     *
     * @param string|null $account_by_customer Our Account Number at Customer
     *
     * @return self
     */
    public function setAccountByCustomer($account_by_customer)
    {
        if (is_null($account_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'account_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($account_by_customer) && (mb_strlen($account_by_customer) > 12)) {
            throw new \InvalidArgumentException('invalid length for $account_by_customer when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 12.');
        }

        $this->container['account_by_customer'] = $account_by_customer;

        return $this;
    }

    /**
     * Gets accounting_clerk
     *
     * @return string|null
     */
    public function getAccountingClerk()
    {
        return $this->container['accounting_clerk'];
    }

    /**
     * Sets accounting_clerk
     *
     * @param string|null $accounting_clerk Accounting Clerk Abbreviation
     *
     * @return self
     */
    public function setAccountingClerk($accounting_clerk)
    {
        if (is_null($accounting_clerk)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_clerk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_clerk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_clerk) && (mb_strlen($accounting_clerk) > 2)) {
            throw new \InvalidArgumentException('invalid length for $accounting_clerk when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['accounting_clerk'] = $accounting_clerk;

        return $this;
    }

    /**
     * Gets accounting_clerk_fax_number
     *
     * @return string|null
     */
    public function getAccountingClerkFaxNumber()
    {
        return $this->container['accounting_clerk_fax_number'];
    }

    /**
     * Sets accounting_clerk_fax_number
     *
     * @param string|null $accounting_clerk_fax_number Accounting clerk's fax number at the customer/vendor
     *
     * @return self
     */
    public function setAccountingClerkFaxNumber($accounting_clerk_fax_number)
    {
        if (is_null($accounting_clerk_fax_number)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_clerk_fax_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_clerk_fax_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_clerk_fax_number) && (mb_strlen($accounting_clerk_fax_number) > 31)) {
            throw new \InvalidArgumentException('invalid length for $accounting_clerk_fax_number when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 31.');
        }

        $this->container['accounting_clerk_fax_number'] = $accounting_clerk_fax_number;

        return $this;
    }

    /**
     * Gets accounting_clerk_internet_address
     *
     * @return string|null
     */
    public function getAccountingClerkInternetAddress()
    {
        return $this->container['accounting_clerk_internet_address'];
    }

    /**
     * Sets accounting_clerk_internet_address
     *
     * @param string|null $accounting_clerk_internet_address Internet address of partner company clerk
     *
     * @return self
     */
    public function setAccountingClerkInternetAddress($accounting_clerk_internet_address)
    {
        if (is_null($accounting_clerk_internet_address)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_clerk_internet_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_clerk_internet_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_clerk_internet_address) && (mb_strlen($accounting_clerk_internet_address) > 130)) {
            throw new \InvalidArgumentException('invalid length for $accounting_clerk_internet_address when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 130.');
        }

        $this->container['accounting_clerk_internet_address'] = $accounting_clerk_internet_address;

        return $this;
    }

    /**
     * Gets accounting_clerk_phone_number
     *
     * @return string|null
     */
    public function getAccountingClerkPhoneNumber()
    {
        return $this->container['accounting_clerk_phone_number'];
    }

    /**
     * Sets accounting_clerk_phone_number
     *
     * @param string|null $accounting_clerk_phone_number Accounting clerk's telephone number at business partner
     *
     * @return self
     */
    public function setAccountingClerkPhoneNumber($accounting_clerk_phone_number)
    {
        if (is_null($accounting_clerk_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_clerk_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_clerk_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_clerk_phone_number) && (mb_strlen($accounting_clerk_phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $accounting_clerk_phone_number when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 30.');
        }

        $this->container['accounting_clerk_phone_number'] = $accounting_clerk_phone_number;

        return $this;
    }

    /**
     * Gets alternative_payer_account
     *
     * @return string|null
     */
    public function getAlternativePayerAccount()
    {
        return $this->container['alternative_payer_account'];
    }

    /**
     * Sets alternative_payer_account
     *
     * @param string|null $alternative_payer_account Account number of an alternative payer
     *
     * @return self
     */
    public function setAlternativePayerAccount($alternative_payer_account)
    {
        if (is_null($alternative_payer_account)) {
            array_push($this->openAPINullablesSetToNull, 'alternative_payer_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alternative_payer_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($alternative_payer_account) && (mb_strlen($alternative_payer_account) > 10)) {
            throw new \InvalidArgumentException('invalid length for $alternative_payer_account when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['alternative_payer_account'] = $alternative_payer_account;

        return $this;
    }

    /**
     * Gets authorization_group
     *
     * @return string|null
     */
    public function getAuthorizationGroup()
    {
        return $this->container['authorization_group'];
    }

    /**
     * Sets authorization_group
     *
     * @param string|null $authorization_group Authorization Group
     *
     * @return self
     */
    public function setAuthorizationGroup($authorization_group)
    {
        if (is_null($authorization_group)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_group) && (mb_strlen($authorization_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $authorization_group when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['authorization_group'] = $authorization_group;

        return $this;
    }

    /**
     * Gets collective_invoice_variant
     *
     * @return string|null
     */
    public function getCollectiveInvoiceVariant()
    {
        return $this->container['collective_invoice_variant'];
    }

    /**
     * Sets collective_invoice_variant
     *
     * @param string|null $collective_invoice_variant Collective Invoice Variant
     *
     * @return self
     */
    public function setCollectiveInvoiceVariant($collective_invoice_variant)
    {
        if (is_null($collective_invoice_variant)) {
            array_push($this->openAPINullablesSetToNull, 'collective_invoice_variant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('collective_invoice_variant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($collective_invoice_variant) && (mb_strlen($collective_invoice_variant) > 1)) {
            throw new \InvalidArgumentException('invalid length for $collective_invoice_variant when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['collective_invoice_variant'] = $collective_invoice_variant;

        return $this;
    }

    /**
     * Gets customer_account_note
     *
     * @return string|null
     */
    public function getCustomerAccountNote()
    {
        return $this->container['customer_account_note'];
    }

    /**
     * Sets customer_account_note
     *
     * @param string|null $customer_account_note Memo
     *
     * @return self
     */
    public function setCustomerAccountNote($customer_account_note)
    {
        if (is_null($customer_account_note)) {
            array_push($this->openAPINullablesSetToNull, 'customer_account_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_account_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_account_note) && (mb_strlen($customer_account_note) > 30)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_note when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 30.');
        }

        $this->container['customer_account_note'] = $customer_account_note;

        return $this;
    }

    /**
     * Gets customer_head_office
     *
     * @return string|null
     */
    public function getCustomerHeadOffice()
    {
        return $this->container['customer_head_office'];
    }

    /**
     * Sets customer_head_office
     *
     * @param string|null $customer_head_office Head Office Account Number (in branch accounts)
     *
     * @return self
     */
    public function setCustomerHeadOffice($customer_head_office)
    {
        if (is_null($customer_head_office)) {
            array_push($this->openAPINullablesSetToNull, 'customer_head_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_head_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_head_office) && (mb_strlen($customer_head_office) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer_head_office when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['customer_head_office'] = $customer_head_office;

        return $this;
    }

    /**
     * Gets customer_supplier_clearing_is_used
     *
     * @return bool|null
     */
    public function getCustomerSupplierClearingIsUsed()
    {
        return $this->container['customer_supplier_clearing_is_used'];
    }

    /**
     * Sets customer_supplier_clearing_is_used
     *
     * @param bool|null $customer_supplier_clearing_is_used Indicator: Clearing between customer and vendor ?
     *
     * @return self
     */
    public function setCustomerSupplierClearingIsUsed($customer_supplier_clearing_is_used)
    {
        if (is_null($customer_supplier_clearing_is_used)) {
            array_push($this->openAPINullablesSetToNull, 'customer_supplier_clearing_is_used');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_supplier_clearing_is_used', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_supplier_clearing_is_used'] = $customer_supplier_clearing_is_used;

        return $this;
    }

    /**
     * Gets house_bank
     *
     * @return string|null
     */
    public function getHouseBank()
    {
        return $this->container['house_bank'];
    }

    /**
     * Sets house_bank
     *
     * @param string|null $house_bank Short Key for a House Bank
     *
     * @return self
     */
    public function setHouseBank($house_bank)
    {
        if (is_null($house_bank)) {
            array_push($this->openAPINullablesSetToNull, 'house_bank');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_bank', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_bank) && (mb_strlen($house_bank) > 5)) {
            throw new \InvalidArgumentException('invalid length for $house_bank when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 5.');
        }

        $this->container['house_bank'] = $house_bank;

        return $this;
    }

    /**
     * Gets interest_calculation_code
     *
     * @return string|null
     */
    public function getInterestCalculationCode()
    {
        return $this->container['interest_calculation_code'];
    }

    /**
     * Sets interest_calculation_code
     *
     * @param string|null $interest_calculation_code interest_calculation_code
     *
     * @return self
     */
    public function setInterestCalculationCode($interest_calculation_code)
    {
        if (is_null($interest_calculation_code)) {
            array_push($this->openAPINullablesSetToNull, 'interest_calculation_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interest_calculation_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($interest_calculation_code) && (mb_strlen($interest_calculation_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $interest_calculation_code when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['interest_calculation_code'] = $interest_calculation_code;

        return $this;
    }

    /**
     * Gets interest_calculation_date
     *
     * @return string|null
     */
    public function getInterestCalculationDate()
    {
        return $this->container['interest_calculation_date'];
    }

    /**
     * Sets interest_calculation_date
     *
     * @param string|null $interest_calculation_date Key Date of Last Interest Calculation
     *
     * @return self
     */
    public function setInterestCalculationDate($interest_calculation_date)
    {
        if (is_null($interest_calculation_date)) {
            array_push($this->openAPINullablesSetToNull, 'interest_calculation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interest_calculation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interest_calculation_date'] = $interest_calculation_date;

        return $this;
    }

    /**
     * Gets intrst_calc_frequency_in_months
     *
     * @return string|null
     */
    public function getIntrstCalcFrequencyInMonths()
    {
        return $this->container['intrst_calc_frequency_in_months'];
    }

    /**
     * Sets intrst_calc_frequency_in_months
     *
     * @param string|null $intrst_calc_frequency_in_months Interest Calculation Frequency in Months
     *
     * @return self
     */
    public function setIntrstCalcFrequencyInMonths($intrst_calc_frequency_in_months)
    {
        if (is_null($intrst_calc_frequency_in_months)) {
            array_push($this->openAPINullablesSetToNull, 'intrst_calc_frequency_in_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intrst_calc_frequency_in_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($intrst_calc_frequency_in_months) && (mb_strlen($intrst_calc_frequency_in_months) > 2)) {
            throw new \InvalidArgumentException('invalid length for $intrst_calc_frequency_in_months when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['intrst_calc_frequency_in_months'] = $intrst_calc_frequency_in_months;

        return $this;
    }

    /**
     * Gets is_to_be_locally_processed
     *
     * @return bool|null
     */
    public function getIsToBeLocallyProcessed()
    {
        return $this->container['is_to_be_locally_processed'];
    }

    /**
     * Sets is_to_be_locally_processed
     *
     * @param bool|null $is_to_be_locally_processed Indicator: Local Processing?
     *
     * @return self
     */
    public function setIsToBeLocallyProcessed($is_to_be_locally_processed)
    {
        if (is_null($is_to_be_locally_processed)) {
            array_push($this->openAPINullablesSetToNull, 'is_to_be_locally_processed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_to_be_locally_processed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_to_be_locally_processed'] = $is_to_be_locally_processed;

        return $this;
    }

    /**
     * Gets item_is_to_be_paid_separately
     *
     * @return bool|null
     */
    public function getItemIsToBePaidSeparately()
    {
        return $this->container['item_is_to_be_paid_separately'];
    }

    /**
     * Sets item_is_to_be_paid_separately
     *
     * @param bool|null $item_is_to_be_paid_separately Indicator: Pay All Items Separately?
     *
     * @return self
     */
    public function setItemIsToBePaidSeparately($item_is_to_be_paid_separately)
    {
        if (is_null($item_is_to_be_paid_separately)) {
            array_push($this->openAPINullablesSetToNull, 'item_is_to_be_paid_separately');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_is_to_be_paid_separately', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_is_to_be_paid_separately'] = $item_is_to_be_paid_separately;

        return $this;
    }

    /**
     * Gets layout_sorting_rule
     *
     * @return string|null
     */
    public function getLayoutSortingRule()
    {
        return $this->container['layout_sorting_rule'];
    }

    /**
     * Sets layout_sorting_rule
     *
     * @param string|null $layout_sorting_rule Key for Sorting According to Assignment Numbers
     *
     * @return self
     */
    public function setLayoutSortingRule($layout_sorting_rule)
    {
        if (is_null($layout_sorting_rule)) {
            array_push($this->openAPINullablesSetToNull, 'layout_sorting_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('layout_sorting_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($layout_sorting_rule) && (mb_strlen($layout_sorting_rule) > 3)) {
            throw new \InvalidArgumentException('invalid length for $layout_sorting_rule when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['layout_sorting_rule'] = $layout_sorting_rule;

        return $this;
    }

    /**
     * Gets payment_blocking_reason
     *
     * @return string|null
     */
    public function getPaymentBlockingReason()
    {
        return $this->container['payment_blocking_reason'];
    }

    /**
     * Sets payment_blocking_reason
     *
     * @param string|null $payment_blocking_reason Block Key for Payment
     *
     * @return self
     */
    public function setPaymentBlockingReason($payment_blocking_reason)
    {
        if (is_null($payment_blocking_reason)) {
            array_push($this->openAPINullablesSetToNull, 'payment_blocking_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_blocking_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_blocking_reason) && (mb_strlen($payment_blocking_reason) > 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_blocking_reason when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['payment_blocking_reason'] = $payment_blocking_reason;

        return $this;
    }

    /**
     * Gets payment_methods_list
     *
     * @return string|null
     */
    public function getPaymentMethodsList()
    {
        return $this->container['payment_methods_list'];
    }

    /**
     * Sets payment_methods_list
     *
     * @param string|null $payment_methods_list List of Respected Payment Methods
     *
     * @return self
     */
    public function setPaymentMethodsList($payment_methods_list)
    {
        if (is_null($payment_methods_list)) {
            array_push($this->openAPINullablesSetToNull, 'payment_methods_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_methods_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_methods_list) && (mb_strlen($payment_methods_list) > 10)) {
            throw new \InvalidArgumentException('invalid length for $payment_methods_list when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['payment_methods_list'] = $payment_methods_list;

        return $this;
    }

    /**
     * Gets payment_reason
     *
     * @return string|null
     */
    public function getPaymentReason()
    {
        return $this->container['payment_reason'];
    }

    /**
     * Sets payment_reason
     *
     * @param string|null $payment_reason payment_reason
     *
     * @return self
     */
    public function setPaymentReason($payment_reason)
    {
        if (is_null($payment_reason)) {
            array_push($this->openAPINullablesSetToNull, 'payment_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_reason) && (mb_strlen($payment_reason) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_reason when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['payment_reason'] = $payment_reason;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string|null $payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_terms) && (mb_strlen($payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_terms when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets payt_advice_is_sentby_edi
     *
     * @return bool|null
     */
    public function getPaytAdviceIsSentbyEdi()
    {
        return $this->container['payt_advice_is_sentby_edi'];
    }

    /**
     * Sets payt_advice_is_sentby_edi
     *
     * @param bool|null $payt_advice_is_sentby_edi Indicator: Send Payment Advices by EDI
     *
     * @return self
     */
    public function setPaytAdviceIsSentbyEdi($payt_advice_is_sentby_edi)
    {
        if (is_null($payt_advice_is_sentby_edi)) {
            array_push($this->openAPINullablesSetToNull, 'payt_advice_is_sentby_edi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payt_advice_is_sentby_edi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payt_advice_is_sentby_edi'] = $payt_advice_is_sentby_edi;

        return $this;
    }

    /**
     * Gets physical_inventory_block_ind
     *
     * @return bool|null
     */
    public function getPhysicalInventoryBlockInd()
    {
        return $this->container['physical_inventory_block_ind'];
    }

    /**
     * Sets physical_inventory_block_ind
     *
     * @param bool|null $physical_inventory_block_ind Posting block for company code
     *
     * @return self
     */
    public function setPhysicalInventoryBlockInd($physical_inventory_block_ind)
    {
        if (is_null($physical_inventory_block_ind)) {
            array_push($this->openAPINullablesSetToNull, 'physical_inventory_block_ind');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('physical_inventory_block_ind', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['physical_inventory_block_ind'] = $physical_inventory_block_ind;

        return $this;
    }

    /**
     * Gets reconciliation_account
     *
     * @return string|null
     */
    public function getReconciliationAccount()
    {
        return $this->container['reconciliation_account'];
    }

    /**
     * Sets reconciliation_account
     *
     * @param string|null $reconciliation_account Reconciliation Account in General Ledger
     *
     * @return self
     */
    public function setReconciliationAccount($reconciliation_account)
    {
        if (is_null($reconciliation_account)) {
            array_push($this->openAPINullablesSetToNull, 'reconciliation_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reconciliation_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reconciliation_account) && (mb_strlen($reconciliation_account) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reconciliation_account when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['reconciliation_account'] = $reconciliation_account;

        return $this;
    }

    /**
     * Gets record_payment_history_indicator
     *
     * @return bool|null
     */
    public function getRecordPaymentHistoryIndicator()
    {
        return $this->container['record_payment_history_indicator'];
    }

    /**
     * Sets record_payment_history_indicator
     *
     * @param bool|null $record_payment_history_indicator Indicator: Record Payment History ?
     *
     * @return self
     */
    public function setRecordPaymentHistoryIndicator($record_payment_history_indicator)
    {
        if (is_null($record_payment_history_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'record_payment_history_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('record_payment_history_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['record_payment_history_indicator'] = $record_payment_history_indicator;

        return $this;
    }

    /**
     * Gets user_at_customer
     *
     * @return string|null
     */
    public function getUserAtCustomer()
    {
        return $this->container['user_at_customer'];
    }

    /**
     * Sets user_at_customer
     *
     * @param string|null $user_at_customer user_at_customer
     *
     * @return self
     */
    public function setUserAtCustomer($user_at_customer)
    {
        if (is_null($user_at_customer)) {
            array_push($this->openAPINullablesSetToNull, 'user_at_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_at_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($user_at_customer) && (mb_strlen($user_at_customer) > 15)) {
            throw new \InvalidArgumentException('invalid length for $user_at_customer when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 15.');
        }

        $this->container['user_at_customer'] = $user_at_customer;

        return $this;
    }

    /**
     * Gets deletion_indicator
     *
     * @return bool|null
     */
    public function getDeletionIndicator()
    {
        return $this->container['deletion_indicator'];
    }

    /**
     * Sets deletion_indicator
     *
     * @param bool|null $deletion_indicator Deletion Flag for Master Record (Company Code Level)
     *
     * @return self
     */
    public function setDeletionIndicator($deletion_indicator)
    {
        if (is_null($deletion_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'deletion_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletion_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletion_indicator'] = $deletion_indicator;

        return $this;
    }

    /**
     * Gets cash_planning_group
     *
     * @return string|null
     */
    public function getCashPlanningGroup()
    {
        return $this->container['cash_planning_group'];
    }

    /**
     * Sets cash_planning_group
     *
     * @param string|null $cash_planning_group cash_planning_group
     *
     * @return self
     */
    public function setCashPlanningGroup($cash_planning_group)
    {
        if (is_null($cash_planning_group)) {
            array_push($this->openAPINullablesSetToNull, 'cash_planning_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_planning_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cash_planning_group) && (mb_strlen($cash_planning_group) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cash_planning_group when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['cash_planning_group'] = $cash_planning_group;

        return $this;
    }

    /**
     * Gets known_or_negotiated_leave
     *
     * @return string|null
     */
    public function getKnownOrNegotiatedLeave()
    {
        return $this->container['known_or_negotiated_leave'];
    }

    /**
     * Sets known_or_negotiated_leave
     *
     * @param string|null $known_or_negotiated_leave Short Key for Known/Negotiated Leave
     *
     * @return self
     */
    public function setKnownOrNegotiatedLeave($known_or_negotiated_leave)
    {
        if (is_null($known_or_negotiated_leave)) {
            array_push($this->openAPINullablesSetToNull, 'known_or_negotiated_leave');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('known_or_negotiated_leave', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($known_or_negotiated_leave) && (mb_strlen($known_or_negotiated_leave) > 4)) {
            throw new \InvalidArgumentException('invalid length for $known_or_negotiated_leave when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['known_or_negotiated_leave'] = $known_or_negotiated_leave;

        return $this;
    }

    /**
     * Gets value_adjustment_key
     *
     * @return string|null
     */
    public function getValueAdjustmentKey()
    {
        return $this->container['value_adjustment_key'];
    }

    /**
     * Sets value_adjustment_key
     *
     * @param string|null $value_adjustment_key Value Adjustment Key
     *
     * @return self
     */
    public function setValueAdjustmentKey($value_adjustment_key)
    {
        if (is_null($value_adjustment_key)) {
            array_push($this->openAPINullablesSetToNull, 'value_adjustment_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value_adjustment_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($value_adjustment_key) && (mb_strlen($value_adjustment_key) > 2)) {
            throw new \InvalidArgumentException('invalid length for $value_adjustment_key when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['value_adjustment_key'] = $value_adjustment_key;

        return $this;
    }

    /**
     * Gets customer_account_group
     *
     * @return string|null
     */
    public function getCustomerAccountGroup()
    {
        return $this->container['customer_account_group'];
    }

    /**
     * Sets customer_account_group
     *
     * @param string|null $customer_account_group Customer Account Group
     *
     * @return self
     */
    public function setCustomerAccountGroup($customer_account_group)
    {
        if (is_null($customer_account_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_account_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_account_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_account_group) && (mb_strlen($customer_account_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_group when calling APIBUSINESSPARTNERACustomerCompanyTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['customer_account_group'] = $customer_account_group;

        return $this;
    }

    /**
     * Gets to_company_text
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToCompanyText|null
     */
    public function getToCompanyText()
    {
        return $this->container['to_company_text'];
    }

    /**
     * Sets to_company_text
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToCompanyText|null $to_company_text to_company_text
     *
     * @return self
     */
    public function setToCompanyText($to_company_text)
    {
        if (is_null($to_company_text)) {
            throw new \InvalidArgumentException('non-nullable to_company_text cannot be null');
        }
        $this->container['to_company_text'] = $to_company_text;

        return $this;
    }

    /**
     * Gets to_customer_dunning
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToCustomerDunning|null
     */
    public function getToCustomerDunning()
    {
        return $this->container['to_customer_dunning'];
    }

    /**
     * Sets to_customer_dunning
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToCustomerDunning|null $to_customer_dunning to_customer_dunning
     *
     * @return self
     */
    public function setToCustomerDunning($to_customer_dunning)
    {
        if (is_null($to_customer_dunning)) {
            throw new \InvalidArgumentException('non-nullable to_customer_dunning cannot be null');
        }
        $this->container['to_customer_dunning'] = $to_customer_dunning;

        return $this;
    }

    /**
     * Gets to_with_holding_tax
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToWithHoldingTax|null
     */
    public function getToWithHoldingTax()
    {
        return $this->container['to_with_holding_tax'];
    }

    /**
     * Sets to_with_holding_tax
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERACustomerCompanyTypeCreateToWithHoldingTax|null $to_with_holding_tax to_with_holding_tax
     *
     * @return self
     */
    public function setToWithHoldingTax($to_with_holding_tax)
    {
        if (is_null($to_with_holding_tax)) {
            throw new \InvalidArgumentException('non-nullable to_with_holding_tax cannot be null');
        }
        $this->container['to_with_holding_tax'] = $to_with_holding_tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


