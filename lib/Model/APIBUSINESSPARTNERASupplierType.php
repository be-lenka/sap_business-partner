<?php
/**
 * APIBUSINESSPARTNERASupplierType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERASupplierType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERASupplierType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_SupplierType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supplier' => 'string',
        'alternative_payee_account_number' => 'string',
        'authorization_group' => 'string',
        'business_partner_pan_number' => 'string',
        'created_by_user' => 'string',
        'creation_date' => 'string',
        'customer' => 'string',
        'payment_is_blocked_for_supplier' => 'bool',
        'posting_is_blocked' => 'bool',
        'purchasing_is_blocked' => 'bool',
        'supplier_account_group' => 'string',
        'supplier_full_name' => 'string',
        'supplier_name' => 'string',
        'vat_registration' => 'string',
        'birth_date' => 'string',
        'concatenated_international_loc_no' => 'string',
        'deletion_indicator' => 'bool',
        'fiscal_address' => 'string',
        'industry' => 'string',
        'international_location_number1' => 'string',
        'international_location_number2' => 'string',
        'international_location_number3' => 'string',
        'is_natural_person' => 'string',
        'payment_reason' => 'string',
        'responsible_type' => 'string',
        'suplr_qlty_in_procmt_certfn_valid_to' => 'string',
        'suplr_quality_management_system' => 'string',
        'supplier_corporate_group' => 'string',
        'supplier_procurement_block' => 'string',
        'tax_number1' => 'string',
        'tax_number2' => 'string',
        'tax_number3' => 'string',
        'tax_number4' => 'string',
        'tax_number5' => 'string',
        'tax_number_responsible' => 'string',
        'tax_number_type' => 'string',
        'suplr_proof_of_deliv_rlvt_code' => 'string',
        'br_tax_is_split' => 'bool',
        'data_exchange_instruction_key' => 'string',
        'to_supplier_company' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierCompany',
        'to_supplier_purchasing_org' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierPurchasingOrg',
        'to_supplier_text' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'supplier' => null,
        'alternative_payee_account_number' => null,
        'authorization_group' => null,
        'business_partner_pan_number' => null,
        'created_by_user' => null,
        'creation_date' => null,
        'customer' => null,
        'payment_is_blocked_for_supplier' => null,
        'posting_is_blocked' => null,
        'purchasing_is_blocked' => null,
        'supplier_account_group' => null,
        'supplier_full_name' => null,
        'supplier_name' => null,
        'vat_registration' => null,
        'birth_date' => null,
        'concatenated_international_loc_no' => null,
        'deletion_indicator' => null,
        'fiscal_address' => null,
        'industry' => null,
        'international_location_number1' => null,
        'international_location_number2' => null,
        'international_location_number3' => null,
        'is_natural_person' => null,
        'payment_reason' => null,
        'responsible_type' => null,
        'suplr_qlty_in_procmt_certfn_valid_to' => null,
        'suplr_quality_management_system' => null,
        'supplier_corporate_group' => null,
        'supplier_procurement_block' => null,
        'tax_number1' => null,
        'tax_number2' => null,
        'tax_number3' => null,
        'tax_number4' => null,
        'tax_number5' => null,
        'tax_number_responsible' => null,
        'tax_number_type' => null,
        'suplr_proof_of_deliv_rlvt_code' => null,
        'br_tax_is_split' => null,
        'data_exchange_instruction_key' => null,
        'to_supplier_company' => null,
        'to_supplier_purchasing_org' => null,
        'to_supplier_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'supplier' => false,
		'alternative_payee_account_number' => true,
		'authorization_group' => true,
		'business_partner_pan_number' => true,
		'created_by_user' => true,
		'creation_date' => true,
		'customer' => true,
		'payment_is_blocked_for_supplier' => true,
		'posting_is_blocked' => true,
		'purchasing_is_blocked' => true,
		'supplier_account_group' => true,
		'supplier_full_name' => true,
		'supplier_name' => true,
		'vat_registration' => true,
		'birth_date' => true,
		'concatenated_international_loc_no' => true,
		'deletion_indicator' => true,
		'fiscal_address' => true,
		'industry' => true,
		'international_location_number1' => true,
		'international_location_number2' => true,
		'international_location_number3' => true,
		'is_natural_person' => true,
		'payment_reason' => true,
		'responsible_type' => true,
		'suplr_qlty_in_procmt_certfn_valid_to' => true,
		'suplr_quality_management_system' => true,
		'supplier_corporate_group' => true,
		'supplier_procurement_block' => true,
		'tax_number1' => true,
		'tax_number2' => true,
		'tax_number3' => true,
		'tax_number4' => true,
		'tax_number5' => true,
		'tax_number_responsible' => true,
		'tax_number_type' => true,
		'suplr_proof_of_deliv_rlvt_code' => true,
		'br_tax_is_split' => true,
		'data_exchange_instruction_key' => true,
		'to_supplier_company' => false,
		'to_supplier_purchasing_org' => false,
		'to_supplier_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplier' => 'Supplier',
        'alternative_payee_account_number' => 'AlternativePayeeAccountNumber',
        'authorization_group' => 'AuthorizationGroup',
        'business_partner_pan_number' => 'BusinessPartnerPanNumber',
        'created_by_user' => 'CreatedByUser',
        'creation_date' => 'CreationDate',
        'customer' => 'Customer',
        'payment_is_blocked_for_supplier' => 'PaymentIsBlockedForSupplier',
        'posting_is_blocked' => 'PostingIsBlocked',
        'purchasing_is_blocked' => 'PurchasingIsBlocked',
        'supplier_account_group' => 'SupplierAccountGroup',
        'supplier_full_name' => 'SupplierFullName',
        'supplier_name' => 'SupplierName',
        'vat_registration' => 'VATRegistration',
        'birth_date' => 'BirthDate',
        'concatenated_international_loc_no' => 'ConcatenatedInternationalLocNo',
        'deletion_indicator' => 'DeletionIndicator',
        'fiscal_address' => 'FiscalAddress',
        'industry' => 'Industry',
        'international_location_number1' => 'InternationalLocationNumber1',
        'international_location_number2' => 'InternationalLocationNumber2',
        'international_location_number3' => 'InternationalLocationNumber3',
        'is_natural_person' => 'IsNaturalPerson',
        'payment_reason' => 'PaymentReason',
        'responsible_type' => 'ResponsibleType',
        'suplr_qlty_in_procmt_certfn_valid_to' => 'SuplrQltyInProcmtCertfnValidTo',
        'suplr_quality_management_system' => 'SuplrQualityManagementSystem',
        'supplier_corporate_group' => 'SupplierCorporateGroup',
        'supplier_procurement_block' => 'SupplierProcurementBlock',
        'tax_number1' => 'TaxNumber1',
        'tax_number2' => 'TaxNumber2',
        'tax_number3' => 'TaxNumber3',
        'tax_number4' => 'TaxNumber4',
        'tax_number5' => 'TaxNumber5',
        'tax_number_responsible' => 'TaxNumberResponsible',
        'tax_number_type' => 'TaxNumberType',
        'suplr_proof_of_deliv_rlvt_code' => 'SuplrProofOfDelivRlvtCode',
        'br_tax_is_split' => 'BR_TaxIsSplit',
        'data_exchange_instruction_key' => 'DataExchangeInstructionKey',
        'to_supplier_company' => 'to_SupplierCompany',
        'to_supplier_purchasing_org' => 'to_SupplierPurchasingOrg',
        'to_supplier_text' => 'to_SupplierText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplier' => 'setSupplier',
        'alternative_payee_account_number' => 'setAlternativePayeeAccountNumber',
        'authorization_group' => 'setAuthorizationGroup',
        'business_partner_pan_number' => 'setBusinessPartnerPanNumber',
        'created_by_user' => 'setCreatedByUser',
        'creation_date' => 'setCreationDate',
        'customer' => 'setCustomer',
        'payment_is_blocked_for_supplier' => 'setPaymentIsBlockedForSupplier',
        'posting_is_blocked' => 'setPostingIsBlocked',
        'purchasing_is_blocked' => 'setPurchasingIsBlocked',
        'supplier_account_group' => 'setSupplierAccountGroup',
        'supplier_full_name' => 'setSupplierFullName',
        'supplier_name' => 'setSupplierName',
        'vat_registration' => 'setVatRegistration',
        'birth_date' => 'setBirthDate',
        'concatenated_international_loc_no' => 'setConcatenatedInternationalLocNo',
        'deletion_indicator' => 'setDeletionIndicator',
        'fiscal_address' => 'setFiscalAddress',
        'industry' => 'setIndustry',
        'international_location_number1' => 'setInternationalLocationNumber1',
        'international_location_number2' => 'setInternationalLocationNumber2',
        'international_location_number3' => 'setInternationalLocationNumber3',
        'is_natural_person' => 'setIsNaturalPerson',
        'payment_reason' => 'setPaymentReason',
        'responsible_type' => 'setResponsibleType',
        'suplr_qlty_in_procmt_certfn_valid_to' => 'setSuplrQltyInProcmtCertfnValidTo',
        'suplr_quality_management_system' => 'setSuplrQualityManagementSystem',
        'supplier_corporate_group' => 'setSupplierCorporateGroup',
        'supplier_procurement_block' => 'setSupplierProcurementBlock',
        'tax_number1' => 'setTaxNumber1',
        'tax_number2' => 'setTaxNumber2',
        'tax_number3' => 'setTaxNumber3',
        'tax_number4' => 'setTaxNumber4',
        'tax_number5' => 'setTaxNumber5',
        'tax_number_responsible' => 'setTaxNumberResponsible',
        'tax_number_type' => 'setTaxNumberType',
        'suplr_proof_of_deliv_rlvt_code' => 'setSuplrProofOfDelivRlvtCode',
        'br_tax_is_split' => 'setBrTaxIsSplit',
        'data_exchange_instruction_key' => 'setDataExchangeInstructionKey',
        'to_supplier_company' => 'setToSupplierCompany',
        'to_supplier_purchasing_org' => 'setToSupplierPurchasingOrg',
        'to_supplier_text' => 'setToSupplierText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplier' => 'getSupplier',
        'alternative_payee_account_number' => 'getAlternativePayeeAccountNumber',
        'authorization_group' => 'getAuthorizationGroup',
        'business_partner_pan_number' => 'getBusinessPartnerPanNumber',
        'created_by_user' => 'getCreatedByUser',
        'creation_date' => 'getCreationDate',
        'customer' => 'getCustomer',
        'payment_is_blocked_for_supplier' => 'getPaymentIsBlockedForSupplier',
        'posting_is_blocked' => 'getPostingIsBlocked',
        'purchasing_is_blocked' => 'getPurchasingIsBlocked',
        'supplier_account_group' => 'getSupplierAccountGroup',
        'supplier_full_name' => 'getSupplierFullName',
        'supplier_name' => 'getSupplierName',
        'vat_registration' => 'getVatRegistration',
        'birth_date' => 'getBirthDate',
        'concatenated_international_loc_no' => 'getConcatenatedInternationalLocNo',
        'deletion_indicator' => 'getDeletionIndicator',
        'fiscal_address' => 'getFiscalAddress',
        'industry' => 'getIndustry',
        'international_location_number1' => 'getInternationalLocationNumber1',
        'international_location_number2' => 'getInternationalLocationNumber2',
        'international_location_number3' => 'getInternationalLocationNumber3',
        'is_natural_person' => 'getIsNaturalPerson',
        'payment_reason' => 'getPaymentReason',
        'responsible_type' => 'getResponsibleType',
        'suplr_qlty_in_procmt_certfn_valid_to' => 'getSuplrQltyInProcmtCertfnValidTo',
        'suplr_quality_management_system' => 'getSuplrQualityManagementSystem',
        'supplier_corporate_group' => 'getSupplierCorporateGroup',
        'supplier_procurement_block' => 'getSupplierProcurementBlock',
        'tax_number1' => 'getTaxNumber1',
        'tax_number2' => 'getTaxNumber2',
        'tax_number3' => 'getTaxNumber3',
        'tax_number4' => 'getTaxNumber4',
        'tax_number5' => 'getTaxNumber5',
        'tax_number_responsible' => 'getTaxNumberResponsible',
        'tax_number_type' => 'getTaxNumberType',
        'suplr_proof_of_deliv_rlvt_code' => 'getSuplrProofOfDelivRlvtCode',
        'br_tax_is_split' => 'getBrTaxIsSplit',
        'data_exchange_instruction_key' => 'getDataExchangeInstructionKey',
        'to_supplier_company' => 'getToSupplierCompany',
        'to_supplier_purchasing_org' => 'getToSupplierPurchasingOrg',
        'to_supplier_text' => 'getToSupplierText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('alternative_payee_account_number', $data ?? [], null);
        $this->setIfExists('authorization_group', $data ?? [], null);
        $this->setIfExists('business_partner_pan_number', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('payment_is_blocked_for_supplier', $data ?? [], null);
        $this->setIfExists('posting_is_blocked', $data ?? [], null);
        $this->setIfExists('purchasing_is_blocked', $data ?? [], null);
        $this->setIfExists('supplier_account_group', $data ?? [], null);
        $this->setIfExists('supplier_full_name', $data ?? [], null);
        $this->setIfExists('supplier_name', $data ?? [], null);
        $this->setIfExists('vat_registration', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('concatenated_international_loc_no', $data ?? [], null);
        $this->setIfExists('deletion_indicator', $data ?? [], null);
        $this->setIfExists('fiscal_address', $data ?? [], null);
        $this->setIfExists('industry', $data ?? [], null);
        $this->setIfExists('international_location_number1', $data ?? [], null);
        $this->setIfExists('international_location_number2', $data ?? [], null);
        $this->setIfExists('international_location_number3', $data ?? [], null);
        $this->setIfExists('is_natural_person', $data ?? [], null);
        $this->setIfExists('payment_reason', $data ?? [], null);
        $this->setIfExists('responsible_type', $data ?? [], null);
        $this->setIfExists('suplr_qlty_in_procmt_certfn_valid_to', $data ?? [], null);
        $this->setIfExists('suplr_quality_management_system', $data ?? [], null);
        $this->setIfExists('supplier_corporate_group', $data ?? [], null);
        $this->setIfExists('supplier_procurement_block', $data ?? [], null);
        $this->setIfExists('tax_number1', $data ?? [], null);
        $this->setIfExists('tax_number2', $data ?? [], null);
        $this->setIfExists('tax_number3', $data ?? [], null);
        $this->setIfExists('tax_number4', $data ?? [], null);
        $this->setIfExists('tax_number5', $data ?? [], null);
        $this->setIfExists('tax_number_responsible', $data ?? [], null);
        $this->setIfExists('tax_number_type', $data ?? [], null);
        $this->setIfExists('suplr_proof_of_deliv_rlvt_code', $data ?? [], null);
        $this->setIfExists('br_tax_is_split', $data ?? [], null);
        $this->setIfExists('data_exchange_instruction_key', $data ?? [], null);
        $this->setIfExists('to_supplier_company', $data ?? [], null);
        $this->setIfExists('to_supplier_purchasing_org', $data ?? [], null);
        $this->setIfExists('to_supplier_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['alternative_payee_account_number']) && (mb_strlen($this->container['alternative_payee_account_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'alternative_payee_account_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['authorization_group']) && (mb_strlen($this->container['authorization_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'authorization_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['business_partner_pan_number']) && (mb_strlen($this->container['business_partner_pan_number']) > 40)) {
            $invalidProperties[] = "invalid value for 'business_partner_pan_number', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['created_by_user']) && (mb_strlen($this->container['created_by_user']) > 12)) {
            $invalidProperties[] = "invalid value for 'created_by_user', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['customer']) && (mb_strlen($this->container['customer']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier_account_group']) && (mb_strlen($this->container['supplier_account_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'supplier_account_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['supplier_full_name']) && (mb_strlen($this->container['supplier_full_name']) > 220)) {
            $invalidProperties[] = "invalid value for 'supplier_full_name', the character length must be smaller than or equal to 220.";
        }

        if (!is_null($this->container['supplier_name']) && (mb_strlen($this->container['supplier_name']) > 80)) {
            $invalidProperties[] = "invalid value for 'supplier_name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['vat_registration']) && (mb_strlen($this->container['vat_registration']) > 20)) {
            $invalidProperties[] = "invalid value for 'vat_registration', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['concatenated_international_loc_no']) && (mb_strlen($this->container['concatenated_international_loc_no']) > 20)) {
            $invalidProperties[] = "invalid value for 'concatenated_international_loc_no', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['fiscal_address']) && (mb_strlen($this->container['fiscal_address']) > 10)) {
            $invalidProperties[] = "invalid value for 'fiscal_address', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['industry']) && (mb_strlen($this->container['industry']) > 4)) {
            $invalidProperties[] = "invalid value for 'industry', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['international_location_number1']) && (mb_strlen($this->container['international_location_number1']) > 7)) {
            $invalidProperties[] = "invalid value for 'international_location_number1', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['international_location_number2']) && (mb_strlen($this->container['international_location_number2']) > 5)) {
            $invalidProperties[] = "invalid value for 'international_location_number2', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['international_location_number3']) && (mb_strlen($this->container['international_location_number3']) > 1)) {
            $invalidProperties[] = "invalid value for 'international_location_number3', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['is_natural_person']) && (mb_strlen($this->container['is_natural_person']) > 1)) {
            $invalidProperties[] = "invalid value for 'is_natural_person', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['payment_reason']) && (mb_strlen($this->container['payment_reason']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_reason', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['responsible_type']) && (mb_strlen($this->container['responsible_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'responsible_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['suplr_quality_management_system']) && (mb_strlen($this->container['suplr_quality_management_system']) > 4)) {
            $invalidProperties[] = "invalid value for 'suplr_quality_management_system', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['supplier_corporate_group']) && (mb_strlen($this->container['supplier_corporate_group']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier_corporate_group', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier_procurement_block']) && (mb_strlen($this->container['supplier_procurement_block']) > 2)) {
            $invalidProperties[] = "invalid value for 'supplier_procurement_block', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['tax_number1']) && (mb_strlen($this->container['tax_number1']) > 16)) {
            $invalidProperties[] = "invalid value for 'tax_number1', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['tax_number2']) && (mb_strlen($this->container['tax_number2']) > 11)) {
            $invalidProperties[] = "invalid value for 'tax_number2', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['tax_number3']) && (mb_strlen($this->container['tax_number3']) > 18)) {
            $invalidProperties[] = "invalid value for 'tax_number3', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['tax_number4']) && (mb_strlen($this->container['tax_number4']) > 18)) {
            $invalidProperties[] = "invalid value for 'tax_number4', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['tax_number5']) && (mb_strlen($this->container['tax_number5']) > 60)) {
            $invalidProperties[] = "invalid value for 'tax_number5', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['tax_number_responsible']) && (mb_strlen($this->container['tax_number_responsible']) > 18)) {
            $invalidProperties[] = "invalid value for 'tax_number_responsible', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['tax_number_type']) && (mb_strlen($this->container['tax_number_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'tax_number_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['suplr_proof_of_deliv_rlvt_code']) && (mb_strlen($this->container['suplr_proof_of_deliv_rlvt_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'suplr_proof_of_deliv_rlvt_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['data_exchange_instruction_key']) && (mb_strlen($this->container['data_exchange_instruction_key']) > 2)) {
            $invalidProperties[] = "invalid value for 'data_exchange_instruction_key', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier Account Number of Supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            throw new \InvalidArgumentException('non-nullable supplier cannot be null');
        }
        if ((mb_strlen($supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 10.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets alternative_payee_account_number
     *
     * @return string|null
     */
    public function getAlternativePayeeAccountNumber()
    {
        return $this->container['alternative_payee_account_number'];
    }

    /**
     * Sets alternative_payee_account_number
     *
     * @param string|null $alternative_payee_account_number Account Number of the Alternative Payee
     *
     * @return self
     */
    public function setAlternativePayeeAccountNumber($alternative_payee_account_number)
    {
        if (is_null($alternative_payee_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'alternative_payee_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alternative_payee_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($alternative_payee_account_number) && (mb_strlen($alternative_payee_account_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $alternative_payee_account_number when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 10.');
        }

        $this->container['alternative_payee_account_number'] = $alternative_payee_account_number;

        return $this;
    }

    /**
     * Gets authorization_group
     *
     * @return string|null
     */
    public function getAuthorizationGroup()
    {
        return $this->container['authorization_group'];
    }

    /**
     * Sets authorization_group
     *
     * @param string|null $authorization_group Authorization Group
     *
     * @return self
     */
    public function setAuthorizationGroup($authorization_group)
    {
        if (is_null($authorization_group)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_group) && (mb_strlen($authorization_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $authorization_group when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 4.');
        }

        $this->container['authorization_group'] = $authorization_group;

        return $this;
    }

    /**
     * Gets business_partner_pan_number
     *
     * @return string|null
     */
    public function getBusinessPartnerPanNumber()
    {
        return $this->container['business_partner_pan_number'];
    }

    /**
     * Sets business_partner_pan_number
     *
     * @param string|null $business_partner_pan_number Permanent Account Number
     *
     * @return self
     */
    public function setBusinessPartnerPanNumber($business_partner_pan_number)
    {
        if (is_null($business_partner_pan_number)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_pan_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_pan_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_pan_number) && (mb_strlen($business_partner_pan_number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_pan_number when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 40.');
        }

        $this->container['business_partner_pan_number'] = $business_partner_pan_number;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return string|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param string|null $created_by_user Name of Person who Created the Object
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            array_push($this->openAPINullablesSetToNull, 'created_by_user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by_user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($created_by_user) && (mb_strlen($created_by_user) > 12)) {
            throw new \InvalidArgumentException('invalid length for $created_by_user when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 12.');
        }

        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string|null $creation_date Record Created On
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer Customer Number
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            array_push($this->openAPINullablesSetToNull, 'customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer) && (mb_strlen($customer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 10.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets payment_is_blocked_for_supplier
     *
     * @return bool|null
     */
    public function getPaymentIsBlockedForSupplier()
    {
        return $this->container['payment_is_blocked_for_supplier'];
    }

    /**
     * Sets payment_is_blocked_for_supplier
     *
     * @param bool|null $payment_is_blocked_for_supplier Payment Block
     *
     * @return self
     */
    public function setPaymentIsBlockedForSupplier($payment_is_blocked_for_supplier)
    {
        if (is_null($payment_is_blocked_for_supplier)) {
            array_push($this->openAPINullablesSetToNull, 'payment_is_blocked_for_supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_is_blocked_for_supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_is_blocked_for_supplier'] = $payment_is_blocked_for_supplier;

        return $this;
    }

    /**
     * Gets posting_is_blocked
     *
     * @return bool|null
     */
    public function getPostingIsBlocked()
    {
        return $this->container['posting_is_blocked'];
    }

    /**
     * Sets posting_is_blocked
     *
     * @param bool|null $posting_is_blocked Central Posting Block
     *
     * @return self
     */
    public function setPostingIsBlocked($posting_is_blocked)
    {
        if (is_null($posting_is_blocked)) {
            array_push($this->openAPINullablesSetToNull, 'posting_is_blocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('posting_is_blocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['posting_is_blocked'] = $posting_is_blocked;

        return $this;
    }

    /**
     * Gets purchasing_is_blocked
     *
     * @return bool|null
     */
    public function getPurchasingIsBlocked()
    {
        return $this->container['purchasing_is_blocked'];
    }

    /**
     * Sets purchasing_is_blocked
     *
     * @param bool|null $purchasing_is_blocked Centrally imposed purchasing block
     *
     * @return self
     */
    public function setPurchasingIsBlocked($purchasing_is_blocked)
    {
        if (is_null($purchasing_is_blocked)) {
            array_push($this->openAPINullablesSetToNull, 'purchasing_is_blocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchasing_is_blocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchasing_is_blocked'] = $purchasing_is_blocked;

        return $this;
    }

    /**
     * Gets supplier_account_group
     *
     * @return string|null
     */
    public function getSupplierAccountGroup()
    {
        return $this->container['supplier_account_group'];
    }

    /**
     * Sets supplier_account_group
     *
     * @param string|null $supplier_account_group Supplier Account Group
     *
     * @return self
     */
    public function setSupplierAccountGroup($supplier_account_group)
    {
        if (is_null($supplier_account_group)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_account_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_account_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_account_group) && (mb_strlen($supplier_account_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $supplier_account_group when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 4.');
        }

        $this->container['supplier_account_group'] = $supplier_account_group;

        return $this;
    }

    /**
     * Gets supplier_full_name
     *
     * @return string|null
     */
    public function getSupplierFullName()
    {
        return $this->container['supplier_full_name'];
    }

    /**
     * Sets supplier_full_name
     *
     * @param string|null $supplier_full_name Supplier Full Name
     *
     * @return self
     */
    public function setSupplierFullName($supplier_full_name)
    {
        if (is_null($supplier_full_name)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_full_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_full_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_full_name) && (mb_strlen($supplier_full_name) > 220)) {
            throw new \InvalidArgumentException('invalid length for $supplier_full_name when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 220.');
        }

        $this->container['supplier_full_name'] = $supplier_full_name;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string|null
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string|null $supplier_name supplier_name
     *
     * @return self
     */
    public function setSupplierName($supplier_name)
    {
        if (is_null($supplier_name)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_name) && (mb_strlen($supplier_name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $supplier_name when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 80.');
        }

        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets vat_registration
     *
     * @return string|null
     */
    public function getVatRegistration()
    {
        return $this->container['vat_registration'];
    }

    /**
     * Sets vat_registration
     *
     * @param string|null $vat_registration VAT Registration Number
     *
     * @return self
     */
    public function setVatRegistration($vat_registration)
    {
        if (is_null($vat_registration)) {
            array_push($this->openAPINullablesSetToNull, 'vat_registration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_registration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($vat_registration) && (mb_strlen($vat_registration) > 20)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 20.');
        }

        $this->container['vat_registration'] = $vat_registration;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date Date of Birth of the Person Subject to Withholding Tax
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            array_push($this->openAPINullablesSetToNull, 'birth_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets concatenated_international_loc_no
     *
     * @return string|null
     */
    public function getConcatenatedInternationalLocNo()
    {
        return $this->container['concatenated_international_loc_no'];
    }

    /**
     * Sets concatenated_international_loc_no
     *
     * @param string|null $concatenated_international_loc_no Cocatenated International Location Number
     *
     * @return self
     */
    public function setConcatenatedInternationalLocNo($concatenated_international_loc_no)
    {
        if (is_null($concatenated_international_loc_no)) {
            array_push($this->openAPINullablesSetToNull, 'concatenated_international_loc_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('concatenated_international_loc_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($concatenated_international_loc_no) && (mb_strlen($concatenated_international_loc_no) > 20)) {
            throw new \InvalidArgumentException('invalid length for $concatenated_international_loc_no when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 20.');
        }

        $this->container['concatenated_international_loc_no'] = $concatenated_international_loc_no;

        return $this;
    }

    /**
     * Gets deletion_indicator
     *
     * @return bool|null
     */
    public function getDeletionIndicator()
    {
        return $this->container['deletion_indicator'];
    }

    /**
     * Sets deletion_indicator
     *
     * @param bool|null $deletion_indicator Central Deletion Flag for Master Record
     *
     * @return self
     */
    public function setDeletionIndicator($deletion_indicator)
    {
        if (is_null($deletion_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'deletion_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletion_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletion_indicator'] = $deletion_indicator;

        return $this;
    }

    /**
     * Gets fiscal_address
     *
     * @return string|null
     */
    public function getFiscalAddress()
    {
        return $this->container['fiscal_address'];
    }

    /**
     * Sets fiscal_address
     *
     * @param string|null $fiscal_address Account number of the master record with fiscal address
     *
     * @return self
     */
    public function setFiscalAddress($fiscal_address)
    {
        if (is_null($fiscal_address)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fiscal_address) && (mb_strlen($fiscal_address) > 10)) {
            throw new \InvalidArgumentException('invalid length for $fiscal_address when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 10.');
        }

        $this->container['fiscal_address'] = $fiscal_address;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string|null
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string|null $industry Industry Key
     *
     * @return self
     */
    public function setIndustry($industry)
    {
        if (is_null($industry)) {
            array_push($this->openAPINullablesSetToNull, 'industry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry) && (mb_strlen($industry) > 4)) {
            throw new \InvalidArgumentException('invalid length for $industry when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 4.');
        }

        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets international_location_number1
     *
     * @return string|null
     */
    public function getInternationalLocationNumber1()
    {
        return $this->container['international_location_number1'];
    }

    /**
     * Sets international_location_number1
     *
     * @param string|null $international_location_number1 International location number  (part 1)
     *
     * @return self
     */
    public function setInternationalLocationNumber1($international_location_number1)
    {
        if (is_null($international_location_number1)) {
            array_push($this->openAPINullablesSetToNull, 'international_location_number1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international_location_number1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($international_location_number1) && (mb_strlen($international_location_number1) > 7)) {
            throw new \InvalidArgumentException('invalid length for $international_location_number1 when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 7.');
        }

        $this->container['international_location_number1'] = $international_location_number1;

        return $this;
    }

    /**
     * Gets international_location_number2
     *
     * @return string|null
     */
    public function getInternationalLocationNumber2()
    {
        return $this->container['international_location_number2'];
    }

    /**
     * Sets international_location_number2
     *
     * @param string|null $international_location_number2 International location number (Part 2)
     *
     * @return self
     */
    public function setInternationalLocationNumber2($international_location_number2)
    {
        if (is_null($international_location_number2)) {
            array_push($this->openAPINullablesSetToNull, 'international_location_number2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international_location_number2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($international_location_number2) && (mb_strlen($international_location_number2) > 5)) {
            throw new \InvalidArgumentException('invalid length for $international_location_number2 when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 5.');
        }

        $this->container['international_location_number2'] = $international_location_number2;

        return $this;
    }

    /**
     * Gets international_location_number3
     *
     * @return string|null
     */
    public function getInternationalLocationNumber3()
    {
        return $this->container['international_location_number3'];
    }

    /**
     * Sets international_location_number3
     *
     * @param string|null $international_location_number3 Check digit for the international location number
     *
     * @return self
     */
    public function setInternationalLocationNumber3($international_location_number3)
    {
        if (is_null($international_location_number3)) {
            array_push($this->openAPINullablesSetToNull, 'international_location_number3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('international_location_number3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($international_location_number3) && (mb_strlen($international_location_number3) > 1)) {
            throw new \InvalidArgumentException('invalid length for $international_location_number3 when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 1.');
        }

        $this->container['international_location_number3'] = $international_location_number3;

        return $this;
    }

    /**
     * Gets is_natural_person
     *
     * @return string|null
     */
    public function getIsNaturalPerson()
    {
        return $this->container['is_natural_person'];
    }

    /**
     * Sets is_natural_person
     *
     * @param string|null $is_natural_person is_natural_person
     *
     * @return self
     */
    public function setIsNaturalPerson($is_natural_person)
    {
        if (is_null($is_natural_person)) {
            array_push($this->openAPINullablesSetToNull, 'is_natural_person');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_natural_person', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($is_natural_person) && (mb_strlen($is_natural_person) > 1)) {
            throw new \InvalidArgumentException('invalid length for $is_natural_person when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 1.');
        }

        $this->container['is_natural_person'] = $is_natural_person;

        return $this;
    }

    /**
     * Gets payment_reason
     *
     * @return string|null
     */
    public function getPaymentReason()
    {
        return $this->container['payment_reason'];
    }

    /**
     * Sets payment_reason
     *
     * @param string|null $payment_reason payment_reason
     *
     * @return self
     */
    public function setPaymentReason($payment_reason)
    {
        if (is_null($payment_reason)) {
            array_push($this->openAPINullablesSetToNull, 'payment_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_reason) && (mb_strlen($payment_reason) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_reason when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 4.');
        }

        $this->container['payment_reason'] = $payment_reason;

        return $this;
    }

    /**
     * Gets responsible_type
     *
     * @return string|null
     */
    public function getResponsibleType()
    {
        return $this->container['responsible_type'];
    }

    /**
     * Sets responsible_type
     *
     * @param string|null $responsible_type responsible_type
     *
     * @return self
     */
    public function setResponsibleType($responsible_type)
    {
        if (is_null($responsible_type)) {
            array_push($this->openAPINullablesSetToNull, 'responsible_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsible_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($responsible_type) && (mb_strlen($responsible_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $responsible_type when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 2.');
        }

        $this->container['responsible_type'] = $responsible_type;

        return $this;
    }

    /**
     * Gets suplr_qlty_in_procmt_certfn_valid_to
     *
     * @return string|null
     */
    public function getSuplrQltyInProcmtCertfnValidTo()
    {
        return $this->container['suplr_qlty_in_procmt_certfn_valid_to'];
    }

    /**
     * Sets suplr_qlty_in_procmt_certfn_valid_to
     *
     * @param string|null $suplr_qlty_in_procmt_certfn_valid_to Validity Date of Certification
     *
     * @return self
     */
    public function setSuplrQltyInProcmtCertfnValidTo($suplr_qlty_in_procmt_certfn_valid_to)
    {
        if (is_null($suplr_qlty_in_procmt_certfn_valid_to)) {
            array_push($this->openAPINullablesSetToNull, 'suplr_qlty_in_procmt_certfn_valid_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suplr_qlty_in_procmt_certfn_valid_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suplr_qlty_in_procmt_certfn_valid_to'] = $suplr_qlty_in_procmt_certfn_valid_to;

        return $this;
    }

    /**
     * Gets suplr_quality_management_system
     *
     * @return string|null
     */
    public function getSuplrQualityManagementSystem()
    {
        return $this->container['suplr_quality_management_system'];
    }

    /**
     * Sets suplr_quality_management_system
     *
     * @param string|null $suplr_quality_management_system Supplier's QM System
     *
     * @return self
     */
    public function setSuplrQualityManagementSystem($suplr_quality_management_system)
    {
        if (is_null($suplr_quality_management_system)) {
            array_push($this->openAPINullablesSetToNull, 'suplr_quality_management_system');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suplr_quality_management_system', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($suplr_quality_management_system) && (mb_strlen($suplr_quality_management_system) > 4)) {
            throw new \InvalidArgumentException('invalid length for $suplr_quality_management_system when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 4.');
        }

        $this->container['suplr_quality_management_system'] = $suplr_quality_management_system;

        return $this;
    }

    /**
     * Gets supplier_corporate_group
     *
     * @return string|null
     */
    public function getSupplierCorporateGroup()
    {
        return $this->container['supplier_corporate_group'];
    }

    /**
     * Sets supplier_corporate_group
     *
     * @param string|null $supplier_corporate_group supplier_corporate_group
     *
     * @return self
     */
    public function setSupplierCorporateGroup($supplier_corporate_group)
    {
        if (is_null($supplier_corporate_group)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_corporate_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_corporate_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_corporate_group) && (mb_strlen($supplier_corporate_group) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier_corporate_group when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 10.');
        }

        $this->container['supplier_corporate_group'] = $supplier_corporate_group;

        return $this;
    }

    /**
     * Gets supplier_procurement_block
     *
     * @return string|null
     */
    public function getSupplierProcurementBlock()
    {
        return $this->container['supplier_procurement_block'];
    }

    /**
     * Sets supplier_procurement_block
     *
     * @param string|null $supplier_procurement_block Function That Will Be Blocked
     *
     * @return self
     */
    public function setSupplierProcurementBlock($supplier_procurement_block)
    {
        if (is_null($supplier_procurement_block)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_procurement_block');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_procurement_block', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_procurement_block) && (mb_strlen($supplier_procurement_block) > 2)) {
            throw new \InvalidArgumentException('invalid length for $supplier_procurement_block when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 2.');
        }

        $this->container['supplier_procurement_block'] = $supplier_procurement_block;

        return $this;
    }

    /**
     * Gets tax_number1
     *
     * @return string|null
     */
    public function getTaxNumber1()
    {
        return $this->container['tax_number1'];
    }

    /**
     * Sets tax_number1
     *
     * @param string|null $tax_number1 tax_number1
     *
     * @return self
     */
    public function setTaxNumber1($tax_number1)
    {
        if (is_null($tax_number1)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_number1) && (mb_strlen($tax_number1) > 16)) {
            throw new \InvalidArgumentException('invalid length for $tax_number1 when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 16.');
        }

        $this->container['tax_number1'] = $tax_number1;

        return $this;
    }

    /**
     * Gets tax_number2
     *
     * @return string|null
     */
    public function getTaxNumber2()
    {
        return $this->container['tax_number2'];
    }

    /**
     * Sets tax_number2
     *
     * @param string|null $tax_number2 tax_number2
     *
     * @return self
     */
    public function setTaxNumber2($tax_number2)
    {
        if (is_null($tax_number2)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_number2) && (mb_strlen($tax_number2) > 11)) {
            throw new \InvalidArgumentException('invalid length for $tax_number2 when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 11.');
        }

        $this->container['tax_number2'] = $tax_number2;

        return $this;
    }

    /**
     * Gets tax_number3
     *
     * @return string|null
     */
    public function getTaxNumber3()
    {
        return $this->container['tax_number3'];
    }

    /**
     * Sets tax_number3
     *
     * @param string|null $tax_number3 tax_number3
     *
     * @return self
     */
    public function setTaxNumber3($tax_number3)
    {
        if (is_null($tax_number3)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_number3) && (mb_strlen($tax_number3) > 18)) {
            throw new \InvalidArgumentException('invalid length for $tax_number3 when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 18.');
        }

        $this->container['tax_number3'] = $tax_number3;

        return $this;
    }

    /**
     * Gets tax_number4
     *
     * @return string|null
     */
    public function getTaxNumber4()
    {
        return $this->container['tax_number4'];
    }

    /**
     * Sets tax_number4
     *
     * @param string|null $tax_number4 tax_number4
     *
     * @return self
     */
    public function setTaxNumber4($tax_number4)
    {
        if (is_null($tax_number4)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_number4) && (mb_strlen($tax_number4) > 18)) {
            throw new \InvalidArgumentException('invalid length for $tax_number4 when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 18.');
        }

        $this->container['tax_number4'] = $tax_number4;

        return $this;
    }

    /**
     * Gets tax_number5
     *
     * @return string|null
     */
    public function getTaxNumber5()
    {
        return $this->container['tax_number5'];
    }

    /**
     * Sets tax_number5
     *
     * @param string|null $tax_number5 tax_number5
     *
     * @return self
     */
    public function setTaxNumber5($tax_number5)
    {
        if (is_null($tax_number5)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_number5) && (mb_strlen($tax_number5) > 60)) {
            throw new \InvalidArgumentException('invalid length for $tax_number5 when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 60.');
        }

        $this->container['tax_number5'] = $tax_number5;

        return $this;
    }

    /**
     * Gets tax_number_responsible
     *
     * @return string|null
     */
    public function getTaxNumberResponsible()
    {
        return $this->container['tax_number_responsible'];
    }

    /**
     * Sets tax_number_responsible
     *
     * @param string|null $tax_number_responsible Tax Number at Responsible Tax Authority
     *
     * @return self
     */
    public function setTaxNumberResponsible($tax_number_responsible)
    {
        if (is_null($tax_number_responsible)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number_responsible');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number_responsible', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_number_responsible) && (mb_strlen($tax_number_responsible) > 18)) {
            throw new \InvalidArgumentException('invalid length for $tax_number_responsible when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 18.');
        }

        $this->container['tax_number_responsible'] = $tax_number_responsible;

        return $this;
    }

    /**
     * Gets tax_number_type
     *
     * @return string|null
     */
    public function getTaxNumberType()
    {
        return $this->container['tax_number_type'];
    }

    /**
     * Sets tax_number_type
     *
     * @param string|null $tax_number_type tax_number_type
     *
     * @return self
     */
    public function setTaxNumberType($tax_number_type)
    {
        if (is_null($tax_number_type)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_number_type) && (mb_strlen($tax_number_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tax_number_type when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 2.');
        }

        $this->container['tax_number_type'] = $tax_number_type;

        return $this;
    }

    /**
     * Gets suplr_proof_of_deliv_rlvt_code
     *
     * @return string|null
     */
    public function getSuplrProofOfDelivRlvtCode()
    {
        return $this->container['suplr_proof_of_deliv_rlvt_code'];
    }

    /**
     * Sets suplr_proof_of_deliv_rlvt_code
     *
     * @param string|null $suplr_proof_of_deliv_rlvt_code Supplier indicator relevant for proof of delivery
     *
     * @return self
     */
    public function setSuplrProofOfDelivRlvtCode($suplr_proof_of_deliv_rlvt_code)
    {
        if (is_null($suplr_proof_of_deliv_rlvt_code)) {
            array_push($this->openAPINullablesSetToNull, 'suplr_proof_of_deliv_rlvt_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suplr_proof_of_deliv_rlvt_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($suplr_proof_of_deliv_rlvt_code) && (mb_strlen($suplr_proof_of_deliv_rlvt_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $suplr_proof_of_deliv_rlvt_code when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 1.');
        }

        $this->container['suplr_proof_of_deliv_rlvt_code'] = $suplr_proof_of_deliv_rlvt_code;

        return $this;
    }

    /**
     * Gets br_tax_is_split
     *
     * @return bool|null
     */
    public function getBrTaxIsSplit()
    {
        return $this->container['br_tax_is_split'];
    }

    /**
     * Sets br_tax_is_split
     *
     * @param bool|null $br_tax_is_split Tax Split
     *
     * @return self
     */
    public function setBrTaxIsSplit($br_tax_is_split)
    {
        if (is_null($br_tax_is_split)) {
            array_push($this->openAPINullablesSetToNull, 'br_tax_is_split');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('br_tax_is_split', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['br_tax_is_split'] = $br_tax_is_split;

        return $this;
    }

    /**
     * Gets data_exchange_instruction_key
     *
     * @return string|null
     */
    public function getDataExchangeInstructionKey()
    {
        return $this->container['data_exchange_instruction_key'];
    }

    /**
     * Sets data_exchange_instruction_key
     *
     * @param string|null $data_exchange_instruction_key Instruction Key for Data Medium Exchange
     *
     * @return self
     */
    public function setDataExchangeInstructionKey($data_exchange_instruction_key)
    {
        if (is_null($data_exchange_instruction_key)) {
            array_push($this->openAPINullablesSetToNull, 'data_exchange_instruction_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_exchange_instruction_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($data_exchange_instruction_key) && (mb_strlen($data_exchange_instruction_key) > 2)) {
            throw new \InvalidArgumentException('invalid length for $data_exchange_instruction_key when calling APIBUSINESSPARTNERASupplierType., must be smaller than or equal to 2.');
        }

        $this->container['data_exchange_instruction_key'] = $data_exchange_instruction_key;

        return $this;
    }

    /**
     * Gets to_supplier_company
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierCompany|null
     */
    public function getToSupplierCompany()
    {
        return $this->container['to_supplier_company'];
    }

    /**
     * Sets to_supplier_company
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierCompany|null $to_supplier_company to_supplier_company
     *
     * @return self
     */
    public function setToSupplierCompany($to_supplier_company)
    {
        if (is_null($to_supplier_company)) {
            throw new \InvalidArgumentException('non-nullable to_supplier_company cannot be null');
        }
        $this->container['to_supplier_company'] = $to_supplier_company;

        return $this;
    }

    /**
     * Gets to_supplier_purchasing_org
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierPurchasingOrg|null
     */
    public function getToSupplierPurchasingOrg()
    {
        return $this->container['to_supplier_purchasing_org'];
    }

    /**
     * Sets to_supplier_purchasing_org
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierPurchasingOrg|null $to_supplier_purchasing_org to_supplier_purchasing_org
     *
     * @return self
     */
    public function setToSupplierPurchasingOrg($to_supplier_purchasing_org)
    {
        if (is_null($to_supplier_purchasing_org)) {
            throw new \InvalidArgumentException('non-nullable to_supplier_purchasing_org cannot be null');
        }
        $this->container['to_supplier_purchasing_org'] = $to_supplier_purchasing_org;

        return $this;
    }

    /**
     * Gets to_supplier_text
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierText|null
     */
    public function getToSupplierText()
    {
        return $this->container['to_supplier_text'];
    }

    /**
     * Sets to_supplier_text
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierTypeToSupplierText|null $to_supplier_text to_supplier_text
     *
     * @return self
     */
    public function setToSupplierText($to_supplier_text)
    {
        if (is_null($to_supplier_text)) {
            throw new \InvalidArgumentException('non-nullable to_supplier_text cannot be null');
        }
        $this->container['to_supplier_text'] = $to_supplier_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


