<?php
/**
 * APIBUSINESSPARTNERACustomerTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERACustomerTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERACustomerTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_CustomerType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorization_group' => 'string',
        'billing_is_blocked_for_customer' => 'string',
        'customer_account_group' => 'string',
        'customer_classification' => 'string',
        'delivery_is_blocked' => 'string',
        'free_defined_attribute01' => 'string',
        'free_defined_attribute02' => 'string',
        'free_defined_attribute03' => 'string',
        'free_defined_attribute04' => 'string',
        'free_defined_attribute05' => 'string',
        'free_defined_attribute06' => 'string',
        'free_defined_attribute07' => 'string',
        'free_defined_attribute08' => 'string',
        'free_defined_attribute09' => 'string',
        'free_defined_attribute10' => 'string',
        'order_is_blocked_for_customer' => 'string',
        'posting_is_blocked' => 'bool',
        'supplier' => 'string',
        'customer_corporate_group' => 'string',
        'fiscal_address' => 'string',
        'industry_code1' => 'string',
        'industry_code2' => 'string',
        'industry_code3' => 'string',
        'industry_code4' => 'string',
        'industry_code5' => 'string',
        'nielsen_region' => 'string',
        'payment_reason' => 'string',
        'responsible_type' => 'string',
        'tax_number_type' => 'string',
        'deletion_indicator' => 'bool',
        'express_train_station_name' => 'string',
        'train_station_name' => 'string',
        'city_code' => 'string',
        'county' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorization_group' => null,
        'billing_is_blocked_for_customer' => null,
        'customer_account_group' => null,
        'customer_classification' => null,
        'delivery_is_blocked' => null,
        'free_defined_attribute01' => null,
        'free_defined_attribute02' => null,
        'free_defined_attribute03' => null,
        'free_defined_attribute04' => null,
        'free_defined_attribute05' => null,
        'free_defined_attribute06' => null,
        'free_defined_attribute07' => null,
        'free_defined_attribute08' => null,
        'free_defined_attribute09' => null,
        'free_defined_attribute10' => null,
        'order_is_blocked_for_customer' => null,
        'posting_is_blocked' => null,
        'supplier' => null,
        'customer_corporate_group' => null,
        'fiscal_address' => null,
        'industry_code1' => null,
        'industry_code2' => null,
        'industry_code3' => null,
        'industry_code4' => null,
        'industry_code5' => null,
        'nielsen_region' => null,
        'payment_reason' => null,
        'responsible_type' => null,
        'tax_number_type' => null,
        'deletion_indicator' => null,
        'express_train_station_name' => null,
        'train_station_name' => null,
        'city_code' => null,
        'county' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorization_group' => true,
		'billing_is_blocked_for_customer' => true,
		'customer_account_group' => true,
		'customer_classification' => true,
		'delivery_is_blocked' => true,
		'free_defined_attribute01' => true,
		'free_defined_attribute02' => true,
		'free_defined_attribute03' => true,
		'free_defined_attribute04' => true,
		'free_defined_attribute05' => true,
		'free_defined_attribute06' => true,
		'free_defined_attribute07' => true,
		'free_defined_attribute08' => true,
		'free_defined_attribute09' => true,
		'free_defined_attribute10' => true,
		'order_is_blocked_for_customer' => true,
		'posting_is_blocked' => true,
		'supplier' => true,
		'customer_corporate_group' => true,
		'fiscal_address' => true,
		'industry_code1' => true,
		'industry_code2' => true,
		'industry_code3' => true,
		'industry_code4' => true,
		'industry_code5' => true,
		'nielsen_region' => true,
		'payment_reason' => true,
		'responsible_type' => true,
		'tax_number_type' => true,
		'deletion_indicator' => true,
		'express_train_station_name' => true,
		'train_station_name' => true,
		'city_code' => true,
		'county' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_group' => 'AuthorizationGroup',
        'billing_is_blocked_for_customer' => 'BillingIsBlockedForCustomer',
        'customer_account_group' => 'CustomerAccountGroup',
        'customer_classification' => 'CustomerClassification',
        'delivery_is_blocked' => 'DeliveryIsBlocked',
        'free_defined_attribute01' => 'FreeDefinedAttribute01',
        'free_defined_attribute02' => 'FreeDefinedAttribute02',
        'free_defined_attribute03' => 'FreeDefinedAttribute03',
        'free_defined_attribute04' => 'FreeDefinedAttribute04',
        'free_defined_attribute05' => 'FreeDefinedAttribute05',
        'free_defined_attribute06' => 'FreeDefinedAttribute06',
        'free_defined_attribute07' => 'FreeDefinedAttribute07',
        'free_defined_attribute08' => 'FreeDefinedAttribute08',
        'free_defined_attribute09' => 'FreeDefinedAttribute09',
        'free_defined_attribute10' => 'FreeDefinedAttribute10',
        'order_is_blocked_for_customer' => 'OrderIsBlockedForCustomer',
        'posting_is_blocked' => 'PostingIsBlocked',
        'supplier' => 'Supplier',
        'customer_corporate_group' => 'CustomerCorporateGroup',
        'fiscal_address' => 'FiscalAddress',
        'industry_code1' => 'IndustryCode1',
        'industry_code2' => 'IndustryCode2',
        'industry_code3' => 'IndustryCode3',
        'industry_code4' => 'IndustryCode4',
        'industry_code5' => 'IndustryCode5',
        'nielsen_region' => 'NielsenRegion',
        'payment_reason' => 'PaymentReason',
        'responsible_type' => 'ResponsibleType',
        'tax_number_type' => 'TaxNumberType',
        'deletion_indicator' => 'DeletionIndicator',
        'express_train_station_name' => 'ExpressTrainStationName',
        'train_station_name' => 'TrainStationName',
        'city_code' => 'CityCode',
        'county' => 'County'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_group' => 'setAuthorizationGroup',
        'billing_is_blocked_for_customer' => 'setBillingIsBlockedForCustomer',
        'customer_account_group' => 'setCustomerAccountGroup',
        'customer_classification' => 'setCustomerClassification',
        'delivery_is_blocked' => 'setDeliveryIsBlocked',
        'free_defined_attribute01' => 'setFreeDefinedAttribute01',
        'free_defined_attribute02' => 'setFreeDefinedAttribute02',
        'free_defined_attribute03' => 'setFreeDefinedAttribute03',
        'free_defined_attribute04' => 'setFreeDefinedAttribute04',
        'free_defined_attribute05' => 'setFreeDefinedAttribute05',
        'free_defined_attribute06' => 'setFreeDefinedAttribute06',
        'free_defined_attribute07' => 'setFreeDefinedAttribute07',
        'free_defined_attribute08' => 'setFreeDefinedAttribute08',
        'free_defined_attribute09' => 'setFreeDefinedAttribute09',
        'free_defined_attribute10' => 'setFreeDefinedAttribute10',
        'order_is_blocked_for_customer' => 'setOrderIsBlockedForCustomer',
        'posting_is_blocked' => 'setPostingIsBlocked',
        'supplier' => 'setSupplier',
        'customer_corporate_group' => 'setCustomerCorporateGroup',
        'fiscal_address' => 'setFiscalAddress',
        'industry_code1' => 'setIndustryCode1',
        'industry_code2' => 'setIndustryCode2',
        'industry_code3' => 'setIndustryCode3',
        'industry_code4' => 'setIndustryCode4',
        'industry_code5' => 'setIndustryCode5',
        'nielsen_region' => 'setNielsenRegion',
        'payment_reason' => 'setPaymentReason',
        'responsible_type' => 'setResponsibleType',
        'tax_number_type' => 'setTaxNumberType',
        'deletion_indicator' => 'setDeletionIndicator',
        'express_train_station_name' => 'setExpressTrainStationName',
        'train_station_name' => 'setTrainStationName',
        'city_code' => 'setCityCode',
        'county' => 'setCounty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_group' => 'getAuthorizationGroup',
        'billing_is_blocked_for_customer' => 'getBillingIsBlockedForCustomer',
        'customer_account_group' => 'getCustomerAccountGroup',
        'customer_classification' => 'getCustomerClassification',
        'delivery_is_blocked' => 'getDeliveryIsBlocked',
        'free_defined_attribute01' => 'getFreeDefinedAttribute01',
        'free_defined_attribute02' => 'getFreeDefinedAttribute02',
        'free_defined_attribute03' => 'getFreeDefinedAttribute03',
        'free_defined_attribute04' => 'getFreeDefinedAttribute04',
        'free_defined_attribute05' => 'getFreeDefinedAttribute05',
        'free_defined_attribute06' => 'getFreeDefinedAttribute06',
        'free_defined_attribute07' => 'getFreeDefinedAttribute07',
        'free_defined_attribute08' => 'getFreeDefinedAttribute08',
        'free_defined_attribute09' => 'getFreeDefinedAttribute09',
        'free_defined_attribute10' => 'getFreeDefinedAttribute10',
        'order_is_blocked_for_customer' => 'getOrderIsBlockedForCustomer',
        'posting_is_blocked' => 'getPostingIsBlocked',
        'supplier' => 'getSupplier',
        'customer_corporate_group' => 'getCustomerCorporateGroup',
        'fiscal_address' => 'getFiscalAddress',
        'industry_code1' => 'getIndustryCode1',
        'industry_code2' => 'getIndustryCode2',
        'industry_code3' => 'getIndustryCode3',
        'industry_code4' => 'getIndustryCode4',
        'industry_code5' => 'getIndustryCode5',
        'nielsen_region' => 'getNielsenRegion',
        'payment_reason' => 'getPaymentReason',
        'responsible_type' => 'getResponsibleType',
        'tax_number_type' => 'getTaxNumberType',
        'deletion_indicator' => 'getDeletionIndicator',
        'express_train_station_name' => 'getExpressTrainStationName',
        'train_station_name' => 'getTrainStationName',
        'city_code' => 'getCityCode',
        'county' => 'getCounty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authorization_group', $data ?? [], null);
        $this->setIfExists('billing_is_blocked_for_customer', $data ?? [], null);
        $this->setIfExists('customer_account_group', $data ?? [], null);
        $this->setIfExists('customer_classification', $data ?? [], null);
        $this->setIfExists('delivery_is_blocked', $data ?? [], null);
        $this->setIfExists('free_defined_attribute01', $data ?? [], null);
        $this->setIfExists('free_defined_attribute02', $data ?? [], null);
        $this->setIfExists('free_defined_attribute03', $data ?? [], null);
        $this->setIfExists('free_defined_attribute04', $data ?? [], null);
        $this->setIfExists('free_defined_attribute05', $data ?? [], null);
        $this->setIfExists('free_defined_attribute06', $data ?? [], null);
        $this->setIfExists('free_defined_attribute07', $data ?? [], null);
        $this->setIfExists('free_defined_attribute08', $data ?? [], null);
        $this->setIfExists('free_defined_attribute09', $data ?? [], null);
        $this->setIfExists('free_defined_attribute10', $data ?? [], null);
        $this->setIfExists('order_is_blocked_for_customer', $data ?? [], null);
        $this->setIfExists('posting_is_blocked', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('customer_corporate_group', $data ?? [], null);
        $this->setIfExists('fiscal_address', $data ?? [], null);
        $this->setIfExists('industry_code1', $data ?? [], null);
        $this->setIfExists('industry_code2', $data ?? [], null);
        $this->setIfExists('industry_code3', $data ?? [], null);
        $this->setIfExists('industry_code4', $data ?? [], null);
        $this->setIfExists('industry_code5', $data ?? [], null);
        $this->setIfExists('nielsen_region', $data ?? [], null);
        $this->setIfExists('payment_reason', $data ?? [], null);
        $this->setIfExists('responsible_type', $data ?? [], null);
        $this->setIfExists('tax_number_type', $data ?? [], null);
        $this->setIfExists('deletion_indicator', $data ?? [], null);
        $this->setIfExists('express_train_station_name', $data ?? [], null);
        $this->setIfExists('train_station_name', $data ?? [], null);
        $this->setIfExists('city_code', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['authorization_group']) && (mb_strlen($this->container['authorization_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'authorization_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['billing_is_blocked_for_customer']) && (mb_strlen($this->container['billing_is_blocked_for_customer']) > 2)) {
            $invalidProperties[] = "invalid value for 'billing_is_blocked_for_customer', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_account_group']) && (mb_strlen($this->container['customer_account_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_account_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['customer_classification']) && (mb_strlen($this->container['customer_classification']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_classification', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_is_blocked']) && (mb_strlen($this->container['delivery_is_blocked']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_is_blocked', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['free_defined_attribute01']) && (mb_strlen($this->container['free_defined_attribute01']) > 2)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute01', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['free_defined_attribute02']) && (mb_strlen($this->container['free_defined_attribute02']) > 2)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute02', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['free_defined_attribute03']) && (mb_strlen($this->container['free_defined_attribute03']) > 2)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute03', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['free_defined_attribute04']) && (mb_strlen($this->container['free_defined_attribute04']) > 2)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute04', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['free_defined_attribute05']) && (mb_strlen($this->container['free_defined_attribute05']) > 2)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute05', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['free_defined_attribute06']) && (mb_strlen($this->container['free_defined_attribute06']) > 3)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute06', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['free_defined_attribute07']) && (mb_strlen($this->container['free_defined_attribute07']) > 3)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute07', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['free_defined_attribute08']) && (mb_strlen($this->container['free_defined_attribute08']) > 3)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute08', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['free_defined_attribute09']) && (mb_strlen($this->container['free_defined_attribute09']) > 3)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute09', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['free_defined_attribute10']) && (mb_strlen($this->container['free_defined_attribute10']) > 3)) {
            $invalidProperties[] = "invalid value for 'free_defined_attribute10', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['order_is_blocked_for_customer']) && (mb_strlen($this->container['order_is_blocked_for_customer']) > 2)) {
            $invalidProperties[] = "invalid value for 'order_is_blocked_for_customer', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['customer_corporate_group']) && (mb_strlen($this->container['customer_corporate_group']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer_corporate_group', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['fiscal_address']) && (mb_strlen($this->container['fiscal_address']) > 10)) {
            $invalidProperties[] = "invalid value for 'fiscal_address', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['industry_code1']) && (mb_strlen($this->container['industry_code1']) > 10)) {
            $invalidProperties[] = "invalid value for 'industry_code1', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['industry_code2']) && (mb_strlen($this->container['industry_code2']) > 10)) {
            $invalidProperties[] = "invalid value for 'industry_code2', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['industry_code3']) && (mb_strlen($this->container['industry_code3']) > 10)) {
            $invalidProperties[] = "invalid value for 'industry_code3', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['industry_code4']) && (mb_strlen($this->container['industry_code4']) > 10)) {
            $invalidProperties[] = "invalid value for 'industry_code4', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['industry_code5']) && (mb_strlen($this->container['industry_code5']) > 10)) {
            $invalidProperties[] = "invalid value for 'industry_code5', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['nielsen_region']) && (mb_strlen($this->container['nielsen_region']) > 2)) {
            $invalidProperties[] = "invalid value for 'nielsen_region', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['payment_reason']) && (mb_strlen($this->container['payment_reason']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_reason', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['responsible_type']) && (mb_strlen($this->container['responsible_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'responsible_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['tax_number_type']) && (mb_strlen($this->container['tax_number_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'tax_number_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['express_train_station_name']) && (mb_strlen($this->container['express_train_station_name']) > 25)) {
            $invalidProperties[] = "invalid value for 'express_train_station_name', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['train_station_name']) && (mb_strlen($this->container['train_station_name']) > 25)) {
            $invalidProperties[] = "invalid value for 'train_station_name', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['city_code']) && (mb_strlen($this->container['city_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'city_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 3)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_group
     *
     * @return string|null
     */
    public function getAuthorizationGroup()
    {
        return $this->container['authorization_group'];
    }

    /**
     * Sets authorization_group
     *
     * @param string|null $authorization_group Authorization Group
     *
     * @return self
     */
    public function setAuthorizationGroup($authorization_group)
    {
        if (is_null($authorization_group)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_group) && (mb_strlen($authorization_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $authorization_group when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['authorization_group'] = $authorization_group;

        return $this;
    }

    /**
     * Gets billing_is_blocked_for_customer
     *
     * @return string|null
     */
    public function getBillingIsBlockedForCustomer()
    {
        return $this->container['billing_is_blocked_for_customer'];
    }

    /**
     * Sets billing_is_blocked_for_customer
     *
     * @param string|null $billing_is_blocked_for_customer Central billing block for customer
     *
     * @return self
     */
    public function setBillingIsBlockedForCustomer($billing_is_blocked_for_customer)
    {
        if (is_null($billing_is_blocked_for_customer)) {
            array_push($this->openAPINullablesSetToNull, 'billing_is_blocked_for_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_is_blocked_for_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_is_blocked_for_customer) && (mb_strlen($billing_is_blocked_for_customer) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billing_is_blocked_for_customer when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['billing_is_blocked_for_customer'] = $billing_is_blocked_for_customer;

        return $this;
    }

    /**
     * Gets customer_account_group
     *
     * @return string|null
     */
    public function getCustomerAccountGroup()
    {
        return $this->container['customer_account_group'];
    }

    /**
     * Sets customer_account_group
     *
     * @param string|null $customer_account_group Customer Account Group
     *
     * @return self
     */
    public function setCustomerAccountGroup($customer_account_group)
    {
        if (is_null($customer_account_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_account_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_account_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_account_group) && (mb_strlen($customer_account_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_group when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['customer_account_group'] = $customer_account_group;

        return $this;
    }

    /**
     * Gets customer_classification
     *
     * @return string|null
     */
    public function getCustomerClassification()
    {
        return $this->container['customer_classification'];
    }

    /**
     * Sets customer_classification
     *
     * @param string|null $customer_classification Customer Classification
     *
     * @return self
     */
    public function setCustomerClassification($customer_classification)
    {
        if (is_null($customer_classification)) {
            array_push($this->openAPINullablesSetToNull, 'customer_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_classification) && (mb_strlen($customer_classification) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_classification when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_classification'] = $customer_classification;

        return $this;
    }

    /**
     * Gets delivery_is_blocked
     *
     * @return string|null
     */
    public function getDeliveryIsBlocked()
    {
        return $this->container['delivery_is_blocked'];
    }

    /**
     * Sets delivery_is_blocked
     *
     * @param string|null $delivery_is_blocked Central delivery block for the customer
     *
     * @return self
     */
    public function setDeliveryIsBlocked($delivery_is_blocked)
    {
        if (is_null($delivery_is_blocked)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_is_blocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_is_blocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_is_blocked) && (mb_strlen($delivery_is_blocked) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_is_blocked when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['delivery_is_blocked'] = $delivery_is_blocked;

        return $this;
    }

    /**
     * Gets free_defined_attribute01
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute01()
    {
        return $this->container['free_defined_attribute01'];
    }

    /**
     * Sets free_defined_attribute01
     *
     * @param string|null $free_defined_attribute01 free_defined_attribute01
     *
     * @return self
     */
    public function setFreeDefinedAttribute01($free_defined_attribute01)
    {
        if (is_null($free_defined_attribute01)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute01');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute01', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute01) && (mb_strlen($free_defined_attribute01) > 2)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute01 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['free_defined_attribute01'] = $free_defined_attribute01;

        return $this;
    }

    /**
     * Gets free_defined_attribute02
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute02()
    {
        return $this->container['free_defined_attribute02'];
    }

    /**
     * Sets free_defined_attribute02
     *
     * @param string|null $free_defined_attribute02 free_defined_attribute02
     *
     * @return self
     */
    public function setFreeDefinedAttribute02($free_defined_attribute02)
    {
        if (is_null($free_defined_attribute02)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute02');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute02', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute02) && (mb_strlen($free_defined_attribute02) > 2)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute02 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['free_defined_attribute02'] = $free_defined_attribute02;

        return $this;
    }

    /**
     * Gets free_defined_attribute03
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute03()
    {
        return $this->container['free_defined_attribute03'];
    }

    /**
     * Sets free_defined_attribute03
     *
     * @param string|null $free_defined_attribute03 free_defined_attribute03
     *
     * @return self
     */
    public function setFreeDefinedAttribute03($free_defined_attribute03)
    {
        if (is_null($free_defined_attribute03)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute03');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute03', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute03) && (mb_strlen($free_defined_attribute03) > 2)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute03 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['free_defined_attribute03'] = $free_defined_attribute03;

        return $this;
    }

    /**
     * Gets free_defined_attribute04
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute04()
    {
        return $this->container['free_defined_attribute04'];
    }

    /**
     * Sets free_defined_attribute04
     *
     * @param string|null $free_defined_attribute04 free_defined_attribute04
     *
     * @return self
     */
    public function setFreeDefinedAttribute04($free_defined_attribute04)
    {
        if (is_null($free_defined_attribute04)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute04');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute04', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute04) && (mb_strlen($free_defined_attribute04) > 2)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute04 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['free_defined_attribute04'] = $free_defined_attribute04;

        return $this;
    }

    /**
     * Gets free_defined_attribute05
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute05()
    {
        return $this->container['free_defined_attribute05'];
    }

    /**
     * Sets free_defined_attribute05
     *
     * @param string|null $free_defined_attribute05 free_defined_attribute05
     *
     * @return self
     */
    public function setFreeDefinedAttribute05($free_defined_attribute05)
    {
        if (is_null($free_defined_attribute05)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute05');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute05', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute05) && (mb_strlen($free_defined_attribute05) > 2)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute05 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['free_defined_attribute05'] = $free_defined_attribute05;

        return $this;
    }

    /**
     * Gets free_defined_attribute06
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute06()
    {
        return $this->container['free_defined_attribute06'];
    }

    /**
     * Sets free_defined_attribute06
     *
     * @param string|null $free_defined_attribute06 free_defined_attribute06
     *
     * @return self
     */
    public function setFreeDefinedAttribute06($free_defined_attribute06)
    {
        if (is_null($free_defined_attribute06)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute06');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute06', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute06) && (mb_strlen($free_defined_attribute06) > 3)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute06 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['free_defined_attribute06'] = $free_defined_attribute06;

        return $this;
    }

    /**
     * Gets free_defined_attribute07
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute07()
    {
        return $this->container['free_defined_attribute07'];
    }

    /**
     * Sets free_defined_attribute07
     *
     * @param string|null $free_defined_attribute07 free_defined_attribute07
     *
     * @return self
     */
    public function setFreeDefinedAttribute07($free_defined_attribute07)
    {
        if (is_null($free_defined_attribute07)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute07');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute07', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute07) && (mb_strlen($free_defined_attribute07) > 3)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute07 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['free_defined_attribute07'] = $free_defined_attribute07;

        return $this;
    }

    /**
     * Gets free_defined_attribute08
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute08()
    {
        return $this->container['free_defined_attribute08'];
    }

    /**
     * Sets free_defined_attribute08
     *
     * @param string|null $free_defined_attribute08 free_defined_attribute08
     *
     * @return self
     */
    public function setFreeDefinedAttribute08($free_defined_attribute08)
    {
        if (is_null($free_defined_attribute08)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute08');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute08', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute08) && (mb_strlen($free_defined_attribute08) > 3)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute08 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['free_defined_attribute08'] = $free_defined_attribute08;

        return $this;
    }

    /**
     * Gets free_defined_attribute09
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute09()
    {
        return $this->container['free_defined_attribute09'];
    }

    /**
     * Sets free_defined_attribute09
     *
     * @param string|null $free_defined_attribute09 free_defined_attribute09
     *
     * @return self
     */
    public function setFreeDefinedAttribute09($free_defined_attribute09)
    {
        if (is_null($free_defined_attribute09)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute09');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute09', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute09) && (mb_strlen($free_defined_attribute09) > 3)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute09 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['free_defined_attribute09'] = $free_defined_attribute09;

        return $this;
    }

    /**
     * Gets free_defined_attribute10
     *
     * @return string|null
     */
    public function getFreeDefinedAttribute10()
    {
        return $this->container['free_defined_attribute10'];
    }

    /**
     * Sets free_defined_attribute10
     *
     * @param string|null $free_defined_attribute10 free_defined_attribute10
     *
     * @return self
     */
    public function setFreeDefinedAttribute10($free_defined_attribute10)
    {
        if (is_null($free_defined_attribute10)) {
            array_push($this->openAPINullablesSetToNull, 'free_defined_attribute10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('free_defined_attribute10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($free_defined_attribute10) && (mb_strlen($free_defined_attribute10) > 3)) {
            throw new \InvalidArgumentException('invalid length for $free_defined_attribute10 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['free_defined_attribute10'] = $free_defined_attribute10;

        return $this;
    }

    /**
     * Gets order_is_blocked_for_customer
     *
     * @return string|null
     */
    public function getOrderIsBlockedForCustomer()
    {
        return $this->container['order_is_blocked_for_customer'];
    }

    /**
     * Sets order_is_blocked_for_customer
     *
     * @param string|null $order_is_blocked_for_customer Central Order Block for Customer
     *
     * @return self
     */
    public function setOrderIsBlockedForCustomer($order_is_blocked_for_customer)
    {
        if (is_null($order_is_blocked_for_customer)) {
            array_push($this->openAPINullablesSetToNull, 'order_is_blocked_for_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_is_blocked_for_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_is_blocked_for_customer) && (mb_strlen($order_is_blocked_for_customer) > 2)) {
            throw new \InvalidArgumentException('invalid length for $order_is_blocked_for_customer when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['order_is_blocked_for_customer'] = $order_is_blocked_for_customer;

        return $this;
    }

    /**
     * Gets posting_is_blocked
     *
     * @return bool|null
     */
    public function getPostingIsBlocked()
    {
        return $this->container['posting_is_blocked'];
    }

    /**
     * Sets posting_is_blocked
     *
     * @param bool|null $posting_is_blocked Central Posting Block
     *
     * @return self
     */
    public function setPostingIsBlocked($posting_is_blocked)
    {
        if (is_null($posting_is_blocked)) {
            array_push($this->openAPINullablesSetToNull, 'posting_is_blocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('posting_is_blocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['posting_is_blocked'] = $posting_is_blocked;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier Account Number of Supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            array_push($this->openAPINullablesSetToNull, 'supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier) && (mb_strlen($supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets customer_corporate_group
     *
     * @return string|null
     */
    public function getCustomerCorporateGroup()
    {
        return $this->container['customer_corporate_group'];
    }

    /**
     * Sets customer_corporate_group
     *
     * @param string|null $customer_corporate_group customer_corporate_group
     *
     * @return self
     */
    public function setCustomerCorporateGroup($customer_corporate_group)
    {
        if (is_null($customer_corporate_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_corporate_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_corporate_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_corporate_group) && (mb_strlen($customer_corporate_group) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer_corporate_group when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['customer_corporate_group'] = $customer_corporate_group;

        return $this;
    }

    /**
     * Gets fiscal_address
     *
     * @return string|null
     */
    public function getFiscalAddress()
    {
        return $this->container['fiscal_address'];
    }

    /**
     * Sets fiscal_address
     *
     * @param string|null $fiscal_address Account number of the master record with the fiscal address
     *
     * @return self
     */
    public function setFiscalAddress($fiscal_address)
    {
        if (is_null($fiscal_address)) {
            array_push($this->openAPINullablesSetToNull, 'fiscal_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fiscal_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fiscal_address) && (mb_strlen($fiscal_address) > 10)) {
            throw new \InvalidArgumentException('invalid length for $fiscal_address when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['fiscal_address'] = $fiscal_address;

        return $this;
    }

    /**
     * Gets industry_code1
     *
     * @return string|null
     */
    public function getIndustryCode1()
    {
        return $this->container['industry_code1'];
    }

    /**
     * Sets industry_code1
     *
     * @param string|null $industry_code1 industry_code1
     *
     * @return self
     */
    public function setIndustryCode1($industry_code1)
    {
        if (is_null($industry_code1)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry_code1) && (mb_strlen($industry_code1) > 10)) {
            throw new \InvalidArgumentException('invalid length for $industry_code1 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['industry_code1'] = $industry_code1;

        return $this;
    }

    /**
     * Gets industry_code2
     *
     * @return string|null
     */
    public function getIndustryCode2()
    {
        return $this->container['industry_code2'];
    }

    /**
     * Sets industry_code2
     *
     * @param string|null $industry_code2 industry_code2
     *
     * @return self
     */
    public function setIndustryCode2($industry_code2)
    {
        if (is_null($industry_code2)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry_code2) && (mb_strlen($industry_code2) > 10)) {
            throw new \InvalidArgumentException('invalid length for $industry_code2 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['industry_code2'] = $industry_code2;

        return $this;
    }

    /**
     * Gets industry_code3
     *
     * @return string|null
     */
    public function getIndustryCode3()
    {
        return $this->container['industry_code3'];
    }

    /**
     * Sets industry_code3
     *
     * @param string|null $industry_code3 industry_code3
     *
     * @return self
     */
    public function setIndustryCode3($industry_code3)
    {
        if (is_null($industry_code3)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry_code3) && (mb_strlen($industry_code3) > 10)) {
            throw new \InvalidArgumentException('invalid length for $industry_code3 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['industry_code3'] = $industry_code3;

        return $this;
    }

    /**
     * Gets industry_code4
     *
     * @return string|null
     */
    public function getIndustryCode4()
    {
        return $this->container['industry_code4'];
    }

    /**
     * Sets industry_code4
     *
     * @param string|null $industry_code4 industry_code4
     *
     * @return self
     */
    public function setIndustryCode4($industry_code4)
    {
        if (is_null($industry_code4)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry_code4) && (mb_strlen($industry_code4) > 10)) {
            throw new \InvalidArgumentException('invalid length for $industry_code4 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['industry_code4'] = $industry_code4;

        return $this;
    }

    /**
     * Gets industry_code5
     *
     * @return string|null
     */
    public function getIndustryCode5()
    {
        return $this->container['industry_code5'];
    }

    /**
     * Sets industry_code5
     *
     * @param string|null $industry_code5 industry_code5
     *
     * @return self
     */
    public function setIndustryCode5($industry_code5)
    {
        if (is_null($industry_code5)) {
            array_push($this->openAPINullablesSetToNull, 'industry_code5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_code5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry_code5) && (mb_strlen($industry_code5) > 10)) {
            throw new \InvalidArgumentException('invalid length for $industry_code5 when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['industry_code5'] = $industry_code5;

        return $this;
    }

    /**
     * Gets nielsen_region
     *
     * @return string|null
     */
    public function getNielsenRegion()
    {
        return $this->container['nielsen_region'];
    }

    /**
     * Sets nielsen_region
     *
     * @param string|null $nielsen_region Nielsen ID
     *
     * @return self
     */
    public function setNielsenRegion($nielsen_region)
    {
        if (is_null($nielsen_region)) {
            array_push($this->openAPINullablesSetToNull, 'nielsen_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nielsen_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nielsen_region) && (mb_strlen($nielsen_region) > 2)) {
            throw new \InvalidArgumentException('invalid length for $nielsen_region when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['nielsen_region'] = $nielsen_region;

        return $this;
    }

    /**
     * Gets payment_reason
     *
     * @return string|null
     */
    public function getPaymentReason()
    {
        return $this->container['payment_reason'];
    }

    /**
     * Sets payment_reason
     *
     * @param string|null $payment_reason payment_reason
     *
     * @return self
     */
    public function setPaymentReason($payment_reason)
    {
        if (is_null($payment_reason)) {
            array_push($this->openAPINullablesSetToNull, 'payment_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_reason) && (mb_strlen($payment_reason) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_reason when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['payment_reason'] = $payment_reason;

        return $this;
    }

    /**
     * Gets responsible_type
     *
     * @return string|null
     */
    public function getResponsibleType()
    {
        return $this->container['responsible_type'];
    }

    /**
     * Sets responsible_type
     *
     * @param string|null $responsible_type responsible_type
     *
     * @return self
     */
    public function setResponsibleType($responsible_type)
    {
        if (is_null($responsible_type)) {
            array_push($this->openAPINullablesSetToNull, 'responsible_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('responsible_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($responsible_type) && (mb_strlen($responsible_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $responsible_type when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['responsible_type'] = $responsible_type;

        return $this;
    }

    /**
     * Gets tax_number_type
     *
     * @return string|null
     */
    public function getTaxNumberType()
    {
        return $this->container['tax_number_type'];
    }

    /**
     * Sets tax_number_type
     *
     * @param string|null $tax_number_type tax_number_type
     *
     * @return self
     */
    public function setTaxNumberType($tax_number_type)
    {
        if (is_null($tax_number_type)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tax_number_type) && (mb_strlen($tax_number_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tax_number_type when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['tax_number_type'] = $tax_number_type;

        return $this;
    }

    /**
     * Gets deletion_indicator
     *
     * @return bool|null
     */
    public function getDeletionIndicator()
    {
        return $this->container['deletion_indicator'];
    }

    /**
     * Sets deletion_indicator
     *
     * @param bool|null $deletion_indicator Central Deletion Flag for Master Record
     *
     * @return self
     */
    public function setDeletionIndicator($deletion_indicator)
    {
        if (is_null($deletion_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'deletion_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletion_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletion_indicator'] = $deletion_indicator;

        return $this;
    }

    /**
     * Gets express_train_station_name
     *
     * @return string|null
     */
    public function getExpressTrainStationName()
    {
        return $this->container['express_train_station_name'];
    }

    /**
     * Sets express_train_station_name
     *
     * @param string|null $express_train_station_name Express train station
     *
     * @return self
     */
    public function setExpressTrainStationName($express_train_station_name)
    {
        if (is_null($express_train_station_name)) {
            array_push($this->openAPINullablesSetToNull, 'express_train_station_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('express_train_station_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($express_train_station_name) && (mb_strlen($express_train_station_name) > 25)) {
            throw new \InvalidArgumentException('invalid length for $express_train_station_name when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 25.');
        }

        $this->container['express_train_station_name'] = $express_train_station_name;

        return $this;
    }

    /**
     * Gets train_station_name
     *
     * @return string|null
     */
    public function getTrainStationName()
    {
        return $this->container['train_station_name'];
    }

    /**
     * Sets train_station_name
     *
     * @param string|null $train_station_name train_station_name
     *
     * @return self
     */
    public function setTrainStationName($train_station_name)
    {
        if (is_null($train_station_name)) {
            array_push($this->openAPINullablesSetToNull, 'train_station_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('train_station_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($train_station_name) && (mb_strlen($train_station_name) > 25)) {
            throw new \InvalidArgumentException('invalid length for $train_station_name when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 25.');
        }

        $this->container['train_station_name'] = $train_station_name;

        return $this;
    }

    /**
     * Gets city_code
     *
     * @return string|null
     */
    public function getCityCode()
    {
        return $this->container['city_code'];
    }

    /**
     * Sets city_code
     *
     * @param string|null $city_code city_code
     *
     * @return self
     */
    public function setCityCode($city_code)
    {
        if (is_null($city_code)) {
            array_push($this->openAPINullablesSetToNull, 'city_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city_code) && (mb_strlen($city_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $city_code when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['city_code'] = $city_code;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county county
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (is_null($county)) {
            array_push($this->openAPINullablesSetToNull, 'county');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('county', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($county) && (mb_strlen($county) > 3)) {
            throw new \InvalidArgumentException('invalid length for $county when calling APIBUSINESSPARTNERACustomerTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['county'] = $county;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


