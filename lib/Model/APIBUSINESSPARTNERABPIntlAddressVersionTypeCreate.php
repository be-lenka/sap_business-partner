<?php
/**
 * APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BPIntlAddressVersionType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_partner' => 'string',
        'address_id' => 'string',
        'address_representation_code' => 'string',
        'address_search_term1' => 'string',
        'address_search_term2' => 'string',
        'care_of_name' => 'string',
        'city_name' => 'string',
        'district_name' => 'string',
        'form_of_address' => 'string',
        'house_number' => 'string',
        'house_number_supplement_text' => 'string',
        'organization_name1' => 'string',
        'organization_name2' => 'string',
        'organization_name3' => 'string',
        'organization_name4' => 'string',
        'person_family_name' => 'string',
        'person_given_name' => 'string',
        'po_box_deviating_city_name' => 'string',
        'po_box_lobby_name' => 'string',
        'secondary_region_name' => 'string',
        'street_name' => 'string',
        'street_prefix_name1' => 'string',
        'street_prefix_name2' => 'string',
        'street_suffix_name1' => 'string',
        'street_suffix_name2' => 'string',
        'tertiary_region_name' => 'string',
        'village_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_partner' => null,
        'address_id' => null,
        'address_representation_code' => null,
        'address_search_term1' => null,
        'address_search_term2' => null,
        'care_of_name' => null,
        'city_name' => null,
        'district_name' => null,
        'form_of_address' => null,
        'house_number' => null,
        'house_number_supplement_text' => null,
        'organization_name1' => null,
        'organization_name2' => null,
        'organization_name3' => null,
        'organization_name4' => null,
        'person_family_name' => null,
        'person_given_name' => null,
        'po_box_deviating_city_name' => null,
        'po_box_lobby_name' => null,
        'secondary_region_name' => null,
        'street_name' => null,
        'street_prefix_name1' => null,
        'street_prefix_name2' => null,
        'street_suffix_name1' => null,
        'street_suffix_name2' => null,
        'tertiary_region_name' => null,
        'village_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_partner' => false,
		'address_id' => false,
		'address_representation_code' => false,
		'address_search_term1' => true,
		'address_search_term2' => true,
		'care_of_name' => true,
		'city_name' => true,
		'district_name' => true,
		'form_of_address' => true,
		'house_number' => true,
		'house_number_supplement_text' => true,
		'organization_name1' => true,
		'organization_name2' => true,
		'organization_name3' => true,
		'organization_name4' => true,
		'person_family_name' => true,
		'person_given_name' => true,
		'po_box_deviating_city_name' => true,
		'po_box_lobby_name' => true,
		'secondary_region_name' => true,
		'street_name' => true,
		'street_prefix_name1' => true,
		'street_prefix_name2' => true,
		'street_suffix_name1' => true,
		'street_suffix_name2' => true,
		'tertiary_region_name' => true,
		'village_name' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_partner' => 'BusinessPartner',
        'address_id' => 'AddressID',
        'address_representation_code' => 'AddressRepresentationCode',
        'address_search_term1' => 'AddressSearchTerm1',
        'address_search_term2' => 'AddressSearchTerm2',
        'care_of_name' => 'CareOfName',
        'city_name' => 'CityName',
        'district_name' => 'DistrictName',
        'form_of_address' => 'FormOfAddress',
        'house_number' => 'HouseNumber',
        'house_number_supplement_text' => 'HouseNumberSupplementText',
        'organization_name1' => 'OrganizationName1',
        'organization_name2' => 'OrganizationName2',
        'organization_name3' => 'OrganizationName3',
        'organization_name4' => 'OrganizationName4',
        'person_family_name' => 'PersonFamilyName',
        'person_given_name' => 'PersonGivenName',
        'po_box_deviating_city_name' => 'POBoxDeviatingCityName',
        'po_box_lobby_name' => 'POBoxLobbyName',
        'secondary_region_name' => 'SecondaryRegionName',
        'street_name' => 'StreetName',
        'street_prefix_name1' => 'StreetPrefixName1',
        'street_prefix_name2' => 'StreetPrefixName2',
        'street_suffix_name1' => 'StreetSuffixName1',
        'street_suffix_name2' => 'StreetSuffixName2',
        'tertiary_region_name' => 'TertiaryRegionName',
        'village_name' => 'VillageName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_partner' => 'setBusinessPartner',
        'address_id' => 'setAddressId',
        'address_representation_code' => 'setAddressRepresentationCode',
        'address_search_term1' => 'setAddressSearchTerm1',
        'address_search_term2' => 'setAddressSearchTerm2',
        'care_of_name' => 'setCareOfName',
        'city_name' => 'setCityName',
        'district_name' => 'setDistrictName',
        'form_of_address' => 'setFormOfAddress',
        'house_number' => 'setHouseNumber',
        'house_number_supplement_text' => 'setHouseNumberSupplementText',
        'organization_name1' => 'setOrganizationName1',
        'organization_name2' => 'setOrganizationName2',
        'organization_name3' => 'setOrganizationName3',
        'organization_name4' => 'setOrganizationName4',
        'person_family_name' => 'setPersonFamilyName',
        'person_given_name' => 'setPersonGivenName',
        'po_box_deviating_city_name' => 'setPoBoxDeviatingCityName',
        'po_box_lobby_name' => 'setPoBoxLobbyName',
        'secondary_region_name' => 'setSecondaryRegionName',
        'street_name' => 'setStreetName',
        'street_prefix_name1' => 'setStreetPrefixName1',
        'street_prefix_name2' => 'setStreetPrefixName2',
        'street_suffix_name1' => 'setStreetSuffixName1',
        'street_suffix_name2' => 'setStreetSuffixName2',
        'tertiary_region_name' => 'setTertiaryRegionName',
        'village_name' => 'setVillageName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_partner' => 'getBusinessPartner',
        'address_id' => 'getAddressId',
        'address_representation_code' => 'getAddressRepresentationCode',
        'address_search_term1' => 'getAddressSearchTerm1',
        'address_search_term2' => 'getAddressSearchTerm2',
        'care_of_name' => 'getCareOfName',
        'city_name' => 'getCityName',
        'district_name' => 'getDistrictName',
        'form_of_address' => 'getFormOfAddress',
        'house_number' => 'getHouseNumber',
        'house_number_supplement_text' => 'getHouseNumberSupplementText',
        'organization_name1' => 'getOrganizationName1',
        'organization_name2' => 'getOrganizationName2',
        'organization_name3' => 'getOrganizationName3',
        'organization_name4' => 'getOrganizationName4',
        'person_family_name' => 'getPersonFamilyName',
        'person_given_name' => 'getPersonGivenName',
        'po_box_deviating_city_name' => 'getPoBoxDeviatingCityName',
        'po_box_lobby_name' => 'getPoBoxLobbyName',
        'secondary_region_name' => 'getSecondaryRegionName',
        'street_name' => 'getStreetName',
        'street_prefix_name1' => 'getStreetPrefixName1',
        'street_prefix_name2' => 'getStreetPrefixName2',
        'street_suffix_name1' => 'getStreetSuffixName1',
        'street_suffix_name2' => 'getStreetSuffixName2',
        'tertiary_region_name' => 'getTertiaryRegionName',
        'village_name' => 'getVillageName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_partner', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('address_representation_code', $data ?? [], null);
        $this->setIfExists('address_search_term1', $data ?? [], null);
        $this->setIfExists('address_search_term2', $data ?? [], null);
        $this->setIfExists('care_of_name', $data ?? [], null);
        $this->setIfExists('city_name', $data ?? [], null);
        $this->setIfExists('district_name', $data ?? [], null);
        $this->setIfExists('form_of_address', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('house_number_supplement_text', $data ?? [], null);
        $this->setIfExists('organization_name1', $data ?? [], null);
        $this->setIfExists('organization_name2', $data ?? [], null);
        $this->setIfExists('organization_name3', $data ?? [], null);
        $this->setIfExists('organization_name4', $data ?? [], null);
        $this->setIfExists('person_family_name', $data ?? [], null);
        $this->setIfExists('person_given_name', $data ?? [], null);
        $this->setIfExists('po_box_deviating_city_name', $data ?? [], null);
        $this->setIfExists('po_box_lobby_name', $data ?? [], null);
        $this->setIfExists('secondary_region_name', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('street_prefix_name1', $data ?? [], null);
        $this->setIfExists('street_prefix_name2', $data ?? [], null);
        $this->setIfExists('street_suffix_name1', $data ?? [], null);
        $this->setIfExists('street_suffix_name2', $data ?? [], null);
        $this->setIfExists('tertiary_region_name', $data ?? [], null);
        $this->setIfExists('village_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_partner'] === null) {
            $invalidProperties[] = "'business_partner' can't be null";
        }
        if ((mb_strlen($this->container['business_partner']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['address_id'] === null) {
            $invalidProperties[] = "'address_id' can't be null";
        }
        if ((mb_strlen($this->container['address_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'address_id', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['address_representation_code'] === null) {
            $invalidProperties[] = "'address_representation_code' can't be null";
        }
        if ((mb_strlen($this->container['address_representation_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'address_representation_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['address_search_term1']) && (mb_strlen($this->container['address_search_term1']) > 20)) {
            $invalidProperties[] = "invalid value for 'address_search_term1', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['address_search_term2']) && (mb_strlen($this->container['address_search_term2']) > 20)) {
            $invalidProperties[] = "invalid value for 'address_search_term2', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['care_of_name']) && (mb_strlen($this->container['care_of_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'care_of_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['city_name']) && (mb_strlen($this->container['city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['district_name']) && (mb_strlen($this->container['district_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'district_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['form_of_address']) && (mb_strlen($this->container['form_of_address']) > 4)) {
            $invalidProperties[] = "invalid value for 'form_of_address', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['house_number']) && (mb_strlen($this->container['house_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['house_number_supplement_text']) && (mb_strlen($this->container['house_number_supplement_text']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number_supplement_text', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['organization_name1']) && (mb_strlen($this->container['organization_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name2']) && (mb_strlen($this->container['organization_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name3']) && (mb_strlen($this->container['organization_name3']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name3', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name4']) && (mb_strlen($this->container['organization_name4']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name4', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['person_family_name']) && (mb_strlen($this->container['person_family_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'person_family_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['person_given_name']) && (mb_strlen($this->container['person_given_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'person_given_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['po_box_deviating_city_name']) && (mb_strlen($this->container['po_box_deviating_city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['po_box_lobby_name']) && (mb_strlen($this->container['po_box_lobby_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'po_box_lobby_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['secondary_region_name']) && (mb_strlen($this->container['secondary_region_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'secondary_region_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_name']) && (mb_strlen($this->container['street_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['street_prefix_name1']) && (mb_strlen($this->container['street_prefix_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_prefix_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_prefix_name2']) && (mb_strlen($this->container['street_prefix_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_prefix_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_suffix_name1']) && (mb_strlen($this->container['street_suffix_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_suffix_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_suffix_name2']) && (mb_strlen($this->container['street_suffix_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_suffix_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['tertiary_region_name']) && (mb_strlen($this->container['tertiary_region_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'tertiary_region_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['village_name']) && (mb_strlen($this->container['village_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'village_name', the character length must be smaller than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_partner
     *
     * @return string
     */
    public function getBusinessPartner()
    {
        return $this->container['business_partner'];
    }

    /**
     * Sets business_partner
     *
     * @param string $business_partner Business Partner Number
     *
     * @return self
     */
    public function setBusinessPartner($business_partner)
    {
        if (is_null($business_partner)) {
            throw new \InvalidArgumentException('non-nullable business_partner cannot be null');
        }
        if ((mb_strlen($business_partner) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['business_partner'] = $business_partner;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return string
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string $address_id address_id
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            throw new \InvalidArgumentException('non-nullable address_id cannot be null');
        }
        if ((mb_strlen($address_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $address_id when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets address_representation_code
     *
     * @return string
     */
    public function getAddressRepresentationCode()
    {
        return $this->container['address_representation_code'];
    }

    /**
     * Sets address_representation_code
     *
     * @param string $address_representation_code Version ID for International Addresses
     *
     * @return self
     */
    public function setAddressRepresentationCode($address_representation_code)
    {
        if (is_null($address_representation_code)) {
            throw new \InvalidArgumentException('non-nullable address_representation_code cannot be null');
        }
        if ((mb_strlen($address_representation_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $address_representation_code when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['address_representation_code'] = $address_representation_code;

        return $this;
    }

    /**
     * Gets address_search_term1
     *
     * @return string|null
     */
    public function getAddressSearchTerm1()
    {
        return $this->container['address_search_term1'];
    }

    /**
     * Sets address_search_term1
     *
     * @param string|null $address_search_term1 address_search_term1
     *
     * @return self
     */
    public function setAddressSearchTerm1($address_search_term1)
    {
        if (is_null($address_search_term1)) {
            array_push($this->openAPINullablesSetToNull, 'address_search_term1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_search_term1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_search_term1) && (mb_strlen($address_search_term1) > 20)) {
            throw new \InvalidArgumentException('invalid length for $address_search_term1 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 20.');
        }

        $this->container['address_search_term1'] = $address_search_term1;

        return $this;
    }

    /**
     * Gets address_search_term2
     *
     * @return string|null
     */
    public function getAddressSearchTerm2()
    {
        return $this->container['address_search_term2'];
    }

    /**
     * Sets address_search_term2
     *
     * @param string|null $address_search_term2 address_search_term2
     *
     * @return self
     */
    public function setAddressSearchTerm2($address_search_term2)
    {
        if (is_null($address_search_term2)) {
            array_push($this->openAPINullablesSetToNull, 'address_search_term2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_search_term2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address_search_term2) && (mb_strlen($address_search_term2) > 20)) {
            throw new \InvalidArgumentException('invalid length for $address_search_term2 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 20.');
        }

        $this->container['address_search_term2'] = $address_search_term2;

        return $this;
    }

    /**
     * Gets care_of_name
     *
     * @return string|null
     */
    public function getCareOfName()
    {
        return $this->container['care_of_name'];
    }

    /**
     * Sets care_of_name
     *
     * @param string|null $care_of_name c/o name
     *
     * @return self
     */
    public function setCareOfName($care_of_name)
    {
        if (is_null($care_of_name)) {
            array_push($this->openAPINullablesSetToNull, 'care_of_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('care_of_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($care_of_name) && (mb_strlen($care_of_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $care_of_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['care_of_name'] = $care_of_name;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string|null
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string|null $city_name city_name
     *
     * @return self
     */
    public function setCityName($city_name)
    {
        if (is_null($city_name)) {
            array_push($this->openAPINullablesSetToNull, 'city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city_name) && (mb_strlen($city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets district_name
     *
     * @return string|null
     */
    public function getDistrictName()
    {
        return $this->container['district_name'];
    }

    /**
     * Sets district_name
     *
     * @param string|null $district_name district_name
     *
     * @return self
     */
    public function setDistrictName($district_name)
    {
        if (is_null($district_name)) {
            array_push($this->openAPINullablesSetToNull, 'district_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($district_name) && (mb_strlen($district_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $district_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['district_name'] = $district_name;

        return $this;
    }

    /**
     * Gets form_of_address
     *
     * @return string|null
     */
    public function getFormOfAddress()
    {
        return $this->container['form_of_address'];
    }

    /**
     * Sets form_of_address
     *
     * @param string|null $form_of_address Form-of-Address Key
     *
     * @return self
     */
    public function setFormOfAddress($form_of_address)
    {
        if (is_null($form_of_address)) {
            array_push($this->openAPINullablesSetToNull, 'form_of_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_of_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($form_of_address) && (mb_strlen($form_of_address) > 4)) {
            throw new \InvalidArgumentException('invalid length for $form_of_address when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['form_of_address'] = $form_of_address;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string|null $house_number house_number
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if (is_null($house_number)) {
            array_push($this->openAPINullablesSetToNull, 'house_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_number) && (mb_strlen($house_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_supplement_text
     *
     * @return string|null
     */
    public function getHouseNumberSupplementText()
    {
        return $this->container['house_number_supplement_text'];
    }

    /**
     * Sets house_number_supplement_text
     *
     * @param string|null $house_number_supplement_text House number supplement
     *
     * @return self
     */
    public function setHouseNumberSupplementText($house_number_supplement_text)
    {
        if (is_null($house_number_supplement_text)) {
            array_push($this->openAPINullablesSetToNull, 'house_number_supplement_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_number_supplement_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_number_supplement_text) && (mb_strlen($house_number_supplement_text) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number_supplement_text when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['house_number_supplement_text'] = $house_number_supplement_text;

        return $this;
    }

    /**
     * Gets organization_name1
     *
     * @return string|null
     */
    public function getOrganizationName1()
    {
        return $this->container['organization_name1'];
    }

    /**
     * Sets organization_name1
     *
     * @param string|null $organization_name1 Name 1
     *
     * @return self
     */
    public function setOrganizationName1($organization_name1)
    {
        if (is_null($organization_name1)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_name1) && (mb_strlen($organization_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name1 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['organization_name1'] = $organization_name1;

        return $this;
    }

    /**
     * Gets organization_name2
     *
     * @return string|null
     */
    public function getOrganizationName2()
    {
        return $this->container['organization_name2'];
    }

    /**
     * Sets organization_name2
     *
     * @param string|null $organization_name2 organization_name2
     *
     * @return self
     */
    public function setOrganizationName2($organization_name2)
    {
        if (is_null($organization_name2)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_name2) && (mb_strlen($organization_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name2 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['organization_name2'] = $organization_name2;

        return $this;
    }

    /**
     * Gets organization_name3
     *
     * @return string|null
     */
    public function getOrganizationName3()
    {
        return $this->container['organization_name3'];
    }

    /**
     * Sets organization_name3
     *
     * @param string|null $organization_name3 organization_name3
     *
     * @return self
     */
    public function setOrganizationName3($organization_name3)
    {
        if (is_null($organization_name3)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_name3) && (mb_strlen($organization_name3) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name3 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['organization_name3'] = $organization_name3;

        return $this;
    }

    /**
     * Gets organization_name4
     *
     * @return string|null
     */
    public function getOrganizationName4()
    {
        return $this->container['organization_name4'];
    }

    /**
     * Sets organization_name4
     *
     * @param string|null $organization_name4 organization_name4
     *
     * @return self
     */
    public function setOrganizationName4($organization_name4)
    {
        if (is_null($organization_name4)) {
            array_push($this->openAPINullablesSetToNull, 'organization_name4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_name4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($organization_name4) && (mb_strlen($organization_name4) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name4 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['organization_name4'] = $organization_name4;

        return $this;
    }

    /**
     * Gets person_family_name
     *
     * @return string|null
     */
    public function getPersonFamilyName()
    {
        return $this->container['person_family_name'];
    }

    /**
     * Sets person_family_name
     *
     * @param string|null $person_family_name person_family_name
     *
     * @return self
     */
    public function setPersonFamilyName($person_family_name)
    {
        if (is_null($person_family_name)) {
            array_push($this->openAPINullablesSetToNull, 'person_family_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('person_family_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($person_family_name) && (mb_strlen($person_family_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $person_family_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['person_family_name'] = $person_family_name;

        return $this;
    }

    /**
     * Gets person_given_name
     *
     * @return string|null
     */
    public function getPersonGivenName()
    {
        return $this->container['person_given_name'];
    }

    /**
     * Sets person_given_name
     *
     * @param string|null $person_given_name person_given_name
     *
     * @return self
     */
    public function setPersonGivenName($person_given_name)
    {
        if (is_null($person_given_name)) {
            array_push($this->openAPINullablesSetToNull, 'person_given_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('person_given_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($person_given_name) && (mb_strlen($person_given_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $person_given_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['person_given_name'] = $person_given_name;

        return $this;
    }

    /**
     * Gets po_box_deviating_city_name
     *
     * @return string|null
     */
    public function getPoBoxDeviatingCityName()
    {
        return $this->container['po_box_deviating_city_name'];
    }

    /**
     * Sets po_box_deviating_city_name
     *
     * @param string|null $po_box_deviating_city_name PO Box city
     *
     * @return self
     */
    public function setPoBoxDeviatingCityName($po_box_deviating_city_name)
    {
        if (is_null($po_box_deviating_city_name)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_deviating_city_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_deviating_city_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_deviating_city_name) && (mb_strlen($po_box_deviating_city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_city_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['po_box_deviating_city_name'] = $po_box_deviating_city_name;

        return $this;
    }

    /**
     * Gets po_box_lobby_name
     *
     * @return string|null
     */
    public function getPoBoxLobbyName()
    {
        return $this->container['po_box_lobby_name'];
    }

    /**
     * Sets po_box_lobby_name
     *
     * @param string|null $po_box_lobby_name po_box_lobby_name
     *
     * @return self
     */
    public function setPoBoxLobbyName($po_box_lobby_name)
    {
        if (is_null($po_box_lobby_name)) {
            array_push($this->openAPINullablesSetToNull, 'po_box_lobby_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('po_box_lobby_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($po_box_lobby_name) && (mb_strlen($po_box_lobby_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $po_box_lobby_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['po_box_lobby_name'] = $po_box_lobby_name;

        return $this;
    }

    /**
     * Gets secondary_region_name
     *
     * @return string|null
     */
    public function getSecondaryRegionName()
    {
        return $this->container['secondary_region_name'];
    }

    /**
     * Sets secondary_region_name
     *
     * @param string|null $secondary_region_name secondary_region_name
     *
     * @return self
     */
    public function setSecondaryRegionName($secondary_region_name)
    {
        if (is_null($secondary_region_name)) {
            array_push($this->openAPINullablesSetToNull, 'secondary_region_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secondary_region_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($secondary_region_name) && (mb_strlen($secondary_region_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $secondary_region_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['secondary_region_name'] = $secondary_region_name;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            array_push($this->openAPINullablesSetToNull, 'street_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_name) && (mb_strlen($street_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 60.');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_prefix_name1
     *
     * @return string|null
     */
    public function getStreetPrefixName1()
    {
        return $this->container['street_prefix_name1'];
    }

    /**
     * Sets street_prefix_name1
     *
     * @param string|null $street_prefix_name1 street_prefix_name1
     *
     * @return self
     */
    public function setStreetPrefixName1($street_prefix_name1)
    {
        if (is_null($street_prefix_name1)) {
            array_push($this->openAPINullablesSetToNull, 'street_prefix_name1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_prefix_name1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_prefix_name1) && (mb_strlen($street_prefix_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_prefix_name1 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_prefix_name1'] = $street_prefix_name1;

        return $this;
    }

    /**
     * Gets street_prefix_name2
     *
     * @return string|null
     */
    public function getStreetPrefixName2()
    {
        return $this->container['street_prefix_name2'];
    }

    /**
     * Sets street_prefix_name2
     *
     * @param string|null $street_prefix_name2 street_prefix_name2
     *
     * @return self
     */
    public function setStreetPrefixName2($street_prefix_name2)
    {
        if (is_null($street_prefix_name2)) {
            array_push($this->openAPINullablesSetToNull, 'street_prefix_name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_prefix_name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_prefix_name2) && (mb_strlen($street_prefix_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_prefix_name2 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_prefix_name2'] = $street_prefix_name2;

        return $this;
    }

    /**
     * Gets street_suffix_name1
     *
     * @return string|null
     */
    public function getStreetSuffixName1()
    {
        return $this->container['street_suffix_name1'];
    }

    /**
     * Sets street_suffix_name1
     *
     * @param string|null $street_suffix_name1 street_suffix_name1
     *
     * @return self
     */
    public function setStreetSuffixName1($street_suffix_name1)
    {
        if (is_null($street_suffix_name1)) {
            array_push($this->openAPINullablesSetToNull, 'street_suffix_name1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_suffix_name1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_suffix_name1) && (mb_strlen($street_suffix_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix_name1 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_suffix_name1'] = $street_suffix_name1;

        return $this;
    }

    /**
     * Gets street_suffix_name2
     *
     * @return string|null
     */
    public function getStreetSuffixName2()
    {
        return $this->container['street_suffix_name2'];
    }

    /**
     * Sets street_suffix_name2
     *
     * @param string|null $street_suffix_name2 street_suffix_name2
     *
     * @return self
     */
    public function setStreetSuffixName2($street_suffix_name2)
    {
        if (is_null($street_suffix_name2)) {
            array_push($this->openAPINullablesSetToNull, 'street_suffix_name2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street_suffix_name2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street_suffix_name2) && (mb_strlen($street_suffix_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix_name2 when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_suffix_name2'] = $street_suffix_name2;

        return $this;
    }

    /**
     * Gets tertiary_region_name
     *
     * @return string|null
     */
    public function getTertiaryRegionName()
    {
        return $this->container['tertiary_region_name'];
    }

    /**
     * Sets tertiary_region_name
     *
     * @param string|null $tertiary_region_name tertiary_region_name
     *
     * @return self
     */
    public function setTertiaryRegionName($tertiary_region_name)
    {
        if (is_null($tertiary_region_name)) {
            array_push($this->openAPINullablesSetToNull, 'tertiary_region_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tertiary_region_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tertiary_region_name) && (mb_strlen($tertiary_region_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $tertiary_region_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['tertiary_region_name'] = $tertiary_region_name;

        return $this;
    }

    /**
     * Gets village_name
     *
     * @return string|null
     */
    public function getVillageName()
    {
        return $this->container['village_name'];
    }

    /**
     * Sets village_name
     *
     * @param string|null $village_name City (different from postal city)
     *
     * @return self
     */
    public function setVillageName($village_name)
    {
        if (is_null($village_name)) {
            array_push($this->openAPINullablesSetToNull, 'village_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('village_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($village_name) && (mb_strlen($village_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $village_name when calling APIBUSINESSPARTNERABPIntlAddressVersionTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['village_name'] = $village_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


