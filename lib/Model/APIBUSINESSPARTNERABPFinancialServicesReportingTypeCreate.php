<?php
/**
 * APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BPFinancialServicesReportingType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_partner' => 'string',
        'bpis_non_resident' => 'bool',
        'bp_non_residency_start_date' => 'string',
        'bpis_multimillion_loan_recipient' => 'bool',
        'bp_loan_reporting_borrower_number' => 'string',
        'bp_loan_rptg_borrower_entity_number' => 'string',
        'bp_credit_standing_review' => 'string',
        'bp_credit_standing_review_date' => 'string',
        'business_partner_loan_to_manager' => 'string',
        'bp_company_relationship' => 'string',
        'bp_loan_reporting_creditor_number' => 'string',
        'bpoe_nb_ident_number' => 'string',
        'bpoe_nb_target_group' => 'string',
        'bpoe_nb_ident_number_assigned' => 'string',
        'bpoe_nb_institute_number' => 'string',
        'business_partner_is_oe_nb_institute' => 'bool',
        'business_partner_group' => 'string',
        'bp_group_assignment_category' => 'string',
        'business_partner_group_name' => 'string',
        'business_partner_legal_entity' => 'string',
        'bp_ger_ast_rgln_restricted_ast_quota' => 'string',
        'business_partner_debtor_group' => 'string',
        'business_partner_business_purpose' => 'string',
        'business_partner_risk_group' => 'string',
        'bp_risk_grouping_date' => 'string',
        'bp_has_group_affiliation' => 'bool',
        'bpis_monetary_fin_institution' => 'bool',
        'bp_crdt_standing_review_is_required' => 'bool',
        'bp_loan_monitoring_is_required' => 'bool',
        'bp_has_crediting_relief' => 'bool',
        'bp_invest_in_rstrcd_ast_is_authzd' => 'bool',
        'bp_central_bank_country_region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_partner' => null,
        'bpis_non_resident' => null,
        'bp_non_residency_start_date' => null,
        'bpis_multimillion_loan_recipient' => null,
        'bp_loan_reporting_borrower_number' => null,
        'bp_loan_rptg_borrower_entity_number' => null,
        'bp_credit_standing_review' => null,
        'bp_credit_standing_review_date' => null,
        'business_partner_loan_to_manager' => null,
        'bp_company_relationship' => null,
        'bp_loan_reporting_creditor_number' => null,
        'bpoe_nb_ident_number' => null,
        'bpoe_nb_target_group' => null,
        'bpoe_nb_ident_number_assigned' => null,
        'bpoe_nb_institute_number' => null,
        'business_partner_is_oe_nb_institute' => null,
        'business_partner_group' => null,
        'bp_group_assignment_category' => null,
        'business_partner_group_name' => null,
        'business_partner_legal_entity' => null,
        'bp_ger_ast_rgln_restricted_ast_quota' => null,
        'business_partner_debtor_group' => null,
        'business_partner_business_purpose' => null,
        'business_partner_risk_group' => null,
        'bp_risk_grouping_date' => null,
        'bp_has_group_affiliation' => null,
        'bpis_monetary_fin_institution' => null,
        'bp_crdt_standing_review_is_required' => null,
        'bp_loan_monitoring_is_required' => null,
        'bp_has_crediting_relief' => null,
        'bp_invest_in_rstrcd_ast_is_authzd' => null,
        'bp_central_bank_country_region' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_partner' => false,
		'bpis_non_resident' => true,
		'bp_non_residency_start_date' => true,
		'bpis_multimillion_loan_recipient' => true,
		'bp_loan_reporting_borrower_number' => true,
		'bp_loan_rptg_borrower_entity_number' => true,
		'bp_credit_standing_review' => true,
		'bp_credit_standing_review_date' => true,
		'business_partner_loan_to_manager' => true,
		'bp_company_relationship' => true,
		'bp_loan_reporting_creditor_number' => true,
		'bpoe_nb_ident_number' => true,
		'bpoe_nb_target_group' => true,
		'bpoe_nb_ident_number_assigned' => true,
		'bpoe_nb_institute_number' => true,
		'business_partner_is_oe_nb_institute' => true,
		'business_partner_group' => true,
		'bp_group_assignment_category' => true,
		'business_partner_group_name' => true,
		'business_partner_legal_entity' => true,
		'bp_ger_ast_rgln_restricted_ast_quota' => true,
		'business_partner_debtor_group' => true,
		'business_partner_business_purpose' => true,
		'business_partner_risk_group' => true,
		'bp_risk_grouping_date' => true,
		'bp_has_group_affiliation' => true,
		'bpis_monetary_fin_institution' => true,
		'bp_crdt_standing_review_is_required' => true,
		'bp_loan_monitoring_is_required' => true,
		'bp_has_crediting_relief' => true,
		'bp_invest_in_rstrcd_ast_is_authzd' => true,
		'bp_central_bank_country_region' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_partner' => 'BusinessPartner',
        'bpis_non_resident' => 'BPIsNonResident',
        'bp_non_residency_start_date' => 'BPNonResidencyStartDate',
        'bpis_multimillion_loan_recipient' => 'BPIsMultimillionLoanRecipient',
        'bp_loan_reporting_borrower_number' => 'BPLoanReportingBorrowerNumber',
        'bp_loan_rptg_borrower_entity_number' => 'BPLoanRptgBorrowerEntityNumber',
        'bp_credit_standing_review' => 'BPCreditStandingReview',
        'bp_credit_standing_review_date' => 'BPCreditStandingReviewDate',
        'business_partner_loan_to_manager' => 'BusinessPartnerLoanToManager',
        'bp_company_relationship' => 'BPCompanyRelationship',
        'bp_loan_reporting_creditor_number' => 'BPLoanReportingCreditorNumber',
        'bpoe_nb_ident_number' => 'BPOeNBIdentNumber',
        'bpoe_nb_target_group' => 'BPOeNBTargetGroup',
        'bpoe_nb_ident_number_assigned' => 'BPOeNBIdentNumberAssigned',
        'bpoe_nb_institute_number' => 'BPOeNBInstituteNumber',
        'business_partner_is_oe_nb_institute' => 'BusinessPartnerIsOeNBInstitute',
        'business_partner_group' => 'BusinessPartnerGroup',
        'bp_group_assignment_category' => 'BPGroupAssignmentCategory',
        'business_partner_group_name' => 'BusinessPartnerGroupName',
        'business_partner_legal_entity' => 'BusinessPartnerLegalEntity',
        'bp_ger_ast_rgln_restricted_ast_quota' => 'BPGerAstRglnRestrictedAstQuota',
        'business_partner_debtor_group' => 'BusinessPartnerDebtorGroup',
        'business_partner_business_purpose' => 'BusinessPartnerBusinessPurpose',
        'business_partner_risk_group' => 'BusinessPartnerRiskGroup',
        'bp_risk_grouping_date' => 'BPRiskGroupingDate',
        'bp_has_group_affiliation' => 'BPHasGroupAffiliation',
        'bpis_monetary_fin_institution' => 'BPIsMonetaryFinInstitution',
        'bp_crdt_standing_review_is_required' => 'BPCrdtStandingReviewIsRequired',
        'bp_loan_monitoring_is_required' => 'BPLoanMonitoringIsRequired',
        'bp_has_crediting_relief' => 'BPHasCreditingRelief',
        'bp_invest_in_rstrcd_ast_is_authzd' => 'BPInvestInRstrcdAstIsAuthzd',
        'bp_central_bank_country_region' => 'BPCentralBankCountryRegion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_partner' => 'setBusinessPartner',
        'bpis_non_resident' => 'setBpisNonResident',
        'bp_non_residency_start_date' => 'setBpNonResidencyStartDate',
        'bpis_multimillion_loan_recipient' => 'setBpisMultimillionLoanRecipient',
        'bp_loan_reporting_borrower_number' => 'setBpLoanReportingBorrowerNumber',
        'bp_loan_rptg_borrower_entity_number' => 'setBpLoanRptgBorrowerEntityNumber',
        'bp_credit_standing_review' => 'setBpCreditStandingReview',
        'bp_credit_standing_review_date' => 'setBpCreditStandingReviewDate',
        'business_partner_loan_to_manager' => 'setBusinessPartnerLoanToManager',
        'bp_company_relationship' => 'setBpCompanyRelationship',
        'bp_loan_reporting_creditor_number' => 'setBpLoanReportingCreditorNumber',
        'bpoe_nb_ident_number' => 'setBpoeNbIdentNumber',
        'bpoe_nb_target_group' => 'setBpoeNbTargetGroup',
        'bpoe_nb_ident_number_assigned' => 'setBpoeNbIdentNumberAssigned',
        'bpoe_nb_institute_number' => 'setBpoeNbInstituteNumber',
        'business_partner_is_oe_nb_institute' => 'setBusinessPartnerIsOeNbInstitute',
        'business_partner_group' => 'setBusinessPartnerGroup',
        'bp_group_assignment_category' => 'setBpGroupAssignmentCategory',
        'business_partner_group_name' => 'setBusinessPartnerGroupName',
        'business_partner_legal_entity' => 'setBusinessPartnerLegalEntity',
        'bp_ger_ast_rgln_restricted_ast_quota' => 'setBpGerAstRglnRestrictedAstQuota',
        'business_partner_debtor_group' => 'setBusinessPartnerDebtorGroup',
        'business_partner_business_purpose' => 'setBusinessPartnerBusinessPurpose',
        'business_partner_risk_group' => 'setBusinessPartnerRiskGroup',
        'bp_risk_grouping_date' => 'setBpRiskGroupingDate',
        'bp_has_group_affiliation' => 'setBpHasGroupAffiliation',
        'bpis_monetary_fin_institution' => 'setBpisMonetaryFinInstitution',
        'bp_crdt_standing_review_is_required' => 'setBpCrdtStandingReviewIsRequired',
        'bp_loan_monitoring_is_required' => 'setBpLoanMonitoringIsRequired',
        'bp_has_crediting_relief' => 'setBpHasCreditingRelief',
        'bp_invest_in_rstrcd_ast_is_authzd' => 'setBpInvestInRstrcdAstIsAuthzd',
        'bp_central_bank_country_region' => 'setBpCentralBankCountryRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_partner' => 'getBusinessPartner',
        'bpis_non_resident' => 'getBpisNonResident',
        'bp_non_residency_start_date' => 'getBpNonResidencyStartDate',
        'bpis_multimillion_loan_recipient' => 'getBpisMultimillionLoanRecipient',
        'bp_loan_reporting_borrower_number' => 'getBpLoanReportingBorrowerNumber',
        'bp_loan_rptg_borrower_entity_number' => 'getBpLoanRptgBorrowerEntityNumber',
        'bp_credit_standing_review' => 'getBpCreditStandingReview',
        'bp_credit_standing_review_date' => 'getBpCreditStandingReviewDate',
        'business_partner_loan_to_manager' => 'getBusinessPartnerLoanToManager',
        'bp_company_relationship' => 'getBpCompanyRelationship',
        'bp_loan_reporting_creditor_number' => 'getBpLoanReportingCreditorNumber',
        'bpoe_nb_ident_number' => 'getBpoeNbIdentNumber',
        'bpoe_nb_target_group' => 'getBpoeNbTargetGroup',
        'bpoe_nb_ident_number_assigned' => 'getBpoeNbIdentNumberAssigned',
        'bpoe_nb_institute_number' => 'getBpoeNbInstituteNumber',
        'business_partner_is_oe_nb_institute' => 'getBusinessPartnerIsOeNbInstitute',
        'business_partner_group' => 'getBusinessPartnerGroup',
        'bp_group_assignment_category' => 'getBpGroupAssignmentCategory',
        'business_partner_group_name' => 'getBusinessPartnerGroupName',
        'business_partner_legal_entity' => 'getBusinessPartnerLegalEntity',
        'bp_ger_ast_rgln_restricted_ast_quota' => 'getBpGerAstRglnRestrictedAstQuota',
        'business_partner_debtor_group' => 'getBusinessPartnerDebtorGroup',
        'business_partner_business_purpose' => 'getBusinessPartnerBusinessPurpose',
        'business_partner_risk_group' => 'getBusinessPartnerRiskGroup',
        'bp_risk_grouping_date' => 'getBpRiskGroupingDate',
        'bp_has_group_affiliation' => 'getBpHasGroupAffiliation',
        'bpis_monetary_fin_institution' => 'getBpisMonetaryFinInstitution',
        'bp_crdt_standing_review_is_required' => 'getBpCrdtStandingReviewIsRequired',
        'bp_loan_monitoring_is_required' => 'getBpLoanMonitoringIsRequired',
        'bp_has_crediting_relief' => 'getBpHasCreditingRelief',
        'bp_invest_in_rstrcd_ast_is_authzd' => 'getBpInvestInRstrcdAstIsAuthzd',
        'bp_central_bank_country_region' => 'getBpCentralBankCountryRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_partner', $data ?? [], null);
        $this->setIfExists('bpis_non_resident', $data ?? [], null);
        $this->setIfExists('bp_non_residency_start_date', $data ?? [], null);
        $this->setIfExists('bpis_multimillion_loan_recipient', $data ?? [], null);
        $this->setIfExists('bp_loan_reporting_borrower_number', $data ?? [], null);
        $this->setIfExists('bp_loan_rptg_borrower_entity_number', $data ?? [], null);
        $this->setIfExists('bp_credit_standing_review', $data ?? [], null);
        $this->setIfExists('bp_credit_standing_review_date', $data ?? [], null);
        $this->setIfExists('business_partner_loan_to_manager', $data ?? [], null);
        $this->setIfExists('bp_company_relationship', $data ?? [], null);
        $this->setIfExists('bp_loan_reporting_creditor_number', $data ?? [], null);
        $this->setIfExists('bpoe_nb_ident_number', $data ?? [], null);
        $this->setIfExists('bpoe_nb_target_group', $data ?? [], null);
        $this->setIfExists('bpoe_nb_ident_number_assigned', $data ?? [], null);
        $this->setIfExists('bpoe_nb_institute_number', $data ?? [], null);
        $this->setIfExists('business_partner_is_oe_nb_institute', $data ?? [], null);
        $this->setIfExists('business_partner_group', $data ?? [], null);
        $this->setIfExists('bp_group_assignment_category', $data ?? [], null);
        $this->setIfExists('business_partner_group_name', $data ?? [], null);
        $this->setIfExists('business_partner_legal_entity', $data ?? [], null);
        $this->setIfExists('bp_ger_ast_rgln_restricted_ast_quota', $data ?? [], null);
        $this->setIfExists('business_partner_debtor_group', $data ?? [], null);
        $this->setIfExists('business_partner_business_purpose', $data ?? [], null);
        $this->setIfExists('business_partner_risk_group', $data ?? [], null);
        $this->setIfExists('bp_risk_grouping_date', $data ?? [], null);
        $this->setIfExists('bp_has_group_affiliation', $data ?? [], null);
        $this->setIfExists('bpis_monetary_fin_institution', $data ?? [], null);
        $this->setIfExists('bp_crdt_standing_review_is_required', $data ?? [], null);
        $this->setIfExists('bp_loan_monitoring_is_required', $data ?? [], null);
        $this->setIfExists('bp_has_crediting_relief', $data ?? [], null);
        $this->setIfExists('bp_invest_in_rstrcd_ast_is_authzd', $data ?? [], null);
        $this->setIfExists('bp_central_bank_country_region', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_partner'] === null) {
            $invalidProperties[] = "'business_partner' can't be null";
        }
        if ((mb_strlen($this->container['business_partner']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['bp_loan_reporting_borrower_number']) && (mb_strlen($this->container['bp_loan_reporting_borrower_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'bp_loan_reporting_borrower_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['bp_loan_rptg_borrower_entity_number']) && (mb_strlen($this->container['bp_loan_rptg_borrower_entity_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'bp_loan_rptg_borrower_entity_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['bp_credit_standing_review']) && (mb_strlen($this->container['bp_credit_standing_review']) > 2)) {
            $invalidProperties[] = "invalid value for 'bp_credit_standing_review', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['business_partner_loan_to_manager']) && (mb_strlen($this->container['business_partner_loan_to_manager']) > 2)) {
            $invalidProperties[] = "invalid value for 'business_partner_loan_to_manager', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bp_company_relationship']) && (mb_strlen($this->container['bp_company_relationship']) > 1)) {
            $invalidProperties[] = "invalid value for 'bp_company_relationship', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['bp_loan_reporting_creditor_number']) && (mb_strlen($this->container['bp_loan_reporting_creditor_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'bp_loan_reporting_creditor_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['bpoe_nb_ident_number']) && (mb_strlen($this->container['bpoe_nb_ident_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'bpoe_nb_ident_number', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['bpoe_nb_target_group']) && (mb_strlen($this->container['bpoe_nb_target_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'bpoe_nb_target_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bpoe_nb_ident_number_assigned']) && (mb_strlen($this->container['bpoe_nb_ident_number_assigned']) > 1)) {
            $invalidProperties[] = "invalid value for 'bpoe_nb_ident_number_assigned', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['bpoe_nb_institute_number']) && (mb_strlen($this->container['bpoe_nb_institute_number']) > 7)) {
            $invalidProperties[] = "invalid value for 'bpoe_nb_institute_number', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['business_partner_group']) && (mb_strlen($this->container['business_partner_group']) > 15)) {
            $invalidProperties[] = "invalid value for 'business_partner_group', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['bp_group_assignment_category']) && (mb_strlen($this->container['bp_group_assignment_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'bp_group_assignment_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['business_partner_group_name']) && (mb_strlen($this->container['business_partner_group_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'business_partner_group_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['business_partner_legal_entity']) && (mb_strlen($this->container['business_partner_legal_entity']) > 2)) {
            $invalidProperties[] = "invalid value for 'business_partner_legal_entity', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bp_ger_ast_rgln_restricted_ast_quota']) && (mb_strlen($this->container['bp_ger_ast_rgln_restricted_ast_quota']) > 1)) {
            $invalidProperties[] = "invalid value for 'bp_ger_ast_rgln_restricted_ast_quota', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['business_partner_debtor_group']) && (mb_strlen($this->container['business_partner_debtor_group']) > 1)) {
            $invalidProperties[] = "invalid value for 'business_partner_debtor_group', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['business_partner_business_purpose']) && (mb_strlen($this->container['business_partner_business_purpose']) > 2)) {
            $invalidProperties[] = "invalid value for 'business_partner_business_purpose', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['business_partner_risk_group']) && (mb_strlen($this->container['business_partner_risk_group']) > 1)) {
            $invalidProperties[] = "invalid value for 'business_partner_risk_group', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['bp_central_bank_country_region']) && (mb_strlen($this->container['bp_central_bank_country_region']) > 4)) {
            $invalidProperties[] = "invalid value for 'bp_central_bank_country_region', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_partner
     *
     * @return string
     */
    public function getBusinessPartner()
    {
        return $this->container['business_partner'];
    }

    /**
     * Sets business_partner
     *
     * @param string $business_partner Business Partner Number
     *
     * @return self
     */
    public function setBusinessPartner($business_partner)
    {
        if (is_null($business_partner)) {
            throw new \InvalidArgumentException('non-nullable business_partner cannot be null');
        }
        if ((mb_strlen($business_partner) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['business_partner'] = $business_partner;

        return $this;
    }

    /**
     * Gets bpis_non_resident
     *
     * @return bool|null
     */
    public function getBpisNonResident()
    {
        return $this->container['bpis_non_resident'];
    }

    /**
     * Sets bpis_non_resident
     *
     * @param bool|null $bpis_non_resident Non-Resident According to Paragraph 4 AWG
     *
     * @return self
     */
    public function setBpisNonResident($bpis_non_resident)
    {
        if (is_null($bpis_non_resident)) {
            array_push($this->openAPINullablesSetToNull, 'bpis_non_resident');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpis_non_resident', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bpis_non_resident'] = $bpis_non_resident;

        return $this;
    }

    /**
     * Gets bp_non_residency_start_date
     *
     * @return string|null
     */
    public function getBpNonResidencyStartDate()
    {
        return $this->container['bp_non_residency_start_date'];
    }

    /**
     * Sets bp_non_residency_start_date
     *
     * @param string|null $bp_non_residency_start_date Start of Non-Residency According to Paragraph 4 AWG
     *
     * @return self
     */
    public function setBpNonResidencyStartDate($bp_non_residency_start_date)
    {
        if (is_null($bp_non_residency_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_non_residency_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_non_residency_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_non_residency_start_date'] = $bp_non_residency_start_date;

        return $this;
    }

    /**
     * Gets bpis_multimillion_loan_recipient
     *
     * @return bool|null
     */
    public function getBpisMultimillionLoanRecipient()
    {
        return $this->container['bpis_multimillion_loan_recipient'];
    }

    /**
     * Sets bpis_multimillion_loan_recipient
     *
     * @param bool|null $bpis_multimillion_loan_recipient Recipient of Multimillion Loan According to Paragraph 14 GBA
     *
     * @return self
     */
    public function setBpisMultimillionLoanRecipient($bpis_multimillion_loan_recipient)
    {
        if (is_null($bpis_multimillion_loan_recipient)) {
            array_push($this->openAPINullablesSetToNull, 'bpis_multimillion_loan_recipient');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpis_multimillion_loan_recipient', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bpis_multimillion_loan_recipient'] = $bpis_multimillion_loan_recipient;

        return $this;
    }

    /**
     * Gets bp_loan_reporting_borrower_number
     *
     * @return string|null
     */
    public function getBpLoanReportingBorrowerNumber()
    {
        return $this->container['bp_loan_reporting_borrower_number'];
    }

    /**
     * Sets bp_loan_reporting_borrower_number
     *
     * @param string|null $bp_loan_reporting_borrower_number Borrower Number for Reporting a Loan According to GBA
     *
     * @return self
     */
    public function setBpLoanReportingBorrowerNumber($bp_loan_reporting_borrower_number)
    {
        if (is_null($bp_loan_reporting_borrower_number)) {
            array_push($this->openAPINullablesSetToNull, 'bp_loan_reporting_borrower_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_loan_reporting_borrower_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_loan_reporting_borrower_number) && (mb_strlen($bp_loan_reporting_borrower_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $bp_loan_reporting_borrower_number when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 8.');
        }

        $this->container['bp_loan_reporting_borrower_number'] = $bp_loan_reporting_borrower_number;

        return $this;
    }

    /**
     * Gets bp_loan_rptg_borrower_entity_number
     *
     * @return string|null
     */
    public function getBpLoanRptgBorrowerEntityNumber()
    {
        return $this->container['bp_loan_rptg_borrower_entity_number'];
    }

    /**
     * Sets bp_loan_rptg_borrower_entity_number
     *
     * @param string|null $bp_loan_rptg_borrower_entity_number Borrower Entity Number Used to Report Loan acc. to GBA
     *
     * @return self
     */
    public function setBpLoanRptgBorrowerEntityNumber($bp_loan_rptg_borrower_entity_number)
    {
        if (is_null($bp_loan_rptg_borrower_entity_number)) {
            array_push($this->openAPINullablesSetToNull, 'bp_loan_rptg_borrower_entity_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_loan_rptg_borrower_entity_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_loan_rptg_borrower_entity_number) && (mb_strlen($bp_loan_rptg_borrower_entity_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $bp_loan_rptg_borrower_entity_number when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 8.');
        }

        $this->container['bp_loan_rptg_borrower_entity_number'] = $bp_loan_rptg_borrower_entity_number;

        return $this;
    }

    /**
     * Gets bp_credit_standing_review
     *
     * @return string|null
     */
    public function getBpCreditStandingReview()
    {
        return $this->container['bp_credit_standing_review'];
    }

    /**
     * Sets bp_credit_standing_review
     *
     * @param string|null $bp_credit_standing_review Credit Standing Review According to Paragraph 18 GBA
     *
     * @return self
     */
    public function setBpCreditStandingReview($bp_credit_standing_review)
    {
        if (is_null($bp_credit_standing_review)) {
            array_push($this->openAPINullablesSetToNull, 'bp_credit_standing_review');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_credit_standing_review', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_credit_standing_review) && (mb_strlen($bp_credit_standing_review) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bp_credit_standing_review when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['bp_credit_standing_review'] = $bp_credit_standing_review;

        return $this;
    }

    /**
     * Gets bp_credit_standing_review_date
     *
     * @return string|null
     */
    public function getBpCreditStandingReviewDate()
    {
        return $this->container['bp_credit_standing_review_date'];
    }

    /**
     * Sets bp_credit_standing_review_date
     *
     * @param string|null $bp_credit_standing_review_date Date of Credit Standing Review According to Paragraph 18 GBA
     *
     * @return self
     */
    public function setBpCreditStandingReviewDate($bp_credit_standing_review_date)
    {
        if (is_null($bp_credit_standing_review_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_credit_standing_review_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_credit_standing_review_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_credit_standing_review_date'] = $bp_credit_standing_review_date;

        return $this;
    }

    /**
     * Gets business_partner_loan_to_manager
     *
     * @return string|null
     */
    public function getBusinessPartnerLoanToManager()
    {
        return $this->container['business_partner_loan_to_manager'];
    }

    /**
     * Sets business_partner_loan_to_manager
     *
     * @param string|null $business_partner_loan_to_manager Loan to Manager According to Paragraph 15 German Banking Act
     *
     * @return self
     */
    public function setBusinessPartnerLoanToManager($business_partner_loan_to_manager)
    {
        if (is_null($business_partner_loan_to_manager)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_loan_to_manager');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_loan_to_manager', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_loan_to_manager) && (mb_strlen($business_partner_loan_to_manager) > 2)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_loan_to_manager when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['business_partner_loan_to_manager'] = $business_partner_loan_to_manager;

        return $this;
    }

    /**
     * Gets bp_company_relationship
     *
     * @return string|null
     */
    public function getBpCompanyRelationship()
    {
        return $this->container['bp_company_relationship'];
    }

    /**
     * Sets bp_company_relationship
     *
     * @param string|null $bp_company_relationship Organization Relationship
     *
     * @return self
     */
    public function setBpCompanyRelationship($bp_company_relationship)
    {
        if (is_null($bp_company_relationship)) {
            array_push($this->openAPINullablesSetToNull, 'bp_company_relationship');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_company_relationship', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_company_relationship) && (mb_strlen($bp_company_relationship) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bp_company_relationship when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['bp_company_relationship'] = $bp_company_relationship;

        return $this;
    }

    /**
     * Gets bp_loan_reporting_creditor_number
     *
     * @return string|null
     */
    public function getBpLoanReportingCreditorNumber()
    {
        return $this->container['bp_loan_reporting_creditor_number'];
    }

    /**
     * Sets bp_loan_reporting_creditor_number
     *
     * @param string|null $bp_loan_reporting_creditor_number Creditor Number for Reporting a Loan According to GBA
     *
     * @return self
     */
    public function setBpLoanReportingCreditorNumber($bp_loan_reporting_creditor_number)
    {
        if (is_null($bp_loan_reporting_creditor_number)) {
            array_push($this->openAPINullablesSetToNull, 'bp_loan_reporting_creditor_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_loan_reporting_creditor_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_loan_reporting_creditor_number) && (mb_strlen($bp_loan_reporting_creditor_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $bp_loan_reporting_creditor_number when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 8.');
        }

        $this->container['bp_loan_reporting_creditor_number'] = $bp_loan_reporting_creditor_number;

        return $this;
    }

    /**
     * Gets bpoe_nb_ident_number
     *
     * @return string|null
     */
    public function getBpoeNbIdentNumber()
    {
        return $this->container['bpoe_nb_ident_number'];
    }

    /**
     * Sets bpoe_nb_ident_number
     *
     * @param string|null $bpoe_nb_ident_number bpoe_nb_ident_number
     *
     * @return self
     */
    public function setBpoeNbIdentNumber($bpoe_nb_ident_number)
    {
        if (is_null($bpoe_nb_ident_number)) {
            array_push($this->openAPINullablesSetToNull, 'bpoe_nb_ident_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpoe_nb_ident_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bpoe_nb_ident_number) && (mb_strlen($bpoe_nb_ident_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $bpoe_nb_ident_number when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 11.');
        }

        $this->container['bpoe_nb_ident_number'] = $bpoe_nb_ident_number;

        return $this;
    }

    /**
     * Gets bpoe_nb_target_group
     *
     * @return string|null
     */
    public function getBpoeNbTargetGroup()
    {
        return $this->container['bpoe_nb_target_group'];
    }

    /**
     * Sets bpoe_nb_target_group
     *
     * @param string|null $bpoe_nb_target_group Target Group According to OeNB
     *
     * @return self
     */
    public function setBpoeNbTargetGroup($bpoe_nb_target_group)
    {
        if (is_null($bpoe_nb_target_group)) {
            array_push($this->openAPINullablesSetToNull, 'bpoe_nb_target_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpoe_nb_target_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bpoe_nb_target_group) && (mb_strlen($bpoe_nb_target_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bpoe_nb_target_group when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['bpoe_nb_target_group'] = $bpoe_nb_target_group;

        return $this;
    }

    /**
     * Gets bpoe_nb_ident_number_assigned
     *
     * @return string|null
     */
    public function getBpoeNbIdentNumberAssigned()
    {
        return $this->container['bpoe_nb_ident_number_assigned'];
    }

    /**
     * Sets bpoe_nb_ident_number_assigned
     *
     * @param string|null $bpoe_nb_ident_number_assigned Assign (OeNB) Ident Number
     *
     * @return self
     */
    public function setBpoeNbIdentNumberAssigned($bpoe_nb_ident_number_assigned)
    {
        if (is_null($bpoe_nb_ident_number_assigned)) {
            array_push($this->openAPINullablesSetToNull, 'bpoe_nb_ident_number_assigned');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpoe_nb_ident_number_assigned', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bpoe_nb_ident_number_assigned) && (mb_strlen($bpoe_nb_ident_number_assigned) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bpoe_nb_ident_number_assigned when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['bpoe_nb_ident_number_assigned'] = $bpoe_nb_ident_number_assigned;

        return $this;
    }

    /**
     * Gets bpoe_nb_institute_number
     *
     * @return string|null
     */
    public function getBpoeNbInstituteNumber()
    {
        return $this->container['bpoe_nb_institute_number'];
    }

    /**
     * Sets bpoe_nb_institute_number
     *
     * @param string|null $bpoe_nb_institute_number Institute Number According to OeNB
     *
     * @return self
     */
    public function setBpoeNbInstituteNumber($bpoe_nb_institute_number)
    {
        if (is_null($bpoe_nb_institute_number)) {
            array_push($this->openAPINullablesSetToNull, 'bpoe_nb_institute_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpoe_nb_institute_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bpoe_nb_institute_number) && (mb_strlen($bpoe_nb_institute_number) > 7)) {
            throw new \InvalidArgumentException('invalid length for $bpoe_nb_institute_number when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 7.');
        }

        $this->container['bpoe_nb_institute_number'] = $bpoe_nb_institute_number;

        return $this;
    }

    /**
     * Gets business_partner_is_oe_nb_institute
     *
     * @return bool|null
     */
    public function getBusinessPartnerIsOeNbInstitute()
    {
        return $this->container['business_partner_is_oe_nb_institute'];
    }

    /**
     * Sets business_partner_is_oe_nb_institute
     *
     * @param bool|null $business_partner_is_oe_nb_institute Institute Subject to Austrian Reg. Reporting Requirements
     *
     * @return self
     */
    public function setBusinessPartnerIsOeNbInstitute($business_partner_is_oe_nb_institute)
    {
        if (is_null($business_partner_is_oe_nb_institute)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_is_oe_nb_institute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_is_oe_nb_institute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_is_oe_nb_institute'] = $business_partner_is_oe_nb_institute;

        return $this;
    }

    /**
     * Gets business_partner_group
     *
     * @return string|null
     */
    public function getBusinessPartnerGroup()
    {
        return $this->container['business_partner_group'];
    }

    /**
     * Sets business_partner_group
     *
     * @param string|null $business_partner_group business_partner_group
     *
     * @return self
     */
    public function setBusinessPartnerGroup($business_partner_group)
    {
        if (is_null($business_partner_group)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_group) && (mb_strlen($business_partner_group) > 15)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_group when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 15.');
        }

        $this->container['business_partner_group'] = $business_partner_group;

        return $this;
    }

    /**
     * Gets bp_group_assignment_category
     *
     * @return string|null
     */
    public function getBpGroupAssignmentCategory()
    {
        return $this->container['bp_group_assignment_category'];
    }

    /**
     * Sets bp_group_assignment_category
     *
     * @param string|null $bp_group_assignment_category Group Assignment Category
     *
     * @return self
     */
    public function setBpGroupAssignmentCategory($bp_group_assignment_category)
    {
        if (is_null($bp_group_assignment_category)) {
            array_push($this->openAPINullablesSetToNull, 'bp_group_assignment_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_group_assignment_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_group_assignment_category) && (mb_strlen($bp_group_assignment_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bp_group_assignment_category when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['bp_group_assignment_category'] = $bp_group_assignment_category;

        return $this;
    }

    /**
     * Gets business_partner_group_name
     *
     * @return string|null
     */
    public function getBusinessPartnerGroupName()
    {
        return $this->container['business_partner_group_name'];
    }

    /**
     * Sets business_partner_group_name
     *
     * @param string|null $business_partner_group_name business_partner_group_name
     *
     * @return self
     */
    public function setBusinessPartnerGroupName($business_partner_group_name)
    {
        if (is_null($business_partner_group_name)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_group_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_group_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_group_name) && (mb_strlen($business_partner_group_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_group_name when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 50.');
        }

        $this->container['business_partner_group_name'] = $business_partner_group_name;

        return $this;
    }

    /**
     * Gets business_partner_legal_entity
     *
     * @return string|null
     */
    public function getBusinessPartnerLegalEntity()
    {
        return $this->container['business_partner_legal_entity'];
    }

    /**
     * Sets business_partner_legal_entity
     *
     * @param string|null $business_partner_legal_entity Legal Entity for Business Partner
     *
     * @return self
     */
    public function setBusinessPartnerLegalEntity($business_partner_legal_entity)
    {
        if (is_null($business_partner_legal_entity)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_legal_entity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_legal_entity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_legal_entity) && (mb_strlen($business_partner_legal_entity) > 2)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_legal_entity when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['business_partner_legal_entity'] = $business_partner_legal_entity;

        return $this;
    }

    /**
     * Gets bp_ger_ast_rgln_restricted_ast_quota
     *
     * @return string|null
     */
    public function getBpGerAstRglnRestrictedAstQuota()
    {
        return $this->container['bp_ger_ast_rgln_restricted_ast_quota'];
    }

    /**
     * Sets bp_ger_ast_rgln_restricted_ast_quota
     *
     * @param string|null $bp_ger_ast_rgln_restricted_ast_quota Business Partner Acc. to Para. 4, Sec. 2 of Asset Regulation
     *
     * @return self
     */
    public function setBpGerAstRglnRestrictedAstQuota($bp_ger_ast_rgln_restricted_ast_quota)
    {
        if (is_null($bp_ger_ast_rgln_restricted_ast_quota)) {
            array_push($this->openAPINullablesSetToNull, 'bp_ger_ast_rgln_restricted_ast_quota');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_ger_ast_rgln_restricted_ast_quota', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_ger_ast_rgln_restricted_ast_quota) && (mb_strlen($bp_ger_ast_rgln_restricted_ast_quota) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bp_ger_ast_rgln_restricted_ast_quota when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['bp_ger_ast_rgln_restricted_ast_quota'] = $bp_ger_ast_rgln_restricted_ast_quota;

        return $this;
    }

    /**
     * Gets business_partner_debtor_group
     *
     * @return string|null
     */
    public function getBusinessPartnerDebtorGroup()
    {
        return $this->container['business_partner_debtor_group'];
    }

    /**
     * Sets business_partner_debtor_group
     *
     * @param string|null $business_partner_debtor_group Debtor Group According to German Law (BerVersV, Template 5)
     *
     * @return self
     */
    public function setBusinessPartnerDebtorGroup($business_partner_debtor_group)
    {
        if (is_null($business_partner_debtor_group)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_debtor_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_debtor_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_debtor_group) && (mb_strlen($business_partner_debtor_group) > 1)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_debtor_group when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['business_partner_debtor_group'] = $business_partner_debtor_group;

        return $this;
    }

    /**
     * Gets business_partner_business_purpose
     *
     * @return string|null
     */
    public function getBusinessPartnerBusinessPurpose()
    {
        return $this->container['business_partner_business_purpose'];
    }

    /**
     * Sets business_partner_business_purpose
     *
     * @param string|null $business_partner_business_purpose Category of Business Purpose
     *
     * @return self
     */
    public function setBusinessPartnerBusinessPurpose($business_partner_business_purpose)
    {
        if (is_null($business_partner_business_purpose)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_business_purpose');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_business_purpose', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_business_purpose) && (mb_strlen($business_partner_business_purpose) > 2)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_business_purpose when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['business_partner_business_purpose'] = $business_partner_business_purpose;

        return $this;
    }

    /**
     * Gets business_partner_risk_group
     *
     * @return string|null
     */
    public function getBusinessPartnerRiskGroup()
    {
        return $this->container['business_partner_risk_group'];
    }

    /**
     * Sets business_partner_risk_group
     *
     * @param string|null $business_partner_risk_group business_partner_risk_group
     *
     * @return self
     */
    public function setBusinessPartnerRiskGroup($business_partner_risk_group)
    {
        if (is_null($business_partner_risk_group)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_risk_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_risk_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_risk_group) && (mb_strlen($business_partner_risk_group) > 1)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_risk_group when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['business_partner_risk_group'] = $business_partner_risk_group;

        return $this;
    }

    /**
     * Gets bp_risk_grouping_date
     *
     * @return string|null
     */
    public function getBpRiskGroupingDate()
    {
        return $this->container['bp_risk_grouping_date'];
    }

    /**
     * Sets bp_risk_grouping_date
     *
     * @param string|null $bp_risk_grouping_date Date of Risk Grouping
     *
     * @return self
     */
    public function setBpRiskGroupingDate($bp_risk_grouping_date)
    {
        if (is_null($bp_risk_grouping_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_risk_grouping_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_risk_grouping_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_risk_grouping_date'] = $bp_risk_grouping_date;

        return $this;
    }

    /**
     * Gets bp_has_group_affiliation
     *
     * @return bool|null
     */
    public function getBpHasGroupAffiliation()
    {
        return $this->container['bp_has_group_affiliation'];
    }

    /**
     * Sets bp_has_group_affiliation
     *
     * @param bool|null $bp_has_group_affiliation Group Affiliation Exists
     *
     * @return self
     */
    public function setBpHasGroupAffiliation($bp_has_group_affiliation)
    {
        if (is_null($bp_has_group_affiliation)) {
            array_push($this->openAPINullablesSetToNull, 'bp_has_group_affiliation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_has_group_affiliation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_has_group_affiliation'] = $bp_has_group_affiliation;

        return $this;
    }

    /**
     * Gets bpis_monetary_fin_institution
     *
     * @return bool|null
     */
    public function getBpisMonetaryFinInstitution()
    {
        return $this->container['bpis_monetary_fin_institution'];
    }

    /**
     * Sets bpis_monetary_fin_institution
     *
     * @param bool|null $bpis_monetary_fin_institution Monetary Financial Institution
     *
     * @return self
     */
    public function setBpisMonetaryFinInstitution($bpis_monetary_fin_institution)
    {
        if (is_null($bpis_monetary_fin_institution)) {
            array_push($this->openAPINullablesSetToNull, 'bpis_monetary_fin_institution');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bpis_monetary_fin_institution', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bpis_monetary_fin_institution'] = $bpis_monetary_fin_institution;

        return $this;
    }

    /**
     * Gets bp_crdt_standing_review_is_required
     *
     * @return bool|null
     */
    public function getBpCrdtStandingReviewIsRequired()
    {
        return $this->container['bp_crdt_standing_review_is_required'];
    }

    /**
     * Sets bp_crdt_standing_review_is_required
     *
     * @param bool|null $bp_crdt_standing_review_is_required Obligation to Submit to Credit Standing Review - Para.18 GBA
     *
     * @return self
     */
    public function setBpCrdtStandingReviewIsRequired($bp_crdt_standing_review_is_required)
    {
        if (is_null($bp_crdt_standing_review_is_required)) {
            array_push($this->openAPINullablesSetToNull, 'bp_crdt_standing_review_is_required');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_crdt_standing_review_is_required', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_crdt_standing_review_is_required'] = $bp_crdt_standing_review_is_required;

        return $this;
    }

    /**
     * Gets bp_loan_monitoring_is_required
     *
     * @return bool|null
     */
    public function getBpLoanMonitoringIsRequired()
    {
        return $this->container['bp_loan_monitoring_is_required'];
    }

    /**
     * Sets bp_loan_monitoring_is_required
     *
     * @param bool|null $bp_loan_monitoring_is_required Large-Scale Loan Monitoring According to Paragraph 13b GBA
     *
     * @return self
     */
    public function setBpLoanMonitoringIsRequired($bp_loan_monitoring_is_required)
    {
        if (is_null($bp_loan_monitoring_is_required)) {
            array_push($this->openAPINullablesSetToNull, 'bp_loan_monitoring_is_required');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_loan_monitoring_is_required', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_loan_monitoring_is_required'] = $bp_loan_monitoring_is_required;

        return $this;
    }

    /**
     * Gets bp_has_crediting_relief
     *
     * @return bool|null
     */
    public function getBpHasCreditingRelief()
    {
        return $this->container['bp_has_crediting_relief'];
    }

    /**
     * Sets bp_has_crediting_relief
     *
     * @param bool|null $bp_has_crediting_relief Crediting Relief in Accordance with Paragraph 13/3 GBA
     *
     * @return self
     */
    public function setBpHasCreditingRelief($bp_has_crediting_relief)
    {
        if (is_null($bp_has_crediting_relief)) {
            array_push($this->openAPINullablesSetToNull, 'bp_has_crediting_relief');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_has_crediting_relief', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_has_crediting_relief'] = $bp_has_crediting_relief;

        return $this;
    }

    /**
     * Gets bp_invest_in_rstrcd_ast_is_authzd
     *
     * @return bool|null
     */
    public function getBpInvestInRstrcdAstIsAuthzd()
    {
        return $this->container['bp_invest_in_rstrcd_ast_is_authzd'];
    }

    /**
     * Sets bp_invest_in_rstrcd_ast_is_authzd
     *
     * @param bool|null $bp_invest_in_rstrcd_ast_is_authzd Authorized Acc. to Para. 2(1)18b of German Asset Regulation
     *
     * @return self
     */
    public function setBpInvestInRstrcdAstIsAuthzd($bp_invest_in_rstrcd_ast_is_authzd)
    {
        if (is_null($bp_invest_in_rstrcd_ast_is_authzd)) {
            array_push($this->openAPINullablesSetToNull, 'bp_invest_in_rstrcd_ast_is_authzd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_invest_in_rstrcd_ast_is_authzd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_invest_in_rstrcd_ast_is_authzd'] = $bp_invest_in_rstrcd_ast_is_authzd;

        return $this;
    }

    /**
     * Gets bp_central_bank_country_region
     *
     * @return string|null
     */
    public function getBpCentralBankCountryRegion()
    {
        return $this->container['bp_central_bank_country_region'];
    }

    /**
     * Sets bp_central_bank_country_region
     *
     * @param string|null $bp_central_bank_country_region Numeric Code for State Central Bank Country/Region Indicator
     *
     * @return self
     */
    public function setBpCentralBankCountryRegion($bp_central_bank_country_region)
    {
        if (is_null($bp_central_bank_country_region)) {
            array_push($this->openAPINullablesSetToNull, 'bp_central_bank_country_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_central_bank_country_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_central_bank_country_region) && (mb_strlen($bp_central_bank_country_region) > 4)) {
            throw new \InvalidArgumentException('invalid length for $bp_central_bank_country_region when calling APIBUSINESSPARTNERABPFinancialServicesReportingTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['bp_central_bank_country_region'] = $bp_central_bank_country_region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


