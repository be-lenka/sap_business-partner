<?php
/**
 * APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_CustomerSalesAreaType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_by_customer' => 'string',
        'authorization_group' => 'string',
        'billing_is_blocked_for_customer' => 'string',
        'complete_delivery_is_defined' => 'bool',
        'credit_control_area' => 'string',
        'currency' => 'string',
        'cust_is_rlvt_for_settlmt_mgmt' => 'bool',
        'customer_abc_classification' => 'string',
        'customer_account_assignment_group' => 'string',
        'customer_group' => 'string',
        'customer_is_rebate_relevant' => 'bool',
        'customer_payment_terms' => 'string',
        'customer_price_group' => 'string',
        'customer_pricing_procedure' => 'string',
        'cust_prod_proposal_procedure' => 'string',
        'delivery_is_blocked_for_customer' => 'string',
        'delivery_priority' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_location2' => 'string',
        'incoterms_version' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_sup_chn_loc1_addl_uuid' => 'string',
        'incoterms_sup_chn_loc2_addl_uuid' => 'string',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'string',
        'deletion_indicator' => 'bool',
        'incoterms_transfer_location' => 'string',
        'insp_sbst_has_no_time_or_quantity' => 'bool',
        'invoice_date' => 'string',
        'item_order_probability_in_percent' => 'string',
        'manual_invoice_maint_is_relevant' => 'bool',
        'max_nmbr_of_partial_delivery' => 'float',
        'order_combination_is_allowed' => 'bool',
        'order_is_blocked_for_customer' => 'string',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'float',
        'partial_delivery_is_allowed' => 'string',
        'price_list_type' => 'string',
        'product_unit_group' => 'string',
        'proof_of_delivery_time_value' => 'float',
        'sales_group' => 'string',
        'sales_item_proposal' => 'string',
        'sales_office' => 'string',
        'shipping_condition' => 'string',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'bool',
        'sls_unlmtd_ovrdeliv_is_allwd' => 'bool',
        'supplying_plant' => 'string',
        'sales_district' => 'string',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'float',
        'invoice_list_schedule' => 'string',
        'exchange_rate_type' => 'string',
        'additional_customer_group1' => 'string',
        'additional_customer_group2' => 'string',
        'additional_customer_group3' => 'string',
        'additional_customer_group4' => 'string',
        'additional_customer_group5' => 'string',
        'payment_guarantee_procedure' => 'string',
        'customer_account_group' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_by_customer' => null,
        'authorization_group' => null,
        'billing_is_blocked_for_customer' => null,
        'complete_delivery_is_defined' => null,
        'credit_control_area' => null,
        'currency' => null,
        'cust_is_rlvt_for_settlmt_mgmt' => null,
        'customer_abc_classification' => null,
        'customer_account_assignment_group' => null,
        'customer_group' => null,
        'customer_is_rebate_relevant' => null,
        'customer_payment_terms' => null,
        'customer_price_group' => null,
        'customer_pricing_procedure' => null,
        'cust_prod_proposal_procedure' => null,
        'delivery_is_blocked_for_customer' => null,
        'delivery_priority' => null,
        'incoterms_classification' => null,
        'incoterms_location2' => null,
        'incoterms_version' => null,
        'incoterms_location1' => null,
        'incoterms_sup_chn_loc1_addl_uuid' => 'uuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'uuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'uuid',
        'deletion_indicator' => null,
        'incoterms_transfer_location' => null,
        'insp_sbst_has_no_time_or_quantity' => null,
        'invoice_date' => null,
        'item_order_probability_in_percent' => null,
        'manual_invoice_maint_is_relevant' => null,
        'max_nmbr_of_partial_delivery' => 'decimal',
        'order_combination_is_allowed' => null,
        'order_is_blocked_for_customer' => null,
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'decimal',
        'partial_delivery_is_allowed' => null,
        'price_list_type' => null,
        'product_unit_group' => null,
        'proof_of_delivery_time_value' => 'decimal',
        'sales_group' => null,
        'sales_item_proposal' => null,
        'sales_office' => null,
        'shipping_condition' => null,
        'sls_doc_is_rlvt_for_proof_of_deliv' => null,
        'sls_unlmtd_ovrdeliv_is_allwd' => null,
        'supplying_plant' => null,
        'sales_district' => null,
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'decimal',
        'invoice_list_schedule' => null,
        'exchange_rate_type' => null,
        'additional_customer_group1' => null,
        'additional_customer_group2' => null,
        'additional_customer_group3' => null,
        'additional_customer_group4' => null,
        'additional_customer_group5' => null,
        'payment_guarantee_procedure' => null,
        'customer_account_group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_by_customer' => true,
		'authorization_group' => true,
		'billing_is_blocked_for_customer' => true,
		'complete_delivery_is_defined' => true,
		'credit_control_area' => true,
		'currency' => true,
		'cust_is_rlvt_for_settlmt_mgmt' => true,
		'customer_abc_classification' => true,
		'customer_account_assignment_group' => true,
		'customer_group' => true,
		'customer_is_rebate_relevant' => true,
		'customer_payment_terms' => true,
		'customer_price_group' => true,
		'customer_pricing_procedure' => true,
		'cust_prod_proposal_procedure' => true,
		'delivery_is_blocked_for_customer' => true,
		'delivery_priority' => true,
		'incoterms_classification' => true,
		'incoterms_location2' => true,
		'incoterms_version' => true,
		'incoterms_location1' => true,
		'incoterms_sup_chn_loc1_addl_uuid' => true,
		'incoterms_sup_chn_loc2_addl_uuid' => true,
		'incoterms_sup_chn_dvtg_loc_addl_uuid' => true,
		'deletion_indicator' => true,
		'incoterms_transfer_location' => true,
		'insp_sbst_has_no_time_or_quantity' => true,
		'invoice_date' => true,
		'item_order_probability_in_percent' => true,
		'manual_invoice_maint_is_relevant' => true,
		'max_nmbr_of_partial_delivery' => true,
		'order_combination_is_allowed' => true,
		'order_is_blocked_for_customer' => true,
		'overdeliv_tolrtd_lmt_ratio_in_pct' => true,
		'partial_delivery_is_allowed' => true,
		'price_list_type' => true,
		'product_unit_group' => true,
		'proof_of_delivery_time_value' => true,
		'sales_group' => true,
		'sales_item_proposal' => true,
		'sales_office' => true,
		'shipping_condition' => true,
		'sls_doc_is_rlvt_for_proof_of_deliv' => true,
		'sls_unlmtd_ovrdeliv_is_allwd' => true,
		'supplying_plant' => true,
		'sales_district' => true,
		'underdeliv_tolrtd_lmt_ratio_in_pct' => true,
		'invoice_list_schedule' => true,
		'exchange_rate_type' => true,
		'additional_customer_group1' => true,
		'additional_customer_group2' => true,
		'additional_customer_group3' => true,
		'additional_customer_group4' => true,
		'additional_customer_group5' => true,
		'payment_guarantee_procedure' => true,
		'customer_account_group' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_by_customer' => 'AccountByCustomer',
        'authorization_group' => 'AuthorizationGroup',
        'billing_is_blocked_for_customer' => 'BillingIsBlockedForCustomer',
        'complete_delivery_is_defined' => 'CompleteDeliveryIsDefined',
        'credit_control_area' => 'CreditControlArea',
        'currency' => 'Currency',
        'cust_is_rlvt_for_settlmt_mgmt' => 'CustIsRlvtForSettlmtMgmt',
        'customer_abc_classification' => 'CustomerABCClassification',
        'customer_account_assignment_group' => 'CustomerAccountAssignmentGroup',
        'customer_group' => 'CustomerGroup',
        'customer_is_rebate_relevant' => 'CustomerIsRebateRelevant',
        'customer_payment_terms' => 'CustomerPaymentTerms',
        'customer_price_group' => 'CustomerPriceGroup',
        'customer_pricing_procedure' => 'CustomerPricingProcedure',
        'cust_prod_proposal_procedure' => 'CustProdProposalProcedure',
        'delivery_is_blocked_for_customer' => 'DeliveryIsBlockedForCustomer',
        'delivery_priority' => 'DeliveryPriority',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_location2' => 'IncotermsLocation2',
        'incoterms_version' => 'IncotermsVersion',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_sup_chn_loc1_addl_uuid' => 'IncotermsSupChnLoc1AddlUUID',
        'incoterms_sup_chn_loc2_addl_uuid' => 'IncotermsSupChnLoc2AddlUUID',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'IncotermsSupChnDvtgLocAddlUUID',
        'deletion_indicator' => 'DeletionIndicator',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'insp_sbst_has_no_time_or_quantity' => 'InspSbstHasNoTimeOrQuantity',
        'invoice_date' => 'InvoiceDate',
        'item_order_probability_in_percent' => 'ItemOrderProbabilityInPercent',
        'manual_invoice_maint_is_relevant' => 'ManualInvoiceMaintIsRelevant',
        'max_nmbr_of_partial_delivery' => 'MaxNmbrOfPartialDelivery',
        'order_combination_is_allowed' => 'OrderCombinationIsAllowed',
        'order_is_blocked_for_customer' => 'OrderIsBlockedForCustomer',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'OverdelivTolrtdLmtRatioInPct',
        'partial_delivery_is_allowed' => 'PartialDeliveryIsAllowed',
        'price_list_type' => 'PriceListType',
        'product_unit_group' => 'ProductUnitGroup',
        'proof_of_delivery_time_value' => 'ProofOfDeliveryTimeValue',
        'sales_group' => 'SalesGroup',
        'sales_item_proposal' => 'SalesItemProposal',
        'sales_office' => 'SalesOffice',
        'shipping_condition' => 'ShippingCondition',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'SlsDocIsRlvtForProofOfDeliv',
        'sls_unlmtd_ovrdeliv_is_allwd' => 'SlsUnlmtdOvrdelivIsAllwd',
        'supplying_plant' => 'SupplyingPlant',
        'sales_district' => 'SalesDistrict',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'UnderdelivTolrtdLmtRatioInPct',
        'invoice_list_schedule' => 'InvoiceListSchedule',
        'exchange_rate_type' => 'ExchangeRateType',
        'additional_customer_group1' => 'AdditionalCustomerGroup1',
        'additional_customer_group2' => 'AdditionalCustomerGroup2',
        'additional_customer_group3' => 'AdditionalCustomerGroup3',
        'additional_customer_group4' => 'AdditionalCustomerGroup4',
        'additional_customer_group5' => 'AdditionalCustomerGroup5',
        'payment_guarantee_procedure' => 'PaymentGuaranteeProcedure',
        'customer_account_group' => 'CustomerAccountGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_by_customer' => 'setAccountByCustomer',
        'authorization_group' => 'setAuthorizationGroup',
        'billing_is_blocked_for_customer' => 'setBillingIsBlockedForCustomer',
        'complete_delivery_is_defined' => 'setCompleteDeliveryIsDefined',
        'credit_control_area' => 'setCreditControlArea',
        'currency' => 'setCurrency',
        'cust_is_rlvt_for_settlmt_mgmt' => 'setCustIsRlvtForSettlmtMgmt',
        'customer_abc_classification' => 'setCustomerAbcClassification',
        'customer_account_assignment_group' => 'setCustomerAccountAssignmentGroup',
        'customer_group' => 'setCustomerGroup',
        'customer_is_rebate_relevant' => 'setCustomerIsRebateRelevant',
        'customer_payment_terms' => 'setCustomerPaymentTerms',
        'customer_price_group' => 'setCustomerPriceGroup',
        'customer_pricing_procedure' => 'setCustomerPricingProcedure',
        'cust_prod_proposal_procedure' => 'setCustProdProposalProcedure',
        'delivery_is_blocked_for_customer' => 'setDeliveryIsBlockedForCustomer',
        'delivery_priority' => 'setDeliveryPriority',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_location2' => 'setIncotermsLocation2',
        'incoterms_version' => 'setIncotermsVersion',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_sup_chn_loc1_addl_uuid' => 'setIncotermsSupChnLoc1AddlUuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'setIncotermsSupChnLoc2AddlUuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'setIncotermsSupChnDvtgLocAddlUuid',
        'deletion_indicator' => 'setDeletionIndicator',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'insp_sbst_has_no_time_or_quantity' => 'setInspSbstHasNoTimeOrQuantity',
        'invoice_date' => 'setInvoiceDate',
        'item_order_probability_in_percent' => 'setItemOrderProbabilityInPercent',
        'manual_invoice_maint_is_relevant' => 'setManualInvoiceMaintIsRelevant',
        'max_nmbr_of_partial_delivery' => 'setMaxNmbrOfPartialDelivery',
        'order_combination_is_allowed' => 'setOrderCombinationIsAllowed',
        'order_is_blocked_for_customer' => 'setOrderIsBlockedForCustomer',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'setOverdelivTolrtdLmtRatioInPct',
        'partial_delivery_is_allowed' => 'setPartialDeliveryIsAllowed',
        'price_list_type' => 'setPriceListType',
        'product_unit_group' => 'setProductUnitGroup',
        'proof_of_delivery_time_value' => 'setProofOfDeliveryTimeValue',
        'sales_group' => 'setSalesGroup',
        'sales_item_proposal' => 'setSalesItemProposal',
        'sales_office' => 'setSalesOffice',
        'shipping_condition' => 'setShippingCondition',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'setSlsDocIsRlvtForProofOfDeliv',
        'sls_unlmtd_ovrdeliv_is_allwd' => 'setSlsUnlmtdOvrdelivIsAllwd',
        'supplying_plant' => 'setSupplyingPlant',
        'sales_district' => 'setSalesDistrict',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'setUnderdelivTolrtdLmtRatioInPct',
        'invoice_list_schedule' => 'setInvoiceListSchedule',
        'exchange_rate_type' => 'setExchangeRateType',
        'additional_customer_group1' => 'setAdditionalCustomerGroup1',
        'additional_customer_group2' => 'setAdditionalCustomerGroup2',
        'additional_customer_group3' => 'setAdditionalCustomerGroup3',
        'additional_customer_group4' => 'setAdditionalCustomerGroup4',
        'additional_customer_group5' => 'setAdditionalCustomerGroup5',
        'payment_guarantee_procedure' => 'setPaymentGuaranteeProcedure',
        'customer_account_group' => 'setCustomerAccountGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_by_customer' => 'getAccountByCustomer',
        'authorization_group' => 'getAuthorizationGroup',
        'billing_is_blocked_for_customer' => 'getBillingIsBlockedForCustomer',
        'complete_delivery_is_defined' => 'getCompleteDeliveryIsDefined',
        'credit_control_area' => 'getCreditControlArea',
        'currency' => 'getCurrency',
        'cust_is_rlvt_for_settlmt_mgmt' => 'getCustIsRlvtForSettlmtMgmt',
        'customer_abc_classification' => 'getCustomerAbcClassification',
        'customer_account_assignment_group' => 'getCustomerAccountAssignmentGroup',
        'customer_group' => 'getCustomerGroup',
        'customer_is_rebate_relevant' => 'getCustomerIsRebateRelevant',
        'customer_payment_terms' => 'getCustomerPaymentTerms',
        'customer_price_group' => 'getCustomerPriceGroup',
        'customer_pricing_procedure' => 'getCustomerPricingProcedure',
        'cust_prod_proposal_procedure' => 'getCustProdProposalProcedure',
        'delivery_is_blocked_for_customer' => 'getDeliveryIsBlockedForCustomer',
        'delivery_priority' => 'getDeliveryPriority',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_location2' => 'getIncotermsLocation2',
        'incoterms_version' => 'getIncotermsVersion',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_sup_chn_loc1_addl_uuid' => 'getIncotermsSupChnLoc1AddlUuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'getIncotermsSupChnLoc2AddlUuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'getIncotermsSupChnDvtgLocAddlUuid',
        'deletion_indicator' => 'getDeletionIndicator',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'insp_sbst_has_no_time_or_quantity' => 'getInspSbstHasNoTimeOrQuantity',
        'invoice_date' => 'getInvoiceDate',
        'item_order_probability_in_percent' => 'getItemOrderProbabilityInPercent',
        'manual_invoice_maint_is_relevant' => 'getManualInvoiceMaintIsRelevant',
        'max_nmbr_of_partial_delivery' => 'getMaxNmbrOfPartialDelivery',
        'order_combination_is_allowed' => 'getOrderCombinationIsAllowed',
        'order_is_blocked_for_customer' => 'getOrderIsBlockedForCustomer',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'getOverdelivTolrtdLmtRatioInPct',
        'partial_delivery_is_allowed' => 'getPartialDeliveryIsAllowed',
        'price_list_type' => 'getPriceListType',
        'product_unit_group' => 'getProductUnitGroup',
        'proof_of_delivery_time_value' => 'getProofOfDeliveryTimeValue',
        'sales_group' => 'getSalesGroup',
        'sales_item_proposal' => 'getSalesItemProposal',
        'sales_office' => 'getSalesOffice',
        'shipping_condition' => 'getShippingCondition',
        'sls_doc_is_rlvt_for_proof_of_deliv' => 'getSlsDocIsRlvtForProofOfDeliv',
        'sls_unlmtd_ovrdeliv_is_allwd' => 'getSlsUnlmtdOvrdelivIsAllwd',
        'supplying_plant' => 'getSupplyingPlant',
        'sales_district' => 'getSalesDistrict',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'getUnderdelivTolrtdLmtRatioInPct',
        'invoice_list_schedule' => 'getInvoiceListSchedule',
        'exchange_rate_type' => 'getExchangeRateType',
        'additional_customer_group1' => 'getAdditionalCustomerGroup1',
        'additional_customer_group2' => 'getAdditionalCustomerGroup2',
        'additional_customer_group3' => 'getAdditionalCustomerGroup3',
        'additional_customer_group4' => 'getAdditionalCustomerGroup4',
        'additional_customer_group5' => 'getAdditionalCustomerGroup5',
        'payment_guarantee_procedure' => 'getPaymentGuaranteeProcedure',
        'customer_account_group' => 'getCustomerAccountGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_by_customer', $data ?? [], null);
        $this->setIfExists('authorization_group', $data ?? [], null);
        $this->setIfExists('billing_is_blocked_for_customer', $data ?? [], null);
        $this->setIfExists('complete_delivery_is_defined', $data ?? [], null);
        $this->setIfExists('credit_control_area', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('cust_is_rlvt_for_settlmt_mgmt', $data ?? [], null);
        $this->setIfExists('customer_abc_classification', $data ?? [], null);
        $this->setIfExists('customer_account_assignment_group', $data ?? [], null);
        $this->setIfExists('customer_group', $data ?? [], null);
        $this->setIfExists('customer_is_rebate_relevant', $data ?? [], null);
        $this->setIfExists('customer_payment_terms', $data ?? [], null);
        $this->setIfExists('customer_price_group', $data ?? [], null);
        $this->setIfExists('customer_pricing_procedure', $data ?? [], null);
        $this->setIfExists('cust_prod_proposal_procedure', $data ?? [], null);
        $this->setIfExists('delivery_is_blocked_for_customer', $data ?? [], null);
        $this->setIfExists('delivery_priority', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('incoterms_version', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_loc1_addl_uuid', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_loc2_addl_uuid', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_dvtg_loc_addl_uuid', $data ?? [], null);
        $this->setIfExists('deletion_indicator', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('insp_sbst_has_no_time_or_quantity', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('item_order_probability_in_percent', $data ?? [], null);
        $this->setIfExists('manual_invoice_maint_is_relevant', $data ?? [], null);
        $this->setIfExists('max_nmbr_of_partial_delivery', $data ?? [], null);
        $this->setIfExists('order_combination_is_allowed', $data ?? [], null);
        $this->setIfExists('order_is_blocked_for_customer', $data ?? [], null);
        $this->setIfExists('overdeliv_tolrtd_lmt_ratio_in_pct', $data ?? [], null);
        $this->setIfExists('partial_delivery_is_allowed', $data ?? [], null);
        $this->setIfExists('price_list_type', $data ?? [], null);
        $this->setIfExists('product_unit_group', $data ?? [], null);
        $this->setIfExists('proof_of_delivery_time_value', $data ?? [], null);
        $this->setIfExists('sales_group', $data ?? [], null);
        $this->setIfExists('sales_item_proposal', $data ?? [], null);
        $this->setIfExists('sales_office', $data ?? [], null);
        $this->setIfExists('shipping_condition', $data ?? [], null);
        $this->setIfExists('sls_doc_is_rlvt_for_proof_of_deliv', $data ?? [], null);
        $this->setIfExists('sls_unlmtd_ovrdeliv_is_allwd', $data ?? [], null);
        $this->setIfExists('supplying_plant', $data ?? [], null);
        $this->setIfExists('sales_district', $data ?? [], null);
        $this->setIfExists('underdeliv_tolrtd_lmt_ratio_in_pct', $data ?? [], null);
        $this->setIfExists('invoice_list_schedule', $data ?? [], null);
        $this->setIfExists('exchange_rate_type', $data ?? [], null);
        $this->setIfExists('additional_customer_group1', $data ?? [], null);
        $this->setIfExists('additional_customer_group2', $data ?? [], null);
        $this->setIfExists('additional_customer_group3', $data ?? [], null);
        $this->setIfExists('additional_customer_group4', $data ?? [], null);
        $this->setIfExists('additional_customer_group5', $data ?? [], null);
        $this->setIfExists('payment_guarantee_procedure', $data ?? [], null);
        $this->setIfExists('customer_account_group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['account_by_customer']) && (mb_strlen($this->container['account_by_customer']) > 12)) {
            $invalidProperties[] = "invalid value for 'account_by_customer', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['authorization_group']) && (mb_strlen($this->container['authorization_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'authorization_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['billing_is_blocked_for_customer']) && (mb_strlen($this->container['billing_is_blocked_for_customer']) > 2)) {
            $invalidProperties[] = "invalid value for 'billing_is_blocked_for_customer', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['credit_control_area']) && (mb_strlen($this->container['credit_control_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'credit_control_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['customer_abc_classification']) && (mb_strlen($this->container['customer_abc_classification']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_abc_classification', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_account_assignment_group']) && (mb_strlen($this->container['customer_account_assignment_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_account_assignment_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_group']) && (mb_strlen($this->container['customer_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_payment_terms']) && (mb_strlen($this->container['customer_payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['customer_price_group']) && (mb_strlen($this->container['customer_price_group']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_price_group', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['customer_pricing_procedure']) && (mb_strlen($this->container['customer_pricing_procedure']) > 2)) {
            $invalidProperties[] = "invalid value for 'customer_pricing_procedure', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['cust_prod_proposal_procedure']) && (mb_strlen($this->container['cust_prod_proposal_procedure']) > 2)) {
            $invalidProperties[] = "invalid value for 'cust_prod_proposal_procedure', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_is_blocked_for_customer']) && (mb_strlen($this->container['delivery_is_blocked_for_customer']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_is_blocked_for_customer', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_priority']) && (mb_strlen($this->container['delivery_priority']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_priority', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_version']) && (mb_strlen($this->container['incoterms_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'incoterms_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['invoice_date']) && (mb_strlen($this->container['invoice_date']) > 2)) {
            $invalidProperties[] = "invalid value for 'invoice_date', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['item_order_probability_in_percent']) && (mb_strlen($this->container['item_order_probability_in_percent']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_order_probability_in_percent', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['order_is_blocked_for_customer']) && (mb_strlen($this->container['order_is_blocked_for_customer']) > 2)) {
            $invalidProperties[] = "invalid value for 'order_is_blocked_for_customer', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['partial_delivery_is_allowed']) && (mb_strlen($this->container['partial_delivery_is_allowed']) > 1)) {
            $invalidProperties[] = "invalid value for 'partial_delivery_is_allowed', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['price_list_type']) && (mb_strlen($this->container['price_list_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'price_list_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['product_unit_group']) && (mb_strlen($this->container['product_unit_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'product_unit_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_group']) && (mb_strlen($this->container['sales_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'sales_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['sales_item_proposal']) && (mb_strlen($this->container['sales_item_proposal']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_item_proposal', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_office']) && (mb_strlen($this->container['sales_office']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_office', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_condition']) && (mb_strlen($this->container['shipping_condition']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_condition', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['supplying_plant']) && (mb_strlen($this->container['supplying_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'supplying_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_district']) && (mb_strlen($this->container['sales_district']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_district', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['invoice_list_schedule']) && (mb_strlen($this->container['invoice_list_schedule']) > 2)) {
            $invalidProperties[] = "invalid value for 'invoice_list_schedule', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['exchange_rate_type']) && (mb_strlen($this->container['exchange_rate_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'exchange_rate_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['additional_customer_group1']) && (mb_strlen($this->container['additional_customer_group1']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group1', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group2']) && (mb_strlen($this->container['additional_customer_group2']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group2', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group3']) && (mb_strlen($this->container['additional_customer_group3']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group4']) && (mb_strlen($this->container['additional_customer_group4']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group4', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['additional_customer_group5']) && (mb_strlen($this->container['additional_customer_group5']) > 3)) {
            $invalidProperties[] = "invalid value for 'additional_customer_group5', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['payment_guarantee_procedure']) && (mb_strlen($this->container['payment_guarantee_procedure']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_guarantee_procedure', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['customer_account_group']) && (mb_strlen($this->container['customer_account_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_account_group', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_by_customer
     *
     * @return string|null
     */
    public function getAccountByCustomer()
    {
        return $this->container['account_by_customer'];
    }

    /**
     * Sets account_by_customer
     *
     * @param string|null $account_by_customer Shipper's (Our) Account Number at the Customer or Vendor
     *
     * @return self
     */
    public function setAccountByCustomer($account_by_customer)
    {
        if (is_null($account_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'account_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($account_by_customer) && (mb_strlen($account_by_customer) > 12)) {
            throw new \InvalidArgumentException('invalid length for $account_by_customer when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 12.');
        }

        $this->container['account_by_customer'] = $account_by_customer;

        return $this;
    }

    /**
     * Gets authorization_group
     *
     * @return string|null
     */
    public function getAuthorizationGroup()
    {
        return $this->container['authorization_group'];
    }

    /**
     * Sets authorization_group
     *
     * @param string|null $authorization_group authorization_group
     *
     * @return self
     */
    public function setAuthorizationGroup($authorization_group)
    {
        if (is_null($authorization_group)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_group) && (mb_strlen($authorization_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $authorization_group when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['authorization_group'] = $authorization_group;

        return $this;
    }

    /**
     * Gets billing_is_blocked_for_customer
     *
     * @return string|null
     */
    public function getBillingIsBlockedForCustomer()
    {
        return $this->container['billing_is_blocked_for_customer'];
    }

    /**
     * Sets billing_is_blocked_for_customer
     *
     * @param string|null $billing_is_blocked_for_customer Billing block for customer (sales and distribution)
     *
     * @return self
     */
    public function setBillingIsBlockedForCustomer($billing_is_blocked_for_customer)
    {
        if (is_null($billing_is_blocked_for_customer)) {
            array_push($this->openAPINullablesSetToNull, 'billing_is_blocked_for_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_is_blocked_for_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($billing_is_blocked_for_customer) && (mb_strlen($billing_is_blocked_for_customer) > 2)) {
            throw new \InvalidArgumentException('invalid length for $billing_is_blocked_for_customer when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['billing_is_blocked_for_customer'] = $billing_is_blocked_for_customer;

        return $this;
    }

    /**
     * Gets complete_delivery_is_defined
     *
     * @return bool|null
     */
    public function getCompleteDeliveryIsDefined()
    {
        return $this->container['complete_delivery_is_defined'];
    }

    /**
     * Sets complete_delivery_is_defined
     *
     * @param bool|null $complete_delivery_is_defined Complete Delivery Defined for Each Sales Order
     *
     * @return self
     */
    public function setCompleteDeliveryIsDefined($complete_delivery_is_defined)
    {
        if (is_null($complete_delivery_is_defined)) {
            array_push($this->openAPINullablesSetToNull, 'complete_delivery_is_defined');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complete_delivery_is_defined', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complete_delivery_is_defined'] = $complete_delivery_is_defined;

        return $this;
    }

    /**
     * Gets credit_control_area
     *
     * @return string|null
     */
    public function getCreditControlArea()
    {
        return $this->container['credit_control_area'];
    }

    /**
     * Sets credit_control_area
     *
     * @param string|null $credit_control_area credit_control_area
     *
     * @return self
     */
    public function setCreditControlArea($credit_control_area)
    {
        if (is_null($credit_control_area)) {
            array_push($this->openAPINullablesSetToNull, 'credit_control_area');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_control_area', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($credit_control_area) && (mb_strlen($credit_control_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $credit_control_area when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['credit_control_area'] = $credit_control_area;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency) && (mb_strlen($currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets cust_is_rlvt_for_settlmt_mgmt
     *
     * @return bool|null
     */
    public function getCustIsRlvtForSettlmtMgmt()
    {
        return $this->container['cust_is_rlvt_for_settlmt_mgmt'];
    }

    /**
     * Sets cust_is_rlvt_for_settlmt_mgmt
     *
     * @param bool|null $cust_is_rlvt_for_settlmt_mgmt Indicator: Relevant for Settlement Management
     *
     * @return self
     */
    public function setCustIsRlvtForSettlmtMgmt($cust_is_rlvt_for_settlmt_mgmt)
    {
        if (is_null($cust_is_rlvt_for_settlmt_mgmt)) {
            array_push($this->openAPINullablesSetToNull, 'cust_is_rlvt_for_settlmt_mgmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cust_is_rlvt_for_settlmt_mgmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cust_is_rlvt_for_settlmt_mgmt'] = $cust_is_rlvt_for_settlmt_mgmt;

        return $this;
    }

    /**
     * Gets customer_abc_classification
     *
     * @return string|null
     */
    public function getCustomerAbcClassification()
    {
        return $this->container['customer_abc_classification'];
    }

    /**
     * Sets customer_abc_classification
     *
     * @param string|null $customer_abc_classification Customer classification (ABC analysis)
     *
     * @return self
     */
    public function setCustomerAbcClassification($customer_abc_classification)
    {
        if (is_null($customer_abc_classification)) {
            array_push($this->openAPINullablesSetToNull, 'customer_abc_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_abc_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_abc_classification) && (mb_strlen($customer_abc_classification) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_abc_classification when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_abc_classification'] = $customer_abc_classification;

        return $this;
    }

    /**
     * Gets customer_account_assignment_group
     *
     * @return string|null
     */
    public function getCustomerAccountAssignmentGroup()
    {
        return $this->container['customer_account_assignment_group'];
    }

    /**
     * Sets customer_account_assignment_group
     *
     * @param string|null $customer_account_assignment_group Account Assignment Group for Customer
     *
     * @return self
     */
    public function setCustomerAccountAssignmentGroup($customer_account_assignment_group)
    {
        if (is_null($customer_account_assignment_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_account_assignment_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_account_assignment_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_account_assignment_group) && (mb_strlen($customer_account_assignment_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_assignment_group when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_account_assignment_group'] = $customer_account_assignment_group;

        return $this;
    }

    /**
     * Gets customer_group
     *
     * @return string|null
     */
    public function getCustomerGroup()
    {
        return $this->container['customer_group'];
    }

    /**
     * Sets customer_group
     *
     * @param string|null $customer_group customer_group
     *
     * @return self
     */
    public function setCustomerGroup($customer_group)
    {
        if (is_null($customer_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_group) && (mb_strlen($customer_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_group when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_group'] = $customer_group;

        return $this;
    }

    /**
     * Gets customer_is_rebate_relevant
     *
     * @return bool|null
     */
    public function getCustomerIsRebateRelevant()
    {
        return $this->container['customer_is_rebate_relevant'];
    }

    /**
     * Sets customer_is_rebate_relevant
     *
     * @param bool|null $customer_is_rebate_relevant Indicator: Customer Is Rebate-Relevant
     *
     * @return self
     */
    public function setCustomerIsRebateRelevant($customer_is_rebate_relevant)
    {
        if (is_null($customer_is_rebate_relevant)) {
            array_push($this->openAPINullablesSetToNull, 'customer_is_rebate_relevant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_is_rebate_relevant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_is_rebate_relevant'] = $customer_is_rebate_relevant;

        return $this;
    }

    /**
     * Gets customer_payment_terms
     *
     * @return string|null
     */
    public function getCustomerPaymentTerms()
    {
        return $this->container['customer_payment_terms'];
    }

    /**
     * Sets customer_payment_terms
     *
     * @param string|null $customer_payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setCustomerPaymentTerms($customer_payment_terms)
    {
        if (is_null($customer_payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'customer_payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_payment_terms) && (mb_strlen($customer_payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_payment_terms when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['customer_payment_terms'] = $customer_payment_terms;

        return $this;
    }

    /**
     * Gets customer_price_group
     *
     * @return string|null
     */
    public function getCustomerPriceGroup()
    {
        return $this->container['customer_price_group'];
    }

    /**
     * Sets customer_price_group
     *
     * @param string|null $customer_price_group customer_price_group
     *
     * @return self
     */
    public function setCustomerPriceGroup($customer_price_group)
    {
        if (is_null($customer_price_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_price_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_price_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_price_group) && (mb_strlen($customer_price_group) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_price_group when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_price_group'] = $customer_price_group;

        return $this;
    }

    /**
     * Gets customer_pricing_procedure
     *
     * @return string|null
     */
    public function getCustomerPricingProcedure()
    {
        return $this->container['customer_pricing_procedure'];
    }

    /**
     * Sets customer_pricing_procedure
     *
     * @param string|null $customer_pricing_procedure Customer Classification for Pricing Procedure Determination
     *
     * @return self
     */
    public function setCustomerPricingProcedure($customer_pricing_procedure)
    {
        if (is_null($customer_pricing_procedure)) {
            array_push($this->openAPINullablesSetToNull, 'customer_pricing_procedure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_pricing_procedure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_pricing_procedure) && (mb_strlen($customer_pricing_procedure) > 2)) {
            throw new \InvalidArgumentException('invalid length for $customer_pricing_procedure when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['customer_pricing_procedure'] = $customer_pricing_procedure;

        return $this;
    }

    /**
     * Gets cust_prod_proposal_procedure
     *
     * @return string|null
     */
    public function getCustProdProposalProcedure()
    {
        return $this->container['cust_prod_proposal_procedure'];
    }

    /**
     * Sets cust_prod_proposal_procedure
     *
     * @param string|null $cust_prod_proposal_procedure Customer procedure for product proposal
     *
     * @return self
     */
    public function setCustProdProposalProcedure($cust_prod_proposal_procedure)
    {
        if (is_null($cust_prod_proposal_procedure)) {
            array_push($this->openAPINullablesSetToNull, 'cust_prod_proposal_procedure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cust_prod_proposal_procedure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cust_prod_proposal_procedure) && (mb_strlen($cust_prod_proposal_procedure) > 2)) {
            throw new \InvalidArgumentException('invalid length for $cust_prod_proposal_procedure when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['cust_prod_proposal_procedure'] = $cust_prod_proposal_procedure;

        return $this;
    }

    /**
     * Gets delivery_is_blocked_for_customer
     *
     * @return string|null
     */
    public function getDeliveryIsBlockedForCustomer()
    {
        return $this->container['delivery_is_blocked_for_customer'];
    }

    /**
     * Sets delivery_is_blocked_for_customer
     *
     * @param string|null $delivery_is_blocked_for_customer Customer delivery block (sales area)
     *
     * @return self
     */
    public function setDeliveryIsBlockedForCustomer($delivery_is_blocked_for_customer)
    {
        if (is_null($delivery_is_blocked_for_customer)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_is_blocked_for_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_is_blocked_for_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_is_blocked_for_customer) && (mb_strlen($delivery_is_blocked_for_customer) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_is_blocked_for_customer when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['delivery_is_blocked_for_customer'] = $delivery_is_blocked_for_customer;

        return $this;
    }

    /**
     * Gets delivery_priority
     *
     * @return string|null
     */
    public function getDeliveryPriority()
    {
        return $this->container['delivery_priority'];
    }

    /**
     * Sets delivery_priority
     *
     * @param string|null $delivery_priority delivery_priority
     *
     * @return self
     */
    public function setDeliveryPriority($delivery_priority)
    {
        if (is_null($delivery_priority)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_priority) && (mb_strlen($delivery_priority) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_priority when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['delivery_priority'] = $delivery_priority;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets incoterms_version
     *
     * @return string|null
     */
    public function getIncotermsVersion()
    {
        return $this->container['incoterms_version'];
    }

    /**
     * Sets incoterms_version
     *
     * @param string|null $incoterms_version incoterms_version
     *
     * @return self
     */
    public function setIncotermsVersion($incoterms_version)
    {
        if (is_null($incoterms_version)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_version) && (mb_strlen($incoterms_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_version when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['incoterms_version'] = $incoterms_version;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_loc1_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnLoc1AddlUuid()
    {
        return $this->container['incoterms_sup_chn_loc1_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_loc1_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_loc1_addl_uuid incoterms_sup_chn_loc1_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnLoc1AddlUuid($incoterms_sup_chn_loc1_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_loc1_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_loc1_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_loc1_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_loc1_addl_uuid'] = $incoterms_sup_chn_loc1_addl_uuid;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_loc2_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnLoc2AddlUuid()
    {
        return $this->container['incoterms_sup_chn_loc2_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_loc2_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_loc2_addl_uuid incoterms_sup_chn_loc2_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnLoc2AddlUuid($incoterms_sup_chn_loc2_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_loc2_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_loc2_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_loc2_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_loc2_addl_uuid'] = $incoterms_sup_chn_loc2_addl_uuid;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnDvtgLocAddlUuid()
    {
        return $this->container['incoterms_sup_chn_dvtg_loc_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_dvtg_loc_addl_uuid incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnDvtgLocAddlUuid($incoterms_sup_chn_dvtg_loc_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_dvtg_loc_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_dvtg_loc_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_dvtg_loc_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_dvtg_loc_addl_uuid'] = $incoterms_sup_chn_dvtg_loc_addl_uuid;

        return $this;
    }

    /**
     * Gets deletion_indicator
     *
     * @return bool|null
     */
    public function getDeletionIndicator()
    {
        return $this->container['deletion_indicator'];
    }

    /**
     * Sets deletion_indicator
     *
     * @param bool|null $deletion_indicator Deletion flag for customer (sales level)
     *
     * @return self
     */
    public function setDeletionIndicator($deletion_indicator)
    {
        if (is_null($deletion_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'deletion_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletion_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletion_indicator'] = $deletion_indicator;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets insp_sbst_has_no_time_or_quantity
     *
     * @return bool|null
     */
    public function getInspSbstHasNoTimeOrQuantity()
    {
        return $this->container['insp_sbst_has_no_time_or_quantity'];
    }

    /**
     * Sets insp_sbst_has_no_time_or_quantity
     *
     * @param bool|null $insp_sbst_has_no_time_or_quantity Relevant for price determination ID
     *
     * @return self
     */
    public function setInspSbstHasNoTimeOrQuantity($insp_sbst_has_no_time_or_quantity)
    {
        if (is_null($insp_sbst_has_no_time_or_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'insp_sbst_has_no_time_or_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('insp_sbst_has_no_time_or_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['insp_sbst_has_no_time_or_quantity'] = $insp_sbst_has_no_time_or_quantity;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return string|null
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param string|null $invoice_date Invoice Dates (Calendar Identification)
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($invoice_date) && (mb_strlen($invoice_date) > 2)) {
            throw new \InvalidArgumentException('invalid length for $invoice_date when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets item_order_probability_in_percent
     *
     * @return string|null
     */
    public function getItemOrderProbabilityInPercent()
    {
        return $this->container['item_order_probability_in_percent'];
    }

    /**
     * Sets item_order_probability_in_percent
     *
     * @param string|null $item_order_probability_in_percent Order Probability of the Item
     *
     * @return self
     */
    public function setItemOrderProbabilityInPercent($item_order_probability_in_percent)
    {
        if (is_null($item_order_probability_in_percent)) {
            array_push($this->openAPINullablesSetToNull, 'item_order_probability_in_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_order_probability_in_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_order_probability_in_percent) && (mb_strlen($item_order_probability_in_percent) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_order_probability_in_percent when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['item_order_probability_in_percent'] = $item_order_probability_in_percent;

        return $this;
    }

    /**
     * Gets manual_invoice_maint_is_relevant
     *
     * @return bool|null
     */
    public function getManualInvoiceMaintIsRelevant()
    {
        return $this->container['manual_invoice_maint_is_relevant'];
    }

    /**
     * Sets manual_invoice_maint_is_relevant
     *
     * @param bool|null $manual_invoice_maint_is_relevant Manual Invoice Maintenance
     *
     * @return self
     */
    public function setManualInvoiceMaintIsRelevant($manual_invoice_maint_is_relevant)
    {
        if (is_null($manual_invoice_maint_is_relevant)) {
            array_push($this->openAPINullablesSetToNull, 'manual_invoice_maint_is_relevant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manual_invoice_maint_is_relevant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manual_invoice_maint_is_relevant'] = $manual_invoice_maint_is_relevant;

        return $this;
    }

    /**
     * Gets max_nmbr_of_partial_delivery
     *
     * @return float|null
     */
    public function getMaxNmbrOfPartialDelivery()
    {
        return $this->container['max_nmbr_of_partial_delivery'];
    }

    /**
     * Sets max_nmbr_of_partial_delivery
     *
     * @param float|null $max_nmbr_of_partial_delivery Maximum Number of Partial Deliveries Allowed Per Item
     *
     * @return self
     */
    public function setMaxNmbrOfPartialDelivery($max_nmbr_of_partial_delivery)
    {
        if (is_null($max_nmbr_of_partial_delivery)) {
            array_push($this->openAPINullablesSetToNull, 'max_nmbr_of_partial_delivery');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_nmbr_of_partial_delivery', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['max_nmbr_of_partial_delivery'] = $max_nmbr_of_partial_delivery;

        return $this;
    }

    /**
     * Gets order_combination_is_allowed
     *
     * @return bool|null
     */
    public function getOrderCombinationIsAllowed()
    {
        return $this->container['order_combination_is_allowed'];
    }

    /**
     * Sets order_combination_is_allowed
     *
     * @param bool|null $order_combination_is_allowed Order Combination Indicator
     *
     * @return self
     */
    public function setOrderCombinationIsAllowed($order_combination_is_allowed)
    {
        if (is_null($order_combination_is_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'order_combination_is_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_combination_is_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order_combination_is_allowed'] = $order_combination_is_allowed;

        return $this;
    }

    /**
     * Gets order_is_blocked_for_customer
     *
     * @return string|null
     */
    public function getOrderIsBlockedForCustomer()
    {
        return $this->container['order_is_blocked_for_customer'];
    }

    /**
     * Sets order_is_blocked_for_customer
     *
     * @param string|null $order_is_blocked_for_customer Customer order block (sales area)
     *
     * @return self
     */
    public function setOrderIsBlockedForCustomer($order_is_blocked_for_customer)
    {
        if (is_null($order_is_blocked_for_customer)) {
            array_push($this->openAPINullablesSetToNull, 'order_is_blocked_for_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_is_blocked_for_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_is_blocked_for_customer) && (mb_strlen($order_is_blocked_for_customer) > 2)) {
            throw new \InvalidArgumentException('invalid length for $order_is_blocked_for_customer when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['order_is_blocked_for_customer'] = $order_is_blocked_for_customer;

        return $this;
    }

    /**
     * Gets overdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return float|null
     */
    public function getOverdelivTolrtdLmtRatioInPct()
    {
        return $this->container['overdeliv_tolrtd_lmt_ratio_in_pct'];
    }

    /**
     * Sets overdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @param float|null $overdeliv_tolrtd_lmt_ratio_in_pct Overdelivery Tolerance
     *
     * @return self
     */
    public function setOverdelivTolrtdLmtRatioInPct($overdeliv_tolrtd_lmt_ratio_in_pct)
    {
        if (is_null($overdeliv_tolrtd_lmt_ratio_in_pct)) {
            array_push($this->openAPINullablesSetToNull, 'overdeliv_tolrtd_lmt_ratio_in_pct');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overdeliv_tolrtd_lmt_ratio_in_pct', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['overdeliv_tolrtd_lmt_ratio_in_pct'] = $overdeliv_tolrtd_lmt_ratio_in_pct;

        return $this;
    }

    /**
     * Gets partial_delivery_is_allowed
     *
     * @return string|null
     */
    public function getPartialDeliveryIsAllowed()
    {
        return $this->container['partial_delivery_is_allowed'];
    }

    /**
     * Sets partial_delivery_is_allowed
     *
     * @param string|null $partial_delivery_is_allowed Partial Delivery at Item Level
     *
     * @return self
     */
    public function setPartialDeliveryIsAllowed($partial_delivery_is_allowed)
    {
        if (is_null($partial_delivery_is_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'partial_delivery_is_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partial_delivery_is_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($partial_delivery_is_allowed) && (mb_strlen($partial_delivery_is_allowed) > 1)) {
            throw new \InvalidArgumentException('invalid length for $partial_delivery_is_allowed when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['partial_delivery_is_allowed'] = $partial_delivery_is_allowed;

        return $this;
    }

    /**
     * Gets price_list_type
     *
     * @return string|null
     */
    public function getPriceListType()
    {
        return $this->container['price_list_type'];
    }

    /**
     * Sets price_list_type
     *
     * @param string|null $price_list_type price_list_type
     *
     * @return self
     */
    public function setPriceListType($price_list_type)
    {
        if (is_null($price_list_type)) {
            array_push($this->openAPINullablesSetToNull, 'price_list_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price_list_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($price_list_type) && (mb_strlen($price_list_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $price_list_type when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['price_list_type'] = $price_list_type;

        return $this;
    }

    /**
     * Gets product_unit_group
     *
     * @return string|null
     */
    public function getProductUnitGroup()
    {
        return $this->container['product_unit_group'];
    }

    /**
     * Sets product_unit_group
     *
     * @param string|null $product_unit_group Unit of Measure Group
     *
     * @return self
     */
    public function setProductUnitGroup($product_unit_group)
    {
        if (is_null($product_unit_group)) {
            array_push($this->openAPINullablesSetToNull, 'product_unit_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_unit_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_unit_group) && (mb_strlen($product_unit_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $product_unit_group when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['product_unit_group'] = $product_unit_group;

        return $this;
    }

    /**
     * Gets proof_of_delivery_time_value
     *
     * @return float|null
     */
    public function getProofOfDeliveryTimeValue()
    {
        return $this->container['proof_of_delivery_time_value'];
    }

    /**
     * Sets proof_of_delivery_time_value
     *
     * @param float|null $proof_of_delivery_time_value Timeframe for Confirmation of POD
     *
     * @return self
     */
    public function setProofOfDeliveryTimeValue($proof_of_delivery_time_value)
    {
        if (is_null($proof_of_delivery_time_value)) {
            array_push($this->openAPINullablesSetToNull, 'proof_of_delivery_time_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('proof_of_delivery_time_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['proof_of_delivery_time_value'] = $proof_of_delivery_time_value;

        return $this;
    }

    /**
     * Gets sales_group
     *
     * @return string|null
     */
    public function getSalesGroup()
    {
        return $this->container['sales_group'];
    }

    /**
     * Sets sales_group
     *
     * @param string|null $sales_group sales_group
     *
     * @return self
     */
    public function setSalesGroup($sales_group)
    {
        if (is_null($sales_group)) {
            array_push($this->openAPINullablesSetToNull, 'sales_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_group) && (mb_strlen($sales_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sales_group when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['sales_group'] = $sales_group;

        return $this;
    }

    /**
     * Gets sales_item_proposal
     *
     * @return string|null
     */
    public function getSalesItemProposal()
    {
        return $this->container['sales_item_proposal'];
    }

    /**
     * Sets sales_item_proposal
     *
     * @param string|null $sales_item_proposal sales_item_proposal
     *
     * @return self
     */
    public function setSalesItemProposal($sales_item_proposal)
    {
        if (is_null($sales_item_proposal)) {
            array_push($this->openAPINullablesSetToNull, 'sales_item_proposal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_item_proposal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_item_proposal) && (mb_strlen($sales_item_proposal) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_item_proposal when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['sales_item_proposal'] = $sales_item_proposal;

        return $this;
    }

    /**
     * Gets sales_office
     *
     * @return string|null
     */
    public function getSalesOffice()
    {
        return $this->container['sales_office'];
    }

    /**
     * Sets sales_office
     *
     * @param string|null $sales_office sales_office
     *
     * @return self
     */
    public function setSalesOffice($sales_office)
    {
        if (is_null($sales_office)) {
            array_push($this->openAPINullablesSetToNull, 'sales_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_office) && (mb_strlen($sales_office) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_office when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['sales_office'] = $sales_office;

        return $this;
    }

    /**
     * Gets shipping_condition
     *
     * @return string|null
     */
    public function getShippingCondition()
    {
        return $this->container['shipping_condition'];
    }

    /**
     * Sets shipping_condition
     *
     * @param string|null $shipping_condition shipping_condition
     *
     * @return self
     */
    public function setShippingCondition($shipping_condition)
    {
        if (is_null($shipping_condition)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_condition) && (mb_strlen($shipping_condition) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_condition when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['shipping_condition'] = $shipping_condition;

        return $this;
    }

    /**
     * Gets sls_doc_is_rlvt_for_proof_of_deliv
     *
     * @return bool|null
     */
    public function getSlsDocIsRlvtForProofOfDeliv()
    {
        return $this->container['sls_doc_is_rlvt_for_proof_of_deliv'];
    }

    /**
     * Sets sls_doc_is_rlvt_for_proof_of_deliv
     *
     * @param bool|null $sls_doc_is_rlvt_for_proof_of_deliv Relevant for POD processing
     *
     * @return self
     */
    public function setSlsDocIsRlvtForProofOfDeliv($sls_doc_is_rlvt_for_proof_of_deliv)
    {
        if (is_null($sls_doc_is_rlvt_for_proof_of_deliv)) {
            array_push($this->openAPINullablesSetToNull, 'sls_doc_is_rlvt_for_proof_of_deliv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sls_doc_is_rlvt_for_proof_of_deliv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sls_doc_is_rlvt_for_proof_of_deliv'] = $sls_doc_is_rlvt_for_proof_of_deliv;

        return $this;
    }

    /**
     * Gets sls_unlmtd_ovrdeliv_is_allwd
     *
     * @return bool|null
     */
    public function getSlsUnlmtdOvrdelivIsAllwd()
    {
        return $this->container['sls_unlmtd_ovrdeliv_is_allwd'];
    }

    /**
     * Sets sls_unlmtd_ovrdeliv_is_allwd
     *
     * @param bool|null $sls_unlmtd_ovrdeliv_is_allwd Unlimited Overdelivery Allowed
     *
     * @return self
     */
    public function setSlsUnlmtdOvrdelivIsAllwd($sls_unlmtd_ovrdeliv_is_allwd)
    {
        if (is_null($sls_unlmtd_ovrdeliv_is_allwd)) {
            array_push($this->openAPINullablesSetToNull, 'sls_unlmtd_ovrdeliv_is_allwd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sls_unlmtd_ovrdeliv_is_allwd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sls_unlmtd_ovrdeliv_is_allwd'] = $sls_unlmtd_ovrdeliv_is_allwd;

        return $this;
    }

    /**
     * Gets supplying_plant
     *
     * @return string|null
     */
    public function getSupplyingPlant()
    {
        return $this->container['supplying_plant'];
    }

    /**
     * Sets supplying_plant
     *
     * @param string|null $supplying_plant Delivering Plant (Own or External)
     *
     * @return self
     */
    public function setSupplyingPlant($supplying_plant)
    {
        if (is_null($supplying_plant)) {
            array_push($this->openAPINullablesSetToNull, 'supplying_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplying_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplying_plant) && (mb_strlen($supplying_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $supplying_plant when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['supplying_plant'] = $supplying_plant;

        return $this;
    }

    /**
     * Gets sales_district
     *
     * @return string|null
     */
    public function getSalesDistrict()
    {
        return $this->container['sales_district'];
    }

    /**
     * Sets sales_district
     *
     * @param string|null $sales_district sales_district
     *
     * @return self
     */
    public function setSalesDistrict($sales_district)
    {
        if (is_null($sales_district)) {
            array_push($this->openAPINullablesSetToNull, 'sales_district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_district) && (mb_strlen($sales_district) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_district when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['sales_district'] = $sales_district;

        return $this;
    }

    /**
     * Gets underdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return float|null
     */
    public function getUnderdelivTolrtdLmtRatioInPct()
    {
        return $this->container['underdeliv_tolrtd_lmt_ratio_in_pct'];
    }

    /**
     * Sets underdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @param float|null $underdeliv_tolrtd_lmt_ratio_in_pct Underdelivery Tolerance
     *
     * @return self
     */
    public function setUnderdelivTolrtdLmtRatioInPct($underdeliv_tolrtd_lmt_ratio_in_pct)
    {
        if (is_null($underdeliv_tolrtd_lmt_ratio_in_pct)) {
            array_push($this->openAPINullablesSetToNull, 'underdeliv_tolrtd_lmt_ratio_in_pct');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('underdeliv_tolrtd_lmt_ratio_in_pct', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['underdeliv_tolrtd_lmt_ratio_in_pct'] = $underdeliv_tolrtd_lmt_ratio_in_pct;

        return $this;
    }

    /**
     * Gets invoice_list_schedule
     *
     * @return string|null
     */
    public function getInvoiceListSchedule()
    {
        return $this->container['invoice_list_schedule'];
    }

    /**
     * Sets invoice_list_schedule
     *
     * @param string|null $invoice_list_schedule Invoice List Schedule (calendar identification)
     *
     * @return self
     */
    public function setInvoiceListSchedule($invoice_list_schedule)
    {
        if (is_null($invoice_list_schedule)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_list_schedule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_list_schedule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($invoice_list_schedule) && (mb_strlen($invoice_list_schedule) > 2)) {
            throw new \InvalidArgumentException('invalid length for $invoice_list_schedule when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['invoice_list_schedule'] = $invoice_list_schedule;

        return $this;
    }

    /**
     * Gets exchange_rate_type
     *
     * @return string|null
     */
    public function getExchangeRateType()
    {
        return $this->container['exchange_rate_type'];
    }

    /**
     * Sets exchange_rate_type
     *
     * @param string|null $exchange_rate_type exchange_rate_type
     *
     * @return self
     */
    public function setExchangeRateType($exchange_rate_type)
    {
        if (is_null($exchange_rate_type)) {
            array_push($this->openAPINullablesSetToNull, 'exchange_rate_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exchange_rate_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($exchange_rate_type) && (mb_strlen($exchange_rate_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $exchange_rate_type when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['exchange_rate_type'] = $exchange_rate_type;

        return $this;
    }

    /**
     * Gets additional_customer_group1
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup1()
    {
        return $this->container['additional_customer_group1'];
    }

    /**
     * Sets additional_customer_group1
     *
     * @param string|null $additional_customer_group1 additional_customer_group1
     *
     * @return self
     */
    public function setAdditionalCustomerGroup1($additional_customer_group1)
    {
        if (is_null($additional_customer_group1)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group1) && (mb_strlen($additional_customer_group1) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group1 when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group1'] = $additional_customer_group1;

        return $this;
    }

    /**
     * Gets additional_customer_group2
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup2()
    {
        return $this->container['additional_customer_group2'];
    }

    /**
     * Sets additional_customer_group2
     *
     * @param string|null $additional_customer_group2 additional_customer_group2
     *
     * @return self
     */
    public function setAdditionalCustomerGroup2($additional_customer_group2)
    {
        if (is_null($additional_customer_group2)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group2) && (mb_strlen($additional_customer_group2) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group2 when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group2'] = $additional_customer_group2;

        return $this;
    }

    /**
     * Gets additional_customer_group3
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup3()
    {
        return $this->container['additional_customer_group3'];
    }

    /**
     * Sets additional_customer_group3
     *
     * @param string|null $additional_customer_group3 additional_customer_group3
     *
     * @return self
     */
    public function setAdditionalCustomerGroup3($additional_customer_group3)
    {
        if (is_null($additional_customer_group3)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group3) && (mb_strlen($additional_customer_group3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group3 when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group3'] = $additional_customer_group3;

        return $this;
    }

    /**
     * Gets additional_customer_group4
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup4()
    {
        return $this->container['additional_customer_group4'];
    }

    /**
     * Sets additional_customer_group4
     *
     * @param string|null $additional_customer_group4 additional_customer_group4
     *
     * @return self
     */
    public function setAdditionalCustomerGroup4($additional_customer_group4)
    {
        if (is_null($additional_customer_group4)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group4) && (mb_strlen($additional_customer_group4) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group4 when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group4'] = $additional_customer_group4;

        return $this;
    }

    /**
     * Gets additional_customer_group5
     *
     * @return string|null
     */
    public function getAdditionalCustomerGroup5()
    {
        return $this->container['additional_customer_group5'];
    }

    /**
     * Sets additional_customer_group5
     *
     * @param string|null $additional_customer_group5 additional_customer_group5
     *
     * @return self
     */
    public function setAdditionalCustomerGroup5($additional_customer_group5)
    {
        if (is_null($additional_customer_group5)) {
            array_push($this->openAPINullablesSetToNull, 'additional_customer_group5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_customer_group5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($additional_customer_group5) && (mb_strlen($additional_customer_group5) > 3)) {
            throw new \InvalidArgumentException('invalid length for $additional_customer_group5 when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['additional_customer_group5'] = $additional_customer_group5;

        return $this;
    }

    /**
     * Gets payment_guarantee_procedure
     *
     * @return string|null
     */
    public function getPaymentGuaranteeProcedure()
    {
        return $this->container['payment_guarantee_procedure'];
    }

    /**
     * Sets payment_guarantee_procedure
     *
     * @param string|null $payment_guarantee_procedure Customer payment guarantee procedure
     *
     * @return self
     */
    public function setPaymentGuaranteeProcedure($payment_guarantee_procedure)
    {
        if (is_null($payment_guarantee_procedure)) {
            array_push($this->openAPINullablesSetToNull, 'payment_guarantee_procedure');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_guarantee_procedure', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_guarantee_procedure) && (mb_strlen($payment_guarantee_procedure) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_guarantee_procedure when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['payment_guarantee_procedure'] = $payment_guarantee_procedure;

        return $this;
    }

    /**
     * Gets customer_account_group
     *
     * @return string|null
     */
    public function getCustomerAccountGroup()
    {
        return $this->container['customer_account_group'];
    }

    /**
     * Sets customer_account_group
     *
     * @param string|null $customer_account_group Customer Account Group
     *
     * @return self
     */
    public function setCustomerAccountGroup($customer_account_group)
    {
        if (is_null($customer_account_group)) {
            array_push($this->openAPINullablesSetToNull, 'customer_account_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_account_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_account_group) && (mb_strlen($customer_account_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_account_group when calling APIBUSINESSPARTNERACustomerSalesAreaTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['customer_account_group'] = $customer_account_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


