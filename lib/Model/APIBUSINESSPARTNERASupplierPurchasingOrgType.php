<?php
/**
 * APIBUSINESSPARTNERASupplierPurchasingOrgType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERASupplierPurchasingOrgType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERASupplierPurchasingOrgType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_SupplierPurchasingOrgType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supplier' => 'string',
        'purchasing_organization' => 'string',
        'automatic_evaluated_rcpt_settlmt' => 'bool',
        'calculation_schema_group_code' => 'string',
        'deletion_indicator' => 'bool',
        'evald_receipt_settlement_is_active' => 'bool',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_version' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'incoterms_sup_chn_loc1_addl_uuid' => 'string',
        'incoterms_sup_chn_loc2_addl_uuid' => 'string',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'string',
        'intrastat_crs_border_tr_mode' => 'string',
        'invoice_is_goods_receipt_based' => 'bool',
        'invoice_is_mm_service_entry_based' => 'bool',
        'material_planned_delivery_durn' => 'float',
        'minimum_order_amount' => 'float',
        'payment_terms' => 'string',
        'planning_cycle' => 'string',
        'pricing_date_control' => 'string',
        'prod_stock_and_sls_data_transf_prfl' => 'string',
        'product_unit_group' => 'string',
        'pur_ord_auto_generation_is_allowed' => 'bool',
        'purchase_order_currency' => 'string',
        'purchasing_group' => 'string',
        'purchasing_is_blocked_for_supplier' => 'bool',
        'rounding_profile' => 'string',
        'shipping_condition' => 'string',
        'suplr_discount_in_kind_is_granted' => 'bool',
        'suplr_invc_reval_is_allowed' => 'bool',
        'suplr_is_rlvt_for_settlmt_mgmt' => 'bool',
        'suplr_purg_org_is_rlvt_for_price_detn' => 'bool',
        'supplier_abc_classification_code' => 'string',
        'supplier_account_number' => 'string',
        'supplier_is_returns_supplier' => 'bool',
        'supplier_phone_number' => 'string',
        'supplier_resp_sales_person_name' => 'string',
        'supplier_confirmation_control_key' => 'string',
        'is_order_ackn_rqd' => 'bool',
        'authorization_group' => 'string',
        'supplier_account_group' => 'string',
        'to_partner_function' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierPurchasingOrgTypeToPartnerFunction',
        'to_purchasing_org_text' => '\BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierPurchasingOrgTypeToPurchasingOrgText'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'supplier' => null,
        'purchasing_organization' => null,
        'automatic_evaluated_rcpt_settlmt' => null,
        'calculation_schema_group_code' => null,
        'deletion_indicator' => null,
        'evald_receipt_settlement_is_active' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_version' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'incoterms_sup_chn_loc1_addl_uuid' => 'uuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'uuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'uuid',
        'intrastat_crs_border_tr_mode' => null,
        'invoice_is_goods_receipt_based' => null,
        'invoice_is_mm_service_entry_based' => null,
        'material_planned_delivery_durn' => 'decimal',
        'minimum_order_amount' => 'decimal',
        'payment_terms' => null,
        'planning_cycle' => null,
        'pricing_date_control' => null,
        'prod_stock_and_sls_data_transf_prfl' => null,
        'product_unit_group' => null,
        'pur_ord_auto_generation_is_allowed' => null,
        'purchase_order_currency' => null,
        'purchasing_group' => null,
        'purchasing_is_blocked_for_supplier' => null,
        'rounding_profile' => null,
        'shipping_condition' => null,
        'suplr_discount_in_kind_is_granted' => null,
        'suplr_invc_reval_is_allowed' => null,
        'suplr_is_rlvt_for_settlmt_mgmt' => null,
        'suplr_purg_org_is_rlvt_for_price_detn' => null,
        'supplier_abc_classification_code' => null,
        'supplier_account_number' => null,
        'supplier_is_returns_supplier' => null,
        'supplier_phone_number' => null,
        'supplier_resp_sales_person_name' => null,
        'supplier_confirmation_control_key' => null,
        'is_order_ackn_rqd' => null,
        'authorization_group' => null,
        'supplier_account_group' => null,
        'to_partner_function' => null,
        'to_purchasing_org_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'supplier' => false,
		'purchasing_organization' => false,
		'automatic_evaluated_rcpt_settlmt' => true,
		'calculation_schema_group_code' => true,
		'deletion_indicator' => true,
		'evald_receipt_settlement_is_active' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'incoterms_version' => true,
		'incoterms_location1' => true,
		'incoterms_location2' => true,
		'incoterms_sup_chn_loc1_addl_uuid' => true,
		'incoterms_sup_chn_loc2_addl_uuid' => true,
		'incoterms_sup_chn_dvtg_loc_addl_uuid' => true,
		'intrastat_crs_border_tr_mode' => true,
		'invoice_is_goods_receipt_based' => true,
		'invoice_is_mm_service_entry_based' => true,
		'material_planned_delivery_durn' => true,
		'minimum_order_amount' => true,
		'payment_terms' => true,
		'planning_cycle' => true,
		'pricing_date_control' => true,
		'prod_stock_and_sls_data_transf_prfl' => true,
		'product_unit_group' => true,
		'pur_ord_auto_generation_is_allowed' => true,
		'purchase_order_currency' => true,
		'purchasing_group' => true,
		'purchasing_is_blocked_for_supplier' => true,
		'rounding_profile' => true,
		'shipping_condition' => true,
		'suplr_discount_in_kind_is_granted' => true,
		'suplr_invc_reval_is_allowed' => true,
		'suplr_is_rlvt_for_settlmt_mgmt' => true,
		'suplr_purg_org_is_rlvt_for_price_detn' => true,
		'supplier_abc_classification_code' => true,
		'supplier_account_number' => true,
		'supplier_is_returns_supplier' => true,
		'supplier_phone_number' => true,
		'supplier_resp_sales_person_name' => true,
		'supplier_confirmation_control_key' => true,
		'is_order_ackn_rqd' => true,
		'authorization_group' => true,
		'supplier_account_group' => true,
		'to_partner_function' => false,
		'to_purchasing_org_text' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplier' => 'Supplier',
        'purchasing_organization' => 'PurchasingOrganization',
        'automatic_evaluated_rcpt_settlmt' => 'AutomaticEvaluatedRcptSettlmt',
        'calculation_schema_group_code' => 'CalculationSchemaGroupCode',
        'deletion_indicator' => 'DeletionIndicator',
        'evald_receipt_settlement_is_active' => 'EvaldReceiptSettlementIsActive',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_version' => 'IncotermsVersion',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'incoterms_sup_chn_loc1_addl_uuid' => 'IncotermsSupChnLoc1AddlUUID',
        'incoterms_sup_chn_loc2_addl_uuid' => 'IncotermsSupChnLoc2AddlUUID',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'IncotermsSupChnDvtgLocAddlUUID',
        'intrastat_crs_border_tr_mode' => 'IntrastatCrsBorderTrMode',
        'invoice_is_goods_receipt_based' => 'InvoiceIsGoodsReceiptBased',
        'invoice_is_mm_service_entry_based' => 'InvoiceIsMMServiceEntryBased',
        'material_planned_delivery_durn' => 'MaterialPlannedDeliveryDurn',
        'minimum_order_amount' => 'MinimumOrderAmount',
        'payment_terms' => 'PaymentTerms',
        'planning_cycle' => 'PlanningCycle',
        'pricing_date_control' => 'PricingDateControl',
        'prod_stock_and_sls_data_transf_prfl' => 'ProdStockAndSlsDataTransfPrfl',
        'product_unit_group' => 'ProductUnitGroup',
        'pur_ord_auto_generation_is_allowed' => 'PurOrdAutoGenerationIsAllowed',
        'purchase_order_currency' => 'PurchaseOrderCurrency',
        'purchasing_group' => 'PurchasingGroup',
        'purchasing_is_blocked_for_supplier' => 'PurchasingIsBlockedForSupplier',
        'rounding_profile' => 'RoundingProfile',
        'shipping_condition' => 'ShippingCondition',
        'suplr_discount_in_kind_is_granted' => 'SuplrDiscountInKindIsGranted',
        'suplr_invc_reval_is_allowed' => 'SuplrInvcRevalIsAllowed',
        'suplr_is_rlvt_for_settlmt_mgmt' => 'SuplrIsRlvtForSettlmtMgmt',
        'suplr_purg_org_is_rlvt_for_price_detn' => 'SuplrPurgOrgIsRlvtForPriceDetn',
        'supplier_abc_classification_code' => 'SupplierABCClassificationCode',
        'supplier_account_number' => 'SupplierAccountNumber',
        'supplier_is_returns_supplier' => 'SupplierIsReturnsSupplier',
        'supplier_phone_number' => 'SupplierPhoneNumber',
        'supplier_resp_sales_person_name' => 'SupplierRespSalesPersonName',
        'supplier_confirmation_control_key' => 'SupplierConfirmationControlKey',
        'is_order_ackn_rqd' => 'IsOrderAcknRqd',
        'authorization_group' => 'AuthorizationGroup',
        'supplier_account_group' => 'SupplierAccountGroup',
        'to_partner_function' => 'to_PartnerFunction',
        'to_purchasing_org_text' => 'to_PurchasingOrgText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplier' => 'setSupplier',
        'purchasing_organization' => 'setPurchasingOrganization',
        'automatic_evaluated_rcpt_settlmt' => 'setAutomaticEvaluatedRcptSettlmt',
        'calculation_schema_group_code' => 'setCalculationSchemaGroupCode',
        'deletion_indicator' => 'setDeletionIndicator',
        'evald_receipt_settlement_is_active' => 'setEvaldReceiptSettlementIsActive',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_version' => 'setIncotermsVersion',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'incoterms_sup_chn_loc1_addl_uuid' => 'setIncotermsSupChnLoc1AddlUuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'setIncotermsSupChnLoc2AddlUuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'setIncotermsSupChnDvtgLocAddlUuid',
        'intrastat_crs_border_tr_mode' => 'setIntrastatCrsBorderTrMode',
        'invoice_is_goods_receipt_based' => 'setInvoiceIsGoodsReceiptBased',
        'invoice_is_mm_service_entry_based' => 'setInvoiceIsMmServiceEntryBased',
        'material_planned_delivery_durn' => 'setMaterialPlannedDeliveryDurn',
        'minimum_order_amount' => 'setMinimumOrderAmount',
        'payment_terms' => 'setPaymentTerms',
        'planning_cycle' => 'setPlanningCycle',
        'pricing_date_control' => 'setPricingDateControl',
        'prod_stock_and_sls_data_transf_prfl' => 'setProdStockAndSlsDataTransfPrfl',
        'product_unit_group' => 'setProductUnitGroup',
        'pur_ord_auto_generation_is_allowed' => 'setPurOrdAutoGenerationIsAllowed',
        'purchase_order_currency' => 'setPurchaseOrderCurrency',
        'purchasing_group' => 'setPurchasingGroup',
        'purchasing_is_blocked_for_supplier' => 'setPurchasingIsBlockedForSupplier',
        'rounding_profile' => 'setRoundingProfile',
        'shipping_condition' => 'setShippingCondition',
        'suplr_discount_in_kind_is_granted' => 'setSuplrDiscountInKindIsGranted',
        'suplr_invc_reval_is_allowed' => 'setSuplrInvcRevalIsAllowed',
        'suplr_is_rlvt_for_settlmt_mgmt' => 'setSuplrIsRlvtForSettlmtMgmt',
        'suplr_purg_org_is_rlvt_for_price_detn' => 'setSuplrPurgOrgIsRlvtForPriceDetn',
        'supplier_abc_classification_code' => 'setSupplierAbcClassificationCode',
        'supplier_account_number' => 'setSupplierAccountNumber',
        'supplier_is_returns_supplier' => 'setSupplierIsReturnsSupplier',
        'supplier_phone_number' => 'setSupplierPhoneNumber',
        'supplier_resp_sales_person_name' => 'setSupplierRespSalesPersonName',
        'supplier_confirmation_control_key' => 'setSupplierConfirmationControlKey',
        'is_order_ackn_rqd' => 'setIsOrderAcknRqd',
        'authorization_group' => 'setAuthorizationGroup',
        'supplier_account_group' => 'setSupplierAccountGroup',
        'to_partner_function' => 'setToPartnerFunction',
        'to_purchasing_org_text' => 'setToPurchasingOrgText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplier' => 'getSupplier',
        'purchasing_organization' => 'getPurchasingOrganization',
        'automatic_evaluated_rcpt_settlmt' => 'getAutomaticEvaluatedRcptSettlmt',
        'calculation_schema_group_code' => 'getCalculationSchemaGroupCode',
        'deletion_indicator' => 'getDeletionIndicator',
        'evald_receipt_settlement_is_active' => 'getEvaldReceiptSettlementIsActive',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_version' => 'getIncotermsVersion',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'incoterms_sup_chn_loc1_addl_uuid' => 'getIncotermsSupChnLoc1AddlUuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'getIncotermsSupChnLoc2AddlUuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'getIncotermsSupChnDvtgLocAddlUuid',
        'intrastat_crs_border_tr_mode' => 'getIntrastatCrsBorderTrMode',
        'invoice_is_goods_receipt_based' => 'getInvoiceIsGoodsReceiptBased',
        'invoice_is_mm_service_entry_based' => 'getInvoiceIsMmServiceEntryBased',
        'material_planned_delivery_durn' => 'getMaterialPlannedDeliveryDurn',
        'minimum_order_amount' => 'getMinimumOrderAmount',
        'payment_terms' => 'getPaymentTerms',
        'planning_cycle' => 'getPlanningCycle',
        'pricing_date_control' => 'getPricingDateControl',
        'prod_stock_and_sls_data_transf_prfl' => 'getProdStockAndSlsDataTransfPrfl',
        'product_unit_group' => 'getProductUnitGroup',
        'pur_ord_auto_generation_is_allowed' => 'getPurOrdAutoGenerationIsAllowed',
        'purchase_order_currency' => 'getPurchaseOrderCurrency',
        'purchasing_group' => 'getPurchasingGroup',
        'purchasing_is_blocked_for_supplier' => 'getPurchasingIsBlockedForSupplier',
        'rounding_profile' => 'getRoundingProfile',
        'shipping_condition' => 'getShippingCondition',
        'suplr_discount_in_kind_is_granted' => 'getSuplrDiscountInKindIsGranted',
        'suplr_invc_reval_is_allowed' => 'getSuplrInvcRevalIsAllowed',
        'suplr_is_rlvt_for_settlmt_mgmt' => 'getSuplrIsRlvtForSettlmtMgmt',
        'suplr_purg_org_is_rlvt_for_price_detn' => 'getSuplrPurgOrgIsRlvtForPriceDetn',
        'supplier_abc_classification_code' => 'getSupplierAbcClassificationCode',
        'supplier_account_number' => 'getSupplierAccountNumber',
        'supplier_is_returns_supplier' => 'getSupplierIsReturnsSupplier',
        'supplier_phone_number' => 'getSupplierPhoneNumber',
        'supplier_resp_sales_person_name' => 'getSupplierRespSalesPersonName',
        'supplier_confirmation_control_key' => 'getSupplierConfirmationControlKey',
        'is_order_ackn_rqd' => 'getIsOrderAcknRqd',
        'authorization_group' => 'getAuthorizationGroup',
        'supplier_account_group' => 'getSupplierAccountGroup',
        'to_partner_function' => 'getToPartnerFunction',
        'to_purchasing_org_text' => 'getToPurchasingOrgText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('purchasing_organization', $data ?? [], null);
        $this->setIfExists('automatic_evaluated_rcpt_settlmt', $data ?? [], null);
        $this->setIfExists('calculation_schema_group_code', $data ?? [], null);
        $this->setIfExists('deletion_indicator', $data ?? [], null);
        $this->setIfExists('evald_receipt_settlement_is_active', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_version', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_loc1_addl_uuid', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_loc2_addl_uuid', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_dvtg_loc_addl_uuid', $data ?? [], null);
        $this->setIfExists('intrastat_crs_border_tr_mode', $data ?? [], null);
        $this->setIfExists('invoice_is_goods_receipt_based', $data ?? [], null);
        $this->setIfExists('invoice_is_mm_service_entry_based', $data ?? [], null);
        $this->setIfExists('material_planned_delivery_durn', $data ?? [], null);
        $this->setIfExists('minimum_order_amount', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('planning_cycle', $data ?? [], null);
        $this->setIfExists('pricing_date_control', $data ?? [], null);
        $this->setIfExists('prod_stock_and_sls_data_transf_prfl', $data ?? [], null);
        $this->setIfExists('product_unit_group', $data ?? [], null);
        $this->setIfExists('pur_ord_auto_generation_is_allowed', $data ?? [], null);
        $this->setIfExists('purchase_order_currency', $data ?? [], null);
        $this->setIfExists('purchasing_group', $data ?? [], null);
        $this->setIfExists('purchasing_is_blocked_for_supplier', $data ?? [], null);
        $this->setIfExists('rounding_profile', $data ?? [], null);
        $this->setIfExists('shipping_condition', $data ?? [], null);
        $this->setIfExists('suplr_discount_in_kind_is_granted', $data ?? [], null);
        $this->setIfExists('suplr_invc_reval_is_allowed', $data ?? [], null);
        $this->setIfExists('suplr_is_rlvt_for_settlmt_mgmt', $data ?? [], null);
        $this->setIfExists('suplr_purg_org_is_rlvt_for_price_detn', $data ?? [], null);
        $this->setIfExists('supplier_abc_classification_code', $data ?? [], null);
        $this->setIfExists('supplier_account_number', $data ?? [], null);
        $this->setIfExists('supplier_is_returns_supplier', $data ?? [], null);
        $this->setIfExists('supplier_phone_number', $data ?? [], null);
        $this->setIfExists('supplier_resp_sales_person_name', $data ?? [], null);
        $this->setIfExists('supplier_confirmation_control_key', $data ?? [], null);
        $this->setIfExists('is_order_ackn_rqd', $data ?? [], null);
        $this->setIfExists('authorization_group', $data ?? [], null);
        $this->setIfExists('supplier_account_group', $data ?? [], null);
        $this->setIfExists('to_partner_function', $data ?? [], null);
        $this->setIfExists('to_purchasing_org_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['purchasing_organization']) && (mb_strlen($this->container['purchasing_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'purchasing_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['calculation_schema_group_code']) && (mb_strlen($this->container['calculation_schema_group_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'calculation_schema_group_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_version']) && (mb_strlen($this->container['incoterms_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'incoterms_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['intrastat_crs_border_tr_mode']) && (mb_strlen($this->container['intrastat_crs_border_tr_mode']) > 1)) {
            $invalidProperties[] = "invalid value for 'intrastat_crs_border_tr_mode', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['payment_terms']) && (mb_strlen($this->container['payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['planning_cycle']) && (mb_strlen($this->container['planning_cycle']) > 3)) {
            $invalidProperties[] = "invalid value for 'planning_cycle', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['pricing_date_control']) && (mb_strlen($this->container['pricing_date_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'pricing_date_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['prod_stock_and_sls_data_transf_prfl']) && (mb_strlen($this->container['prod_stock_and_sls_data_transf_prfl']) > 4)) {
            $invalidProperties[] = "invalid value for 'prod_stock_and_sls_data_transf_prfl', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['product_unit_group']) && (mb_strlen($this->container['product_unit_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'product_unit_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['purchase_order_currency']) && (mb_strlen($this->container['purchase_order_currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_order_currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['purchasing_group']) && (mb_strlen($this->container['purchasing_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'purchasing_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['rounding_profile']) && (mb_strlen($this->container['rounding_profile']) > 4)) {
            $invalidProperties[] = "invalid value for 'rounding_profile', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_condition']) && (mb_strlen($this->container['shipping_condition']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_condition', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['supplier_abc_classification_code']) && (mb_strlen($this->container['supplier_abc_classification_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'supplier_abc_classification_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['supplier_account_number']) && (mb_strlen($this->container['supplier_account_number']) > 12)) {
            $invalidProperties[] = "invalid value for 'supplier_account_number', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['supplier_phone_number']) && (mb_strlen($this->container['supplier_phone_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'supplier_phone_number', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['supplier_resp_sales_person_name']) && (mb_strlen($this->container['supplier_resp_sales_person_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'supplier_resp_sales_person_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['supplier_confirmation_control_key']) && (mb_strlen($this->container['supplier_confirmation_control_key']) > 4)) {
            $invalidProperties[] = "invalid value for 'supplier_confirmation_control_key', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['authorization_group']) && (mb_strlen($this->container['authorization_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'authorization_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['supplier_account_group']) && (mb_strlen($this->container['supplier_account_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'supplier_account_group', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier Supplier's Account Number
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            throw new \InvalidArgumentException('non-nullable supplier cannot be null');
        }
        if ((mb_strlen($supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 10.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets purchasing_organization
     *
     * @return string|null
     */
    public function getPurchasingOrganization()
    {
        return $this->container['purchasing_organization'];
    }

    /**
     * Sets purchasing_organization
     *
     * @param string|null $purchasing_organization Purchasing Organization
     *
     * @return self
     */
    public function setPurchasingOrganization($purchasing_organization)
    {
        if (is_null($purchasing_organization)) {
            throw new \InvalidArgumentException('non-nullable purchasing_organization cannot be null');
        }
        if ((mb_strlen($purchasing_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_organization when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['purchasing_organization'] = $purchasing_organization;

        return $this;
    }

    /**
     * Gets automatic_evaluated_rcpt_settlmt
     *
     * @return bool|null
     */
    public function getAutomaticEvaluatedRcptSettlmt()
    {
        return $this->container['automatic_evaluated_rcpt_settlmt'];
    }

    /**
     * Sets automatic_evaluated_rcpt_settlmt
     *
     * @param bool|null $automatic_evaluated_rcpt_settlmt Automatic evaluated receipt settlement for return items
     *
     * @return self
     */
    public function setAutomaticEvaluatedRcptSettlmt($automatic_evaluated_rcpt_settlmt)
    {
        if (is_null($automatic_evaluated_rcpt_settlmt)) {
            array_push($this->openAPINullablesSetToNull, 'automatic_evaluated_rcpt_settlmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('automatic_evaluated_rcpt_settlmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['automatic_evaluated_rcpt_settlmt'] = $automatic_evaluated_rcpt_settlmt;

        return $this;
    }

    /**
     * Gets calculation_schema_group_code
     *
     * @return string|null
     */
    public function getCalculationSchemaGroupCode()
    {
        return $this->container['calculation_schema_group_code'];
    }

    /**
     * Sets calculation_schema_group_code
     *
     * @param string|null $calculation_schema_group_code Group for Calculation Schema (Supplier)
     *
     * @return self
     */
    public function setCalculationSchemaGroupCode($calculation_schema_group_code)
    {
        if (is_null($calculation_schema_group_code)) {
            array_push($this->openAPINullablesSetToNull, 'calculation_schema_group_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('calculation_schema_group_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($calculation_schema_group_code) && (mb_strlen($calculation_schema_group_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $calculation_schema_group_code when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 2.');
        }

        $this->container['calculation_schema_group_code'] = $calculation_schema_group_code;

        return $this;
    }

    /**
     * Gets deletion_indicator
     *
     * @return bool|null
     */
    public function getDeletionIndicator()
    {
        return $this->container['deletion_indicator'];
    }

    /**
     * Sets deletion_indicator
     *
     * @param bool|null $deletion_indicator Deletion Indicator for Supplier at Purchasing Level
     *
     * @return self
     */
    public function setDeletionIndicator($deletion_indicator)
    {
        if (is_null($deletion_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'deletion_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletion_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletion_indicator'] = $deletion_indicator;

        return $this;
    }

    /**
     * Gets evald_receipt_settlement_is_active
     *
     * @return bool|null
     */
    public function getEvaldReceiptSettlementIsActive()
    {
        return $this->container['evald_receipt_settlement_is_active'];
    }

    /**
     * Sets evald_receipt_settlement_is_active
     *
     * @param bool|null $evald_receipt_settlement_is_active Evaluated Receipt Settlement (ERS)
     *
     * @return self
     */
    public function setEvaldReceiptSettlementIsActive($evald_receipt_settlement_is_active)
    {
        if (is_null($evald_receipt_settlement_is_active)) {
            array_push($this->openAPINullablesSetToNull, 'evald_receipt_settlement_is_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('evald_receipt_settlement_is_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['evald_receipt_settlement_is_active'] = $evald_receipt_settlement_is_active;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_version
     *
     * @return string|null
     */
    public function getIncotermsVersion()
    {
        return $this->container['incoterms_version'];
    }

    /**
     * Sets incoterms_version
     *
     * @param string|null $incoterms_version incoterms_version
     *
     * @return self
     */
    public function setIncotermsVersion($incoterms_version)
    {
        if (is_null($incoterms_version)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_version) && (mb_strlen($incoterms_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_version when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['incoterms_version'] = $incoterms_version;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_loc1_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnLoc1AddlUuid()
    {
        return $this->container['incoterms_sup_chn_loc1_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_loc1_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_loc1_addl_uuid incoterms_sup_chn_loc1_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnLoc1AddlUuid($incoterms_sup_chn_loc1_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_loc1_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_loc1_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_loc1_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_loc1_addl_uuid'] = $incoterms_sup_chn_loc1_addl_uuid;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_loc2_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnLoc2AddlUuid()
    {
        return $this->container['incoterms_sup_chn_loc2_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_loc2_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_loc2_addl_uuid incoterms_sup_chn_loc2_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnLoc2AddlUuid($incoterms_sup_chn_loc2_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_loc2_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_loc2_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_loc2_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_loc2_addl_uuid'] = $incoterms_sup_chn_loc2_addl_uuid;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnDvtgLocAddlUuid()
    {
        return $this->container['incoterms_sup_chn_dvtg_loc_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_dvtg_loc_addl_uuid incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnDvtgLocAddlUuid($incoterms_sup_chn_dvtg_loc_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_dvtg_loc_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_dvtg_loc_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_dvtg_loc_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_dvtg_loc_addl_uuid'] = $incoterms_sup_chn_dvtg_loc_addl_uuid;

        return $this;
    }

    /**
     * Gets intrastat_crs_border_tr_mode
     *
     * @return string|null
     */
    public function getIntrastatCrsBorderTrMode()
    {
        return $this->container['intrastat_crs_border_tr_mode'];
    }

    /**
     * Sets intrastat_crs_border_tr_mode
     *
     * @param string|null $intrastat_crs_border_tr_mode Mode of Transport at the Border (Intrastat)
     *
     * @return self
     */
    public function setIntrastatCrsBorderTrMode($intrastat_crs_border_tr_mode)
    {
        if (is_null($intrastat_crs_border_tr_mode)) {
            array_push($this->openAPINullablesSetToNull, 'intrastat_crs_border_tr_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intrastat_crs_border_tr_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($intrastat_crs_border_tr_mode) && (mb_strlen($intrastat_crs_border_tr_mode) > 1)) {
            throw new \InvalidArgumentException('invalid length for $intrastat_crs_border_tr_mode when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 1.');
        }

        $this->container['intrastat_crs_border_tr_mode'] = $intrastat_crs_border_tr_mode;

        return $this;
    }

    /**
     * Gets invoice_is_goods_receipt_based
     *
     * @return bool|null
     */
    public function getInvoiceIsGoodsReceiptBased()
    {
        return $this->container['invoice_is_goods_receipt_based'];
    }

    /**
     * Sets invoice_is_goods_receipt_based
     *
     * @param bool|null $invoice_is_goods_receipt_based Indicator: GR-Based Invoice Verification
     *
     * @return self
     */
    public function setInvoiceIsGoodsReceiptBased($invoice_is_goods_receipt_based)
    {
        if (is_null($invoice_is_goods_receipt_based)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_is_goods_receipt_based');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_is_goods_receipt_based', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_is_goods_receipt_based'] = $invoice_is_goods_receipt_based;

        return $this;
    }

    /**
     * Gets invoice_is_mm_service_entry_based
     *
     * @return bool|null
     */
    public function getInvoiceIsMmServiceEntryBased()
    {
        return $this->container['invoice_is_mm_service_entry_based'];
    }

    /**
     * Sets invoice_is_mm_service_entry_based
     *
     * @param bool|null $invoice_is_mm_service_entry_based Indicator for Service-Based Invoice Verification
     *
     * @return self
     */
    public function setInvoiceIsMmServiceEntryBased($invoice_is_mm_service_entry_based)
    {
        if (is_null($invoice_is_mm_service_entry_based)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_is_mm_service_entry_based');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_is_mm_service_entry_based', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_is_mm_service_entry_based'] = $invoice_is_mm_service_entry_based;

        return $this;
    }

    /**
     * Gets material_planned_delivery_durn
     *
     * @return float|null
     */
    public function getMaterialPlannedDeliveryDurn()
    {
        return $this->container['material_planned_delivery_durn'];
    }

    /**
     * Sets material_planned_delivery_durn
     *
     * @param float|null $material_planned_delivery_durn Planned Delivery Time in Days
     *
     * @return self
     */
    public function setMaterialPlannedDeliveryDurn($material_planned_delivery_durn)
    {
        if (is_null($material_planned_delivery_durn)) {
            array_push($this->openAPINullablesSetToNull, 'material_planned_delivery_durn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_planned_delivery_durn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['material_planned_delivery_durn'] = $material_planned_delivery_durn;

        return $this;
    }

    /**
     * Gets minimum_order_amount
     *
     * @return float|null
     */
    public function getMinimumOrderAmount()
    {
        return $this->container['minimum_order_amount'];
    }

    /**
     * Sets minimum_order_amount
     *
     * @param float|null $minimum_order_amount minimum_order_amount
     *
     * @return self
     */
    public function setMinimumOrderAmount($minimum_order_amount)
    {
        if (is_null($minimum_order_amount)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_order_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_order_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['minimum_order_amount'] = $minimum_order_amount;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string|null $payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_terms) && (mb_strlen($payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_terms when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets planning_cycle
     *
     * @return string|null
     */
    public function getPlanningCycle()
    {
        return $this->container['planning_cycle'];
    }

    /**
     * Sets planning_cycle
     *
     * @param string|null $planning_cycle planning_cycle
     *
     * @return self
     */
    public function setPlanningCycle($planning_cycle)
    {
        if (is_null($planning_cycle)) {
            array_push($this->openAPINullablesSetToNull, 'planning_cycle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('planning_cycle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($planning_cycle) && (mb_strlen($planning_cycle) > 3)) {
            throw new \InvalidArgumentException('invalid length for $planning_cycle when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 3.');
        }

        $this->container['planning_cycle'] = $planning_cycle;

        return $this;
    }

    /**
     * Gets pricing_date_control
     *
     * @return string|null
     */
    public function getPricingDateControl()
    {
        return $this->container['pricing_date_control'];
    }

    /**
     * Sets pricing_date_control
     *
     * @param string|null $pricing_date_control Price Determination (Pricing) Date Control
     *
     * @return self
     */
    public function setPricingDateControl($pricing_date_control)
    {
        if (is_null($pricing_date_control)) {
            array_push($this->openAPINullablesSetToNull, 'pricing_date_control');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pricing_date_control', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pricing_date_control) && (mb_strlen($pricing_date_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $pricing_date_control when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 1.');
        }

        $this->container['pricing_date_control'] = $pricing_date_control;

        return $this;
    }

    /**
     * Gets prod_stock_and_sls_data_transf_prfl
     *
     * @return string|null
     */
    public function getProdStockAndSlsDataTransfPrfl()
    {
        return $this->container['prod_stock_and_sls_data_transf_prfl'];
    }

    /**
     * Sets prod_stock_and_sls_data_transf_prfl
     *
     * @param string|null $prod_stock_and_sls_data_transf_prfl Profile for transferring material data via IDoc PROACT
     *
     * @return self
     */
    public function setProdStockAndSlsDataTransfPrfl($prod_stock_and_sls_data_transf_prfl)
    {
        if (is_null($prod_stock_and_sls_data_transf_prfl)) {
            array_push($this->openAPINullablesSetToNull, 'prod_stock_and_sls_data_transf_prfl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prod_stock_and_sls_data_transf_prfl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($prod_stock_and_sls_data_transf_prfl) && (mb_strlen($prod_stock_and_sls_data_transf_prfl) > 4)) {
            throw new \InvalidArgumentException('invalid length for $prod_stock_and_sls_data_transf_prfl when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['prod_stock_and_sls_data_transf_prfl'] = $prod_stock_and_sls_data_transf_prfl;

        return $this;
    }

    /**
     * Gets product_unit_group
     *
     * @return string|null
     */
    public function getProductUnitGroup()
    {
        return $this->container['product_unit_group'];
    }

    /**
     * Sets product_unit_group
     *
     * @param string|null $product_unit_group Unit of Measure Group
     *
     * @return self
     */
    public function setProductUnitGroup($product_unit_group)
    {
        if (is_null($product_unit_group)) {
            array_push($this->openAPINullablesSetToNull, 'product_unit_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_unit_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_unit_group) && (mb_strlen($product_unit_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $product_unit_group when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['product_unit_group'] = $product_unit_group;

        return $this;
    }

    /**
     * Gets pur_ord_auto_generation_is_allowed
     *
     * @return bool|null
     */
    public function getPurOrdAutoGenerationIsAllowed()
    {
        return $this->container['pur_ord_auto_generation_is_allowed'];
    }

    /**
     * Sets pur_ord_auto_generation_is_allowed
     *
     * @param bool|null $pur_ord_auto_generation_is_allowed Automatic Generation of Purchase Order Allowed
     *
     * @return self
     */
    public function setPurOrdAutoGenerationIsAllowed($pur_ord_auto_generation_is_allowed)
    {
        if (is_null($pur_ord_auto_generation_is_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'pur_ord_auto_generation_is_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pur_ord_auto_generation_is_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pur_ord_auto_generation_is_allowed'] = $pur_ord_auto_generation_is_allowed;

        return $this;
    }

    /**
     * Gets purchase_order_currency
     *
     * @return string|null
     */
    public function getPurchaseOrderCurrency()
    {
        return $this->container['purchase_order_currency'];
    }

    /**
     * Sets purchase_order_currency
     *
     * @param string|null $purchase_order_currency Purchase order currency
     *
     * @return self
     */
    public function setPurchaseOrderCurrency($purchase_order_currency)
    {
        if (is_null($purchase_order_currency)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_currency) && (mb_strlen($purchase_order_currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_currency when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 5.');
        }

        $this->container['purchase_order_currency'] = $purchase_order_currency;

        return $this;
    }

    /**
     * Gets purchasing_group
     *
     * @return string|null
     */
    public function getPurchasingGroup()
    {
        return $this->container['purchasing_group'];
    }

    /**
     * Sets purchasing_group
     *
     * @param string|null $purchasing_group purchasing_group
     *
     * @return self
     */
    public function setPurchasingGroup($purchasing_group)
    {
        if (is_null($purchasing_group)) {
            array_push($this->openAPINullablesSetToNull, 'purchasing_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchasing_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchasing_group) && (mb_strlen($purchasing_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_group when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 3.');
        }

        $this->container['purchasing_group'] = $purchasing_group;

        return $this;
    }

    /**
     * Gets purchasing_is_blocked_for_supplier
     *
     * @return bool|null
     */
    public function getPurchasingIsBlockedForSupplier()
    {
        return $this->container['purchasing_is_blocked_for_supplier'];
    }

    /**
     * Sets purchasing_is_blocked_for_supplier
     *
     * @param bool|null $purchasing_is_blocked_for_supplier Purchasing block at purchasing organization level
     *
     * @return self
     */
    public function setPurchasingIsBlockedForSupplier($purchasing_is_blocked_for_supplier)
    {
        if (is_null($purchasing_is_blocked_for_supplier)) {
            array_push($this->openAPINullablesSetToNull, 'purchasing_is_blocked_for_supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchasing_is_blocked_for_supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchasing_is_blocked_for_supplier'] = $purchasing_is_blocked_for_supplier;

        return $this;
    }

    /**
     * Gets rounding_profile
     *
     * @return string|null
     */
    public function getRoundingProfile()
    {
        return $this->container['rounding_profile'];
    }

    /**
     * Sets rounding_profile
     *
     * @param string|null $rounding_profile rounding_profile
     *
     * @return self
     */
    public function setRoundingProfile($rounding_profile)
    {
        if (is_null($rounding_profile)) {
            array_push($this->openAPINullablesSetToNull, 'rounding_profile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rounding_profile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($rounding_profile) && (mb_strlen($rounding_profile) > 4)) {
            throw new \InvalidArgumentException('invalid length for $rounding_profile when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['rounding_profile'] = $rounding_profile;

        return $this;
    }

    /**
     * Gets shipping_condition
     *
     * @return string|null
     */
    public function getShippingCondition()
    {
        return $this->container['shipping_condition'];
    }

    /**
     * Sets shipping_condition
     *
     * @param string|null $shipping_condition shipping_condition
     *
     * @return self
     */
    public function setShippingCondition($shipping_condition)
    {
        if (is_null($shipping_condition)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_condition) && (mb_strlen($shipping_condition) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_condition when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_condition'] = $shipping_condition;

        return $this;
    }

    /**
     * Gets suplr_discount_in_kind_is_granted
     *
     * @return bool|null
     */
    public function getSuplrDiscountInKindIsGranted()
    {
        return $this->container['suplr_discount_in_kind_is_granted'];
    }

    /**
     * Sets suplr_discount_in_kind_is_granted
     *
     * @param bool|null $suplr_discount_in_kind_is_granted suplr_discount_in_kind_is_granted
     *
     * @return self
     */
    public function setSuplrDiscountInKindIsGranted($suplr_discount_in_kind_is_granted)
    {
        if (is_null($suplr_discount_in_kind_is_granted)) {
            array_push($this->openAPINullablesSetToNull, 'suplr_discount_in_kind_is_granted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suplr_discount_in_kind_is_granted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suplr_discount_in_kind_is_granted'] = $suplr_discount_in_kind_is_granted;

        return $this;
    }

    /**
     * Gets suplr_invc_reval_is_allowed
     *
     * @return bool|null
     */
    public function getSuplrInvcRevalIsAllowed()
    {
        return $this->container['suplr_invc_reval_is_allowed'];
    }

    /**
     * Sets suplr_invc_reval_is_allowed
     *
     * @param bool|null $suplr_invc_reval_is_allowed Revaluation allowed
     *
     * @return self
     */
    public function setSuplrInvcRevalIsAllowed($suplr_invc_reval_is_allowed)
    {
        if (is_null($suplr_invc_reval_is_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'suplr_invc_reval_is_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suplr_invc_reval_is_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suplr_invc_reval_is_allowed'] = $suplr_invc_reval_is_allowed;

        return $this;
    }

    /**
     * Gets suplr_is_rlvt_for_settlmt_mgmt
     *
     * @return bool|null
     */
    public function getSuplrIsRlvtForSettlmtMgmt()
    {
        return $this->container['suplr_is_rlvt_for_settlmt_mgmt'];
    }

    /**
     * Sets suplr_is_rlvt_for_settlmt_mgmt
     *
     * @param bool|null $suplr_is_rlvt_for_settlmt_mgmt Indicator: Relevant for Settlement Management
     *
     * @return self
     */
    public function setSuplrIsRlvtForSettlmtMgmt($suplr_is_rlvt_for_settlmt_mgmt)
    {
        if (is_null($suplr_is_rlvt_for_settlmt_mgmt)) {
            array_push($this->openAPINullablesSetToNull, 'suplr_is_rlvt_for_settlmt_mgmt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suplr_is_rlvt_for_settlmt_mgmt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suplr_is_rlvt_for_settlmt_mgmt'] = $suplr_is_rlvt_for_settlmt_mgmt;

        return $this;
    }

    /**
     * Gets suplr_purg_org_is_rlvt_for_price_detn
     *
     * @return bool|null
     */
    public function getSuplrPurgOrgIsRlvtForPriceDetn()
    {
        return $this->container['suplr_purg_org_is_rlvt_for_price_detn'];
    }

    /**
     * Sets suplr_purg_org_is_rlvt_for_price_detn
     *
     * @param bool|null $suplr_purg_org_is_rlvt_for_price_detn Indicator: \"relev. to price determination (vend. hierarchy)
     *
     * @return self
     */
    public function setSuplrPurgOrgIsRlvtForPriceDetn($suplr_purg_org_is_rlvt_for_price_detn)
    {
        if (is_null($suplr_purg_org_is_rlvt_for_price_detn)) {
            array_push($this->openAPINullablesSetToNull, 'suplr_purg_org_is_rlvt_for_price_detn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suplr_purg_org_is_rlvt_for_price_detn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suplr_purg_org_is_rlvt_for_price_detn'] = $suplr_purg_org_is_rlvt_for_price_detn;

        return $this;
    }

    /**
     * Gets supplier_abc_classification_code
     *
     * @return string|null
     */
    public function getSupplierAbcClassificationCode()
    {
        return $this->container['supplier_abc_classification_code'];
    }

    /**
     * Sets supplier_abc_classification_code
     *
     * @param string|null $supplier_abc_classification_code supplier_abc_classification_code
     *
     * @return self
     */
    public function setSupplierAbcClassificationCode($supplier_abc_classification_code)
    {
        if (is_null($supplier_abc_classification_code)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_abc_classification_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_abc_classification_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_abc_classification_code) && (mb_strlen($supplier_abc_classification_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $supplier_abc_classification_code when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 1.');
        }

        $this->container['supplier_abc_classification_code'] = $supplier_abc_classification_code;

        return $this;
    }

    /**
     * Gets supplier_account_number
     *
     * @return string|null
     */
    public function getSupplierAccountNumber()
    {
        return $this->container['supplier_account_number'];
    }

    /**
     * Sets supplier_account_number
     *
     * @param string|null $supplier_account_number Our account number with the supplier
     *
     * @return self
     */
    public function setSupplierAccountNumber($supplier_account_number)
    {
        if (is_null($supplier_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_account_number) && (mb_strlen($supplier_account_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $supplier_account_number when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 12.');
        }

        $this->container['supplier_account_number'] = $supplier_account_number;

        return $this;
    }

    /**
     * Gets supplier_is_returns_supplier
     *
     * @return bool|null
     */
    public function getSupplierIsReturnsSupplier()
    {
        return $this->container['supplier_is_returns_supplier'];
    }

    /**
     * Sets supplier_is_returns_supplier
     *
     * @param bool|null $supplier_is_returns_supplier Indicates whether supplier is returns supplier
     *
     * @return self
     */
    public function setSupplierIsReturnsSupplier($supplier_is_returns_supplier)
    {
        if (is_null($supplier_is_returns_supplier)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_is_returns_supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_is_returns_supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_is_returns_supplier'] = $supplier_is_returns_supplier;

        return $this;
    }

    /**
     * Gets supplier_phone_number
     *
     * @return string|null
     */
    public function getSupplierPhoneNumber()
    {
        return $this->container['supplier_phone_number'];
    }

    /**
     * Sets supplier_phone_number
     *
     * @param string|null $supplier_phone_number Supplier's Telephone Number
     *
     * @return self
     */
    public function setSupplierPhoneNumber($supplier_phone_number)
    {
        if (is_null($supplier_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_phone_number) && (mb_strlen($supplier_phone_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $supplier_phone_number when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 16.');
        }

        $this->container['supplier_phone_number'] = $supplier_phone_number;

        return $this;
    }

    /**
     * Gets supplier_resp_sales_person_name
     *
     * @return string|null
     */
    public function getSupplierRespSalesPersonName()
    {
        return $this->container['supplier_resp_sales_person_name'];
    }

    /**
     * Sets supplier_resp_sales_person_name
     *
     * @param string|null $supplier_resp_sales_person_name Responsible Salesperson at Supplier's Office
     *
     * @return self
     */
    public function setSupplierRespSalesPersonName($supplier_resp_sales_person_name)
    {
        if (is_null($supplier_resp_sales_person_name)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_resp_sales_person_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_resp_sales_person_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_resp_sales_person_name) && (mb_strlen($supplier_resp_sales_person_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $supplier_resp_sales_person_name when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 30.');
        }

        $this->container['supplier_resp_sales_person_name'] = $supplier_resp_sales_person_name;

        return $this;
    }

    /**
     * Gets supplier_confirmation_control_key
     *
     * @return string|null
     */
    public function getSupplierConfirmationControlKey()
    {
        return $this->container['supplier_confirmation_control_key'];
    }

    /**
     * Sets supplier_confirmation_control_key
     *
     * @param string|null $supplier_confirmation_control_key Confirmation Control Key
     *
     * @return self
     */
    public function setSupplierConfirmationControlKey($supplier_confirmation_control_key)
    {
        if (is_null($supplier_confirmation_control_key)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_confirmation_control_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_confirmation_control_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_confirmation_control_key) && (mb_strlen($supplier_confirmation_control_key) > 4)) {
            throw new \InvalidArgumentException('invalid length for $supplier_confirmation_control_key when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['supplier_confirmation_control_key'] = $supplier_confirmation_control_key;

        return $this;
    }

    /**
     * Gets is_order_ackn_rqd
     *
     * @return bool|null
     */
    public function getIsOrderAcknRqd()
    {
        return $this->container['is_order_ackn_rqd'];
    }

    /**
     * Sets is_order_ackn_rqd
     *
     * @param bool|null $is_order_ackn_rqd Order Acknowledgment Requirement
     *
     * @return self
     */
    public function setIsOrderAcknRqd($is_order_ackn_rqd)
    {
        if (is_null($is_order_ackn_rqd)) {
            array_push($this->openAPINullablesSetToNull, 'is_order_ackn_rqd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_order_ackn_rqd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_order_ackn_rqd'] = $is_order_ackn_rqd;

        return $this;
    }

    /**
     * Gets authorization_group
     *
     * @return string|null
     */
    public function getAuthorizationGroup()
    {
        return $this->container['authorization_group'];
    }

    /**
     * Sets authorization_group
     *
     * @param string|null $authorization_group Authorization Group
     *
     * @return self
     */
    public function setAuthorizationGroup($authorization_group)
    {
        if (is_null($authorization_group)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_group) && (mb_strlen($authorization_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $authorization_group when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['authorization_group'] = $authorization_group;

        return $this;
    }

    /**
     * Gets supplier_account_group
     *
     * @return string|null
     */
    public function getSupplierAccountGroup()
    {
        return $this->container['supplier_account_group'];
    }

    /**
     * Sets supplier_account_group
     *
     * @param string|null $supplier_account_group Supplier Account Group
     *
     * @return self
     */
    public function setSupplierAccountGroup($supplier_account_group)
    {
        if (is_null($supplier_account_group)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_account_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_account_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_account_group) && (mb_strlen($supplier_account_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $supplier_account_group when calling APIBUSINESSPARTNERASupplierPurchasingOrgType., must be smaller than or equal to 4.');
        }

        $this->container['supplier_account_group'] = $supplier_account_group;

        return $this;
    }

    /**
     * Gets to_partner_function
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierPurchasingOrgTypeToPartnerFunction|null
     */
    public function getToPartnerFunction()
    {
        return $this->container['to_partner_function'];
    }

    /**
     * Sets to_partner_function
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierPurchasingOrgTypeToPartnerFunction|null $to_partner_function to_partner_function
     *
     * @return self
     */
    public function setToPartnerFunction($to_partner_function)
    {
        if (is_null($to_partner_function)) {
            throw new \InvalidArgumentException('non-nullable to_partner_function cannot be null');
        }
        $this->container['to_partner_function'] = $to_partner_function;

        return $this;
    }

    /**
     * Gets to_purchasing_org_text
     *
     * @return \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierPurchasingOrgTypeToPurchasingOrgText|null
     */
    public function getToPurchasingOrgText()
    {
        return $this->container['to_purchasing_org_text'];
    }

    /**
     * Sets to_purchasing_org_text
     *
     * @param \BeLenka\SAP\BusinessPartner\Model\APIBUSINESSPARTNERASupplierPurchasingOrgTypeToPurchasingOrgText|null $to_purchasing_org_text to_purchasing_org_text
     *
     * @return self
     */
    public function setToPurchasingOrgText($to_purchasing_org_text)
    {
        if (is_null($to_purchasing_org_text)) {
            throw new \InvalidArgumentException('non-nullable to_purchasing_org_text cannot be null');
        }
        $this->container['to_purchasing_org_text'] = $to_purchasing_org_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


