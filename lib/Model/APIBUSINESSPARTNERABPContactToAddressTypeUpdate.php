<?php
/**
 * APIBUSINESSPARTNERABPContactToAddressTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABPContactToAddressTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABPContactToAddressTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BPContactToAddressType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contact_person_building' => 'string',
        'contact_person_prfrd_comm_medium' => 'string',
        'contact_relationship_department' => 'string',
        'contact_relationship_function' => 'string',
        'correspondence_short_name' => 'string',
        'floor' => 'string',
        'inhouse_mail' => 'string',
        'is_default_address' => 'bool',
        'room_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contact_person_building' => null,
        'contact_person_prfrd_comm_medium' => null,
        'contact_relationship_department' => null,
        'contact_relationship_function' => null,
        'correspondence_short_name' => null,
        'floor' => null,
        'inhouse_mail' => null,
        'is_default_address' => null,
        'room_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contact_person_building' => true,
		'contact_person_prfrd_comm_medium' => true,
		'contact_relationship_department' => true,
		'contact_relationship_function' => true,
		'correspondence_short_name' => true,
		'floor' => true,
		'inhouse_mail' => true,
		'is_default_address' => true,
		'room_number' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_person_building' => 'ContactPersonBuilding',
        'contact_person_prfrd_comm_medium' => 'ContactPersonPrfrdCommMedium',
        'contact_relationship_department' => 'ContactRelationshipDepartment',
        'contact_relationship_function' => 'ContactRelationshipFunction',
        'correspondence_short_name' => 'CorrespondenceShortName',
        'floor' => 'Floor',
        'inhouse_mail' => 'InhouseMail',
        'is_default_address' => 'IsDefaultAddress',
        'room_number' => 'RoomNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_person_building' => 'setContactPersonBuilding',
        'contact_person_prfrd_comm_medium' => 'setContactPersonPrfrdCommMedium',
        'contact_relationship_department' => 'setContactRelationshipDepartment',
        'contact_relationship_function' => 'setContactRelationshipFunction',
        'correspondence_short_name' => 'setCorrespondenceShortName',
        'floor' => 'setFloor',
        'inhouse_mail' => 'setInhouseMail',
        'is_default_address' => 'setIsDefaultAddress',
        'room_number' => 'setRoomNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_person_building' => 'getContactPersonBuilding',
        'contact_person_prfrd_comm_medium' => 'getContactPersonPrfrdCommMedium',
        'contact_relationship_department' => 'getContactRelationshipDepartment',
        'contact_relationship_function' => 'getContactRelationshipFunction',
        'correspondence_short_name' => 'getCorrespondenceShortName',
        'floor' => 'getFloor',
        'inhouse_mail' => 'getInhouseMail',
        'is_default_address' => 'getIsDefaultAddress',
        'room_number' => 'getRoomNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contact_person_building', $data ?? [], null);
        $this->setIfExists('contact_person_prfrd_comm_medium', $data ?? [], null);
        $this->setIfExists('contact_relationship_department', $data ?? [], null);
        $this->setIfExists('contact_relationship_function', $data ?? [], null);
        $this->setIfExists('correspondence_short_name', $data ?? [], null);
        $this->setIfExists('floor', $data ?? [], null);
        $this->setIfExists('inhouse_mail', $data ?? [], null);
        $this->setIfExists('is_default_address', $data ?? [], null);
        $this->setIfExists('room_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['contact_person_building']) && (mb_strlen($this->container['contact_person_building']) > 10)) {
            $invalidProperties[] = "invalid value for 'contact_person_building', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['contact_person_prfrd_comm_medium']) && (mb_strlen($this->container['contact_person_prfrd_comm_medium']) > 3)) {
            $invalidProperties[] = "invalid value for 'contact_person_prfrd_comm_medium', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['contact_relationship_department']) && (mb_strlen($this->container['contact_relationship_department']) > 40)) {
            $invalidProperties[] = "invalid value for 'contact_relationship_department', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['contact_relationship_function']) && (mb_strlen($this->container['contact_relationship_function']) > 40)) {
            $invalidProperties[] = "invalid value for 'contact_relationship_function', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['correspondence_short_name']) && (mb_strlen($this->container['correspondence_short_name']) > 10)) {
            $invalidProperties[] = "invalid value for 'correspondence_short_name', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['floor']) && (mb_strlen($this->container['floor']) > 10)) {
            $invalidProperties[] = "invalid value for 'floor', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['inhouse_mail']) && (mb_strlen($this->container['inhouse_mail']) > 10)) {
            $invalidProperties[] = "invalid value for 'inhouse_mail', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['room_number']) && (mb_strlen($this->container['room_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'room_number', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_person_building
     *
     * @return string|null
     */
    public function getContactPersonBuilding()
    {
        return $this->container['contact_person_building'];
    }

    /**
     * Sets contact_person_building
     *
     * @param string|null $contact_person_building Building (number or code)
     *
     * @return self
     */
    public function setContactPersonBuilding($contact_person_building)
    {
        if (is_null($contact_person_building)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_building');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_building', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_building) && (mb_strlen($contact_person_building) > 10)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_building when calling APIBUSINESSPARTNERABPContactToAddressTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['contact_person_building'] = $contact_person_building;

        return $this;
    }

    /**
     * Gets contact_person_prfrd_comm_medium
     *
     * @return string|null
     */
    public function getContactPersonPrfrdCommMedium()
    {
        return $this->container['contact_person_prfrd_comm_medium'];
    }

    /**
     * Sets contact_person_prfrd_comm_medium
     *
     * @param string|null $contact_person_prfrd_comm_medium Communication Method (Key) (Business Address Services)
     *
     * @return self
     */
    public function setContactPersonPrfrdCommMedium($contact_person_prfrd_comm_medium)
    {
        if (is_null($contact_person_prfrd_comm_medium)) {
            array_push($this->openAPINullablesSetToNull, 'contact_person_prfrd_comm_medium');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_person_prfrd_comm_medium', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_person_prfrd_comm_medium) && (mb_strlen($contact_person_prfrd_comm_medium) > 3)) {
            throw new \InvalidArgumentException('invalid length for $contact_person_prfrd_comm_medium when calling APIBUSINESSPARTNERABPContactToAddressTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['contact_person_prfrd_comm_medium'] = $contact_person_prfrd_comm_medium;

        return $this;
    }

    /**
     * Gets contact_relationship_department
     *
     * @return string|null
     */
    public function getContactRelationshipDepartment()
    {
        return $this->container['contact_relationship_department'];
    }

    /**
     * Sets contact_relationship_department
     *
     * @param string|null $contact_relationship_department contact_relationship_department
     *
     * @return self
     */
    public function setContactRelationshipDepartment($contact_relationship_department)
    {
        if (is_null($contact_relationship_department)) {
            array_push($this->openAPINullablesSetToNull, 'contact_relationship_department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_relationship_department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_relationship_department) && (mb_strlen($contact_relationship_department) > 40)) {
            throw new \InvalidArgumentException('invalid length for $contact_relationship_department when calling APIBUSINESSPARTNERABPContactToAddressTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['contact_relationship_department'] = $contact_relationship_department;

        return $this;
    }

    /**
     * Gets contact_relationship_function
     *
     * @return string|null
     */
    public function getContactRelationshipFunction()
    {
        return $this->container['contact_relationship_function'];
    }

    /**
     * Sets contact_relationship_function
     *
     * @param string|null $contact_relationship_function contact_relationship_function
     *
     * @return self
     */
    public function setContactRelationshipFunction($contact_relationship_function)
    {
        if (is_null($contact_relationship_function)) {
            array_push($this->openAPINullablesSetToNull, 'contact_relationship_function');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_relationship_function', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact_relationship_function) && (mb_strlen($contact_relationship_function) > 40)) {
            throw new \InvalidArgumentException('invalid length for $contact_relationship_function when calling APIBUSINESSPARTNERABPContactToAddressTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['contact_relationship_function'] = $contact_relationship_function;

        return $this;
    }

    /**
     * Gets correspondence_short_name
     *
     * @return string|null
     */
    public function getCorrespondenceShortName()
    {
        return $this->container['correspondence_short_name'];
    }

    /**
     * Sets correspondence_short_name
     *
     * @param string|null $correspondence_short_name Short name for correspondence
     *
     * @return self
     */
    public function setCorrespondenceShortName($correspondence_short_name)
    {
        if (is_null($correspondence_short_name)) {
            array_push($this->openAPINullablesSetToNull, 'correspondence_short_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('correspondence_short_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($correspondence_short_name) && (mb_strlen($correspondence_short_name) > 10)) {
            throw new \InvalidArgumentException('invalid length for $correspondence_short_name when calling APIBUSINESSPARTNERABPContactToAddressTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['correspondence_short_name'] = $correspondence_short_name;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return string|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param string|null $floor Floor in building
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (is_null($floor)) {
            array_push($this->openAPINullablesSetToNull, 'floor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('floor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($floor) && (mb_strlen($floor) > 10)) {
            throw new \InvalidArgumentException('invalid length for $floor when calling APIBUSINESSPARTNERABPContactToAddressTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets inhouse_mail
     *
     * @return string|null
     */
    public function getInhouseMail()
    {
        return $this->container['inhouse_mail'];
    }

    /**
     * Sets inhouse_mail
     *
     * @param string|null $inhouse_mail Internal Mail Postal Code
     *
     * @return self
     */
    public function setInhouseMail($inhouse_mail)
    {
        if (is_null($inhouse_mail)) {
            array_push($this->openAPINullablesSetToNull, 'inhouse_mail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inhouse_mail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($inhouse_mail) && (mb_strlen($inhouse_mail) > 10)) {
            throw new \InvalidArgumentException('invalid length for $inhouse_mail when calling APIBUSINESSPARTNERABPContactToAddressTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['inhouse_mail'] = $inhouse_mail;

        return $this;
    }

    /**
     * Gets is_default_address
     *
     * @return bool|null
     */
    public function getIsDefaultAddress()
    {
        return $this->container['is_default_address'];
    }

    /**
     * Sets is_default_address
     *
     * @param bool|null $is_default_address Indicator: Address is standard address
     *
     * @return self
     */
    public function setIsDefaultAddress($is_default_address)
    {
        if (is_null($is_default_address)) {
            array_push($this->openAPINullablesSetToNull, 'is_default_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_default_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_default_address'] = $is_default_address;

        return $this;
    }

    /**
     * Gets room_number
     *
     * @return string|null
     */
    public function getRoomNumber()
    {
        return $this->container['room_number'];
    }

    /**
     * Sets room_number
     *
     * @param string|null $room_number Room or Apartment Number
     *
     * @return self
     */
    public function setRoomNumber($room_number)
    {
        if (is_null($room_number)) {
            array_push($this->openAPINullablesSetToNull, 'room_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('room_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($room_number) && (mb_strlen($room_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $room_number when calling APIBUSINESSPARTNERABPContactToAddressTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['room_number'] = $room_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


