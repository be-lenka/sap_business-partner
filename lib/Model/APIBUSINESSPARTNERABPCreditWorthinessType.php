<?php
/**
 * APIBUSINESSPARTNERABPCreditWorthinessType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABPCreditWorthinessType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABPCreditWorthinessType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BPCreditWorthinessType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_partner' => 'string',
        'bus_part_credit_standing' => 'string',
        'bp_credit_standing_status' => 'string',
        'credit_rating_agency' => 'string',
        'bp_credit_standing_comment' => 'string',
        'bp_credit_standing_date' => 'string',
        'bp_credit_standing_rating' => 'string',
        'bp_legal_proceeding_status' => 'string',
        'bp_lgl_proceeding_initiation_date' => 'string',
        'business_partner_is_under_oath' => 'bool',
        'business_partner_oath_date' => 'string',
        'business_partner_is_bankrupt' => 'bool',
        'business_partner_bankruptcy_date' => 'string',
        'bp_foreclosure_is_initiated' => 'bool',
        'bp_foreclosure_date' => 'string',
        'bp_crdt_wrthnss_access_chk_is_active' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_partner' => null,
        'bus_part_credit_standing' => null,
        'bp_credit_standing_status' => null,
        'credit_rating_agency' => null,
        'bp_credit_standing_comment' => null,
        'bp_credit_standing_date' => null,
        'bp_credit_standing_rating' => null,
        'bp_legal_proceeding_status' => null,
        'bp_lgl_proceeding_initiation_date' => null,
        'business_partner_is_under_oath' => null,
        'business_partner_oath_date' => null,
        'business_partner_is_bankrupt' => null,
        'business_partner_bankruptcy_date' => null,
        'bp_foreclosure_is_initiated' => null,
        'bp_foreclosure_date' => null,
        'bp_crdt_wrthnss_access_chk_is_active' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_partner' => false,
		'bus_part_credit_standing' => true,
		'bp_credit_standing_status' => true,
		'credit_rating_agency' => true,
		'bp_credit_standing_comment' => true,
		'bp_credit_standing_date' => true,
		'bp_credit_standing_rating' => true,
		'bp_legal_proceeding_status' => true,
		'bp_lgl_proceeding_initiation_date' => true,
		'business_partner_is_under_oath' => true,
		'business_partner_oath_date' => true,
		'business_partner_is_bankrupt' => true,
		'business_partner_bankruptcy_date' => true,
		'bp_foreclosure_is_initiated' => true,
		'bp_foreclosure_date' => true,
		'bp_crdt_wrthnss_access_chk_is_active' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_partner' => 'BusinessPartner',
        'bus_part_credit_standing' => 'BusPartCreditStanding',
        'bp_credit_standing_status' => 'BPCreditStandingStatus',
        'credit_rating_agency' => 'CreditRatingAgency',
        'bp_credit_standing_comment' => 'BPCreditStandingComment',
        'bp_credit_standing_date' => 'BPCreditStandingDate',
        'bp_credit_standing_rating' => 'BPCreditStandingRating',
        'bp_legal_proceeding_status' => 'BPLegalProceedingStatus',
        'bp_lgl_proceeding_initiation_date' => 'BPLglProceedingInitiationDate',
        'business_partner_is_under_oath' => 'BusinessPartnerIsUnderOath',
        'business_partner_oath_date' => 'BusinessPartnerOathDate',
        'business_partner_is_bankrupt' => 'BusinessPartnerIsBankrupt',
        'business_partner_bankruptcy_date' => 'BusinessPartnerBankruptcyDate',
        'bp_foreclosure_is_initiated' => 'BPForeclosureIsInitiated',
        'bp_foreclosure_date' => 'BPForeclosureDate',
        'bp_crdt_wrthnss_access_chk_is_active' => 'BPCrdtWrthnssAccessChkIsActive'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_partner' => 'setBusinessPartner',
        'bus_part_credit_standing' => 'setBusPartCreditStanding',
        'bp_credit_standing_status' => 'setBpCreditStandingStatus',
        'credit_rating_agency' => 'setCreditRatingAgency',
        'bp_credit_standing_comment' => 'setBpCreditStandingComment',
        'bp_credit_standing_date' => 'setBpCreditStandingDate',
        'bp_credit_standing_rating' => 'setBpCreditStandingRating',
        'bp_legal_proceeding_status' => 'setBpLegalProceedingStatus',
        'bp_lgl_proceeding_initiation_date' => 'setBpLglProceedingInitiationDate',
        'business_partner_is_under_oath' => 'setBusinessPartnerIsUnderOath',
        'business_partner_oath_date' => 'setBusinessPartnerOathDate',
        'business_partner_is_bankrupt' => 'setBusinessPartnerIsBankrupt',
        'business_partner_bankruptcy_date' => 'setBusinessPartnerBankruptcyDate',
        'bp_foreclosure_is_initiated' => 'setBpForeclosureIsInitiated',
        'bp_foreclosure_date' => 'setBpForeclosureDate',
        'bp_crdt_wrthnss_access_chk_is_active' => 'setBpCrdtWrthnssAccessChkIsActive'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_partner' => 'getBusinessPartner',
        'bus_part_credit_standing' => 'getBusPartCreditStanding',
        'bp_credit_standing_status' => 'getBpCreditStandingStatus',
        'credit_rating_agency' => 'getCreditRatingAgency',
        'bp_credit_standing_comment' => 'getBpCreditStandingComment',
        'bp_credit_standing_date' => 'getBpCreditStandingDate',
        'bp_credit_standing_rating' => 'getBpCreditStandingRating',
        'bp_legal_proceeding_status' => 'getBpLegalProceedingStatus',
        'bp_lgl_proceeding_initiation_date' => 'getBpLglProceedingInitiationDate',
        'business_partner_is_under_oath' => 'getBusinessPartnerIsUnderOath',
        'business_partner_oath_date' => 'getBusinessPartnerOathDate',
        'business_partner_is_bankrupt' => 'getBusinessPartnerIsBankrupt',
        'business_partner_bankruptcy_date' => 'getBusinessPartnerBankruptcyDate',
        'bp_foreclosure_is_initiated' => 'getBpForeclosureIsInitiated',
        'bp_foreclosure_date' => 'getBpForeclosureDate',
        'bp_crdt_wrthnss_access_chk_is_active' => 'getBpCrdtWrthnssAccessChkIsActive'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_partner', $data ?? [], null);
        $this->setIfExists('bus_part_credit_standing', $data ?? [], null);
        $this->setIfExists('bp_credit_standing_status', $data ?? [], null);
        $this->setIfExists('credit_rating_agency', $data ?? [], null);
        $this->setIfExists('bp_credit_standing_comment', $data ?? [], null);
        $this->setIfExists('bp_credit_standing_date', $data ?? [], null);
        $this->setIfExists('bp_credit_standing_rating', $data ?? [], null);
        $this->setIfExists('bp_legal_proceeding_status', $data ?? [], null);
        $this->setIfExists('bp_lgl_proceeding_initiation_date', $data ?? [], null);
        $this->setIfExists('business_partner_is_under_oath', $data ?? [], null);
        $this->setIfExists('business_partner_oath_date', $data ?? [], null);
        $this->setIfExists('business_partner_is_bankrupt', $data ?? [], null);
        $this->setIfExists('business_partner_bankruptcy_date', $data ?? [], null);
        $this->setIfExists('bp_foreclosure_is_initiated', $data ?? [], null);
        $this->setIfExists('bp_foreclosure_date', $data ?? [], null);
        $this->setIfExists('bp_crdt_wrthnss_access_chk_is_active', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['business_partner']) && (mb_strlen($this->container['business_partner']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['bus_part_credit_standing']) && (mb_strlen($this->container['bus_part_credit_standing']) > 1)) {
            $invalidProperties[] = "invalid value for 'bus_part_credit_standing', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['bp_credit_standing_status']) && (mb_strlen($this->container['bp_credit_standing_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'bp_credit_standing_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['credit_rating_agency']) && (mb_strlen($this->container['credit_rating_agency']) > 4)) {
            $invalidProperties[] = "invalid value for 'credit_rating_agency', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['bp_credit_standing_comment']) && (mb_strlen($this->container['bp_credit_standing_comment']) > 50)) {
            $invalidProperties[] = "invalid value for 'bp_credit_standing_comment', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bp_credit_standing_rating']) && (mb_strlen($this->container['bp_credit_standing_rating']) > 3)) {
            $invalidProperties[] = "invalid value for 'bp_credit_standing_rating', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['bp_legal_proceeding_status']) && (mb_strlen($this->container['bp_legal_proceeding_status']) > 2)) {
            $invalidProperties[] = "invalid value for 'bp_legal_proceeding_status', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bp_crdt_wrthnss_access_chk_is_active']) && (mb_strlen($this->container['bp_crdt_wrthnss_access_chk_is_active']) > 1)) {
            $invalidProperties[] = "invalid value for 'bp_crdt_wrthnss_access_chk_is_active', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_partner
     *
     * @return string|null
     */
    public function getBusinessPartner()
    {
        return $this->container['business_partner'];
    }

    /**
     * Sets business_partner
     *
     * @param string|null $business_partner Business Partner Number
     *
     * @return self
     */
    public function setBusinessPartner($business_partner)
    {
        if (is_null($business_partner)) {
            throw new \InvalidArgumentException('non-nullable business_partner cannot be null');
        }
        if ((mb_strlen($business_partner) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner when calling APIBUSINESSPARTNERABPCreditWorthinessType., must be smaller than or equal to 10.');
        }

        $this->container['business_partner'] = $business_partner;

        return $this;
    }

    /**
     * Gets bus_part_credit_standing
     *
     * @return string|null
     */
    public function getBusPartCreditStanding()
    {
        return $this->container['bus_part_credit_standing'];
    }

    /**
     * Sets bus_part_credit_standing
     *
     * @param string|null $bus_part_credit_standing bus_part_credit_standing
     *
     * @return self
     */
    public function setBusPartCreditStanding($bus_part_credit_standing)
    {
        if (is_null($bus_part_credit_standing)) {
            array_push($this->openAPINullablesSetToNull, 'bus_part_credit_standing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bus_part_credit_standing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bus_part_credit_standing) && (mb_strlen($bus_part_credit_standing) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bus_part_credit_standing when calling APIBUSINESSPARTNERABPCreditWorthinessType., must be smaller than or equal to 1.');
        }

        $this->container['bus_part_credit_standing'] = $bus_part_credit_standing;

        return $this;
    }

    /**
     * Gets bp_credit_standing_status
     *
     * @return string|null
     */
    public function getBpCreditStandingStatus()
    {
        return $this->container['bp_credit_standing_status'];
    }

    /**
     * Sets bp_credit_standing_status
     *
     * @param string|null $bp_credit_standing_status Status of Credit Standing Information
     *
     * @return self
     */
    public function setBpCreditStandingStatus($bp_credit_standing_status)
    {
        if (is_null($bp_credit_standing_status)) {
            array_push($this->openAPINullablesSetToNull, 'bp_credit_standing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_credit_standing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_credit_standing_status) && (mb_strlen($bp_credit_standing_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bp_credit_standing_status when calling APIBUSINESSPARTNERABPCreditWorthinessType., must be smaller than or equal to 1.');
        }

        $this->container['bp_credit_standing_status'] = $bp_credit_standing_status;

        return $this;
    }

    /**
     * Gets credit_rating_agency
     *
     * @return string|null
     */
    public function getCreditRatingAgency()
    {
        return $this->container['credit_rating_agency'];
    }

    /**
     * Sets credit_rating_agency
     *
     * @param string|null $credit_rating_agency Institute Providing Credit Standing Information
     *
     * @return self
     */
    public function setCreditRatingAgency($credit_rating_agency)
    {
        if (is_null($credit_rating_agency)) {
            array_push($this->openAPINullablesSetToNull, 'credit_rating_agency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_rating_agency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($credit_rating_agency) && (mb_strlen($credit_rating_agency) > 4)) {
            throw new \InvalidArgumentException('invalid length for $credit_rating_agency when calling APIBUSINESSPARTNERABPCreditWorthinessType., must be smaller than or equal to 4.');
        }

        $this->container['credit_rating_agency'] = $credit_rating_agency;

        return $this;
    }

    /**
     * Gets bp_credit_standing_comment
     *
     * @return string|null
     */
    public function getBpCreditStandingComment()
    {
        return $this->container['bp_credit_standing_comment'];
    }

    /**
     * Sets bp_credit_standing_comment
     *
     * @param string|null $bp_credit_standing_comment Additional Credit Standing Information
     *
     * @return self
     */
    public function setBpCreditStandingComment($bp_credit_standing_comment)
    {
        if (is_null($bp_credit_standing_comment)) {
            array_push($this->openAPINullablesSetToNull, 'bp_credit_standing_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_credit_standing_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_credit_standing_comment) && (mb_strlen($bp_credit_standing_comment) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bp_credit_standing_comment when calling APIBUSINESSPARTNERABPCreditWorthinessType., must be smaller than or equal to 50.');
        }

        $this->container['bp_credit_standing_comment'] = $bp_credit_standing_comment;

        return $this;
    }

    /**
     * Gets bp_credit_standing_date
     *
     * @return string|null
     */
    public function getBpCreditStandingDate()
    {
        return $this->container['bp_credit_standing_date'];
    }

    /**
     * Sets bp_credit_standing_date
     *
     * @param string|null $bp_credit_standing_date Date of Credit Standing Information
     *
     * @return self
     */
    public function setBpCreditStandingDate($bp_credit_standing_date)
    {
        if (is_null($bp_credit_standing_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_credit_standing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_credit_standing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_credit_standing_date'] = $bp_credit_standing_date;

        return $this;
    }

    /**
     * Gets bp_credit_standing_rating
     *
     * @return string|null
     */
    public function getBpCreditStandingRating()
    {
        return $this->container['bp_credit_standing_rating'];
    }

    /**
     * Sets bp_credit_standing_rating
     *
     * @param string|null $bp_credit_standing_rating bp_credit_standing_rating
     *
     * @return self
     */
    public function setBpCreditStandingRating($bp_credit_standing_rating)
    {
        if (is_null($bp_credit_standing_rating)) {
            array_push($this->openAPINullablesSetToNull, 'bp_credit_standing_rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_credit_standing_rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_credit_standing_rating) && (mb_strlen($bp_credit_standing_rating) > 3)) {
            throw new \InvalidArgumentException('invalid length for $bp_credit_standing_rating when calling APIBUSINESSPARTNERABPCreditWorthinessType., must be smaller than or equal to 3.');
        }

        $this->container['bp_credit_standing_rating'] = $bp_credit_standing_rating;

        return $this;
    }

    /**
     * Gets bp_legal_proceeding_status
     *
     * @return string|null
     */
    public function getBpLegalProceedingStatus()
    {
        return $this->container['bp_legal_proceeding_status'];
    }

    /**
     * Sets bp_legal_proceeding_status
     *
     * @param string|null $bp_legal_proceeding_status Status of Legal Proceedings
     *
     * @return self
     */
    public function setBpLegalProceedingStatus($bp_legal_proceeding_status)
    {
        if (is_null($bp_legal_proceeding_status)) {
            array_push($this->openAPINullablesSetToNull, 'bp_legal_proceeding_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_legal_proceeding_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_legal_proceeding_status) && (mb_strlen($bp_legal_proceeding_status) > 2)) {
            throw new \InvalidArgumentException('invalid length for $bp_legal_proceeding_status when calling APIBUSINESSPARTNERABPCreditWorthinessType., must be smaller than or equal to 2.');
        }

        $this->container['bp_legal_proceeding_status'] = $bp_legal_proceeding_status;

        return $this;
    }

    /**
     * Gets bp_lgl_proceeding_initiation_date
     *
     * @return string|null
     */
    public function getBpLglProceedingInitiationDate()
    {
        return $this->container['bp_lgl_proceeding_initiation_date'];
    }

    /**
     * Sets bp_lgl_proceeding_initiation_date
     *
     * @param string|null $bp_lgl_proceeding_initiation_date Date of Initiation of Legal Proceedings
     *
     * @return self
     */
    public function setBpLglProceedingInitiationDate($bp_lgl_proceeding_initiation_date)
    {
        if (is_null($bp_lgl_proceeding_initiation_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_lgl_proceeding_initiation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_lgl_proceeding_initiation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_lgl_proceeding_initiation_date'] = $bp_lgl_proceeding_initiation_date;

        return $this;
    }

    /**
     * Gets business_partner_is_under_oath
     *
     * @return bool|null
     */
    public function getBusinessPartnerIsUnderOath()
    {
        return $this->container['business_partner_is_under_oath'];
    }

    /**
     * Sets business_partner_is_under_oath
     *
     * @param bool|null $business_partner_is_under_oath business_partner_is_under_oath
     *
     * @return self
     */
    public function setBusinessPartnerIsUnderOath($business_partner_is_under_oath)
    {
        if (is_null($business_partner_is_under_oath)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_is_under_oath');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_is_under_oath', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_is_under_oath'] = $business_partner_is_under_oath;

        return $this;
    }

    /**
     * Gets business_partner_oath_date
     *
     * @return string|null
     */
    public function getBusinessPartnerOathDate()
    {
        return $this->container['business_partner_oath_date'];
    }

    /**
     * Sets business_partner_oath_date
     *
     * @param string|null $business_partner_oath_date business_partner_oath_date
     *
     * @return self
     */
    public function setBusinessPartnerOathDate($business_partner_oath_date)
    {
        if (is_null($business_partner_oath_date)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_oath_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_oath_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_oath_date'] = $business_partner_oath_date;

        return $this;
    }

    /**
     * Gets business_partner_is_bankrupt
     *
     * @return bool|null
     */
    public function getBusinessPartnerIsBankrupt()
    {
        return $this->container['business_partner_is_bankrupt'];
    }

    /**
     * Sets business_partner_is_bankrupt
     *
     * @param bool|null $business_partner_is_bankrupt Launch Bankruptcy Proceedings
     *
     * @return self
     */
    public function setBusinessPartnerIsBankrupt($business_partner_is_bankrupt)
    {
        if (is_null($business_partner_is_bankrupt)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_is_bankrupt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_is_bankrupt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_is_bankrupt'] = $business_partner_is_bankrupt;

        return $this;
    }

    /**
     * Gets business_partner_bankruptcy_date
     *
     * @return string|null
     */
    public function getBusinessPartnerBankruptcyDate()
    {
        return $this->container['business_partner_bankruptcy_date'];
    }

    /**
     * Sets business_partner_bankruptcy_date
     *
     * @param string|null $business_partner_bankruptcy_date Commencement Date of Bankruptcy Proceedings
     *
     * @return self
     */
    public function setBusinessPartnerBankruptcyDate($business_partner_bankruptcy_date)
    {
        if (is_null($business_partner_bankruptcy_date)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_bankruptcy_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_bankruptcy_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_bankruptcy_date'] = $business_partner_bankruptcy_date;

        return $this;
    }

    /**
     * Gets bp_foreclosure_is_initiated
     *
     * @return bool|null
     */
    public function getBpForeclosureIsInitiated()
    {
        return $this->container['bp_foreclosure_is_initiated'];
    }

    /**
     * Sets bp_foreclosure_is_initiated
     *
     * @param bool|null $bp_foreclosure_is_initiated bp_foreclosure_is_initiated
     *
     * @return self
     */
    public function setBpForeclosureIsInitiated($bp_foreclosure_is_initiated)
    {
        if (is_null($bp_foreclosure_is_initiated)) {
            array_push($this->openAPINullablesSetToNull, 'bp_foreclosure_is_initiated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_foreclosure_is_initiated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_foreclosure_is_initiated'] = $bp_foreclosure_is_initiated;

        return $this;
    }

    /**
     * Gets bp_foreclosure_date
     *
     * @return string|null
     */
    public function getBpForeclosureDate()
    {
        return $this->container['bp_foreclosure_date'];
    }

    /**
     * Sets bp_foreclosure_date
     *
     * @param string|null $bp_foreclosure_date bp_foreclosure_date
     *
     * @return self
     */
    public function setBpForeclosureDate($bp_foreclosure_date)
    {
        if (is_null($bp_foreclosure_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_foreclosure_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_foreclosure_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_foreclosure_date'] = $bp_foreclosure_date;

        return $this;
    }

    /**
     * Gets bp_crdt_wrthnss_access_chk_is_active
     *
     * @return string|null
     */
    public function getBpCrdtWrthnssAccessChkIsActive()
    {
        return $this->container['bp_crdt_wrthnss_access_chk_is_active'];
    }

    /**
     * Sets bp_crdt_wrthnss_access_chk_is_active
     *
     * @param string|null $bp_crdt_wrthnss_access_chk_is_active bp_crdt_wrthnss_access_chk_is_active
     *
     * @return self
     */
    public function setBpCrdtWrthnssAccessChkIsActive($bp_crdt_wrthnss_access_chk_is_active)
    {
        if (is_null($bp_crdt_wrthnss_access_chk_is_active)) {
            array_push($this->openAPINullablesSetToNull, 'bp_crdt_wrthnss_access_chk_is_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_crdt_wrthnss_access_chk_is_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_crdt_wrthnss_access_chk_is_active) && (mb_strlen($bp_crdt_wrthnss_access_chk_is_active) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bp_crdt_wrthnss_access_chk_is_active when calling APIBUSINESSPARTNERABPCreditWorthinessType., must be smaller than or equal to 1.');
        }

        $this->container['bp_crdt_wrthnss_access_chk_is_active'] = $bp_crdt_wrthnss_access_chk_is_active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


