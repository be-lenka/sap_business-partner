<?php
/**
 * APIBUSINESSPARTNERABuPaIndustryTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABuPaIndustryTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABuPaIndustryTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BuPaIndustryType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'industry_sector' => 'string',
        'industry_system_type' => 'string',
        'business_partner' => 'string',
        'is_standard_industry' => 'string',
        'industry_key_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'industry_sector' => null,
        'industry_system_type' => null,
        'business_partner' => null,
        'is_standard_industry' => null,
        'industry_key_description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'industry_sector' => false,
		'industry_system_type' => false,
		'business_partner' => false,
		'is_standard_industry' => true,
		'industry_key_description' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'industry_sector' => 'IndustrySector',
        'industry_system_type' => 'IndustrySystemType',
        'business_partner' => 'BusinessPartner',
        'is_standard_industry' => 'IsStandardIndustry',
        'industry_key_description' => 'IndustryKeyDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'industry_sector' => 'setIndustrySector',
        'industry_system_type' => 'setIndustrySystemType',
        'business_partner' => 'setBusinessPartner',
        'is_standard_industry' => 'setIsStandardIndustry',
        'industry_key_description' => 'setIndustryKeyDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'industry_sector' => 'getIndustrySector',
        'industry_system_type' => 'getIndustrySystemType',
        'business_partner' => 'getBusinessPartner',
        'is_standard_industry' => 'getIsStandardIndustry',
        'industry_key_description' => 'getIndustryKeyDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('industry_sector', $data ?? [], null);
        $this->setIfExists('industry_system_type', $data ?? [], null);
        $this->setIfExists('business_partner', $data ?? [], null);
        $this->setIfExists('is_standard_industry', $data ?? [], null);
        $this->setIfExists('industry_key_description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['industry_sector'] === null) {
            $invalidProperties[] = "'industry_sector' can't be null";
        }
        if ((mb_strlen($this->container['industry_sector']) > 10)) {
            $invalidProperties[] = "invalid value for 'industry_sector', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['industry_system_type'] === null) {
            $invalidProperties[] = "'industry_system_type' can't be null";
        }
        if ((mb_strlen($this->container['industry_system_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'industry_system_type', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['business_partner'] === null) {
            $invalidProperties[] = "'business_partner' can't be null";
        }
        if ((mb_strlen($this->container['business_partner']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['is_standard_industry']) && (mb_strlen($this->container['is_standard_industry']) > 1)) {
            $invalidProperties[] = "invalid value for 'is_standard_industry', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['industry_key_description']) && (mb_strlen($this->container['industry_key_description']) > 100)) {
            $invalidProperties[] = "invalid value for 'industry_key_description', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets industry_sector
     *
     * @return string
     */
    public function getIndustrySector()
    {
        return $this->container['industry_sector'];
    }

    /**
     * Sets industry_sector
     *
     * @param string $industry_sector industry_sector
     *
     * @return self
     */
    public function setIndustrySector($industry_sector)
    {
        if (is_null($industry_sector)) {
            throw new \InvalidArgumentException('non-nullable industry_sector cannot be null');
        }
        if ((mb_strlen($industry_sector) > 10)) {
            throw new \InvalidArgumentException('invalid length for $industry_sector when calling APIBUSINESSPARTNERABuPaIndustryTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['industry_sector'] = $industry_sector;

        return $this;
    }

    /**
     * Gets industry_system_type
     *
     * @return string
     */
    public function getIndustrySystemType()
    {
        return $this->container['industry_system_type'];
    }

    /**
     * Sets industry_system_type
     *
     * @param string $industry_system_type industry_system_type
     *
     * @return self
     */
    public function setIndustrySystemType($industry_system_type)
    {
        if (is_null($industry_system_type)) {
            throw new \InvalidArgumentException('non-nullable industry_system_type cannot be null');
        }
        if ((mb_strlen($industry_system_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $industry_system_type when calling APIBUSINESSPARTNERABuPaIndustryTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['industry_system_type'] = $industry_system_type;

        return $this;
    }

    /**
     * Gets business_partner
     *
     * @return string
     */
    public function getBusinessPartner()
    {
        return $this->container['business_partner'];
    }

    /**
     * Sets business_partner
     *
     * @param string $business_partner Business Partner Number
     *
     * @return self
     */
    public function setBusinessPartner($business_partner)
    {
        if (is_null($business_partner)) {
            throw new \InvalidArgumentException('non-nullable business_partner cannot be null');
        }
        if ((mb_strlen($business_partner) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner when calling APIBUSINESSPARTNERABuPaIndustryTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['business_partner'] = $business_partner;

        return $this;
    }

    /**
     * Gets is_standard_industry
     *
     * @return string|null
     */
    public function getIsStandardIndustry()
    {
        return $this->container['is_standard_industry'];
    }

    /**
     * Sets is_standard_industry
     *
     * @param string|null $is_standard_industry Industry is Standard for BP in Industry System
     *
     * @return self
     */
    public function setIsStandardIndustry($is_standard_industry)
    {
        if (is_null($is_standard_industry)) {
            array_push($this->openAPINullablesSetToNull, 'is_standard_industry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_standard_industry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($is_standard_industry) && (mb_strlen($is_standard_industry) > 1)) {
            throw new \InvalidArgumentException('invalid length for $is_standard_industry when calling APIBUSINESSPARTNERABuPaIndustryTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['is_standard_industry'] = $is_standard_industry;

        return $this;
    }

    /**
     * Gets industry_key_description
     *
     * @return string|null
     */
    public function getIndustryKeyDescription()
    {
        return $this->container['industry_key_description'];
    }

    /**
     * Sets industry_key_description
     *
     * @param string|null $industry_key_description industry_key_description
     *
     * @return self
     */
    public function setIndustryKeyDescription($industry_key_description)
    {
        if (is_null($industry_key_description)) {
            array_push($this->openAPINullablesSetToNull, 'industry_key_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_key_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry_key_description) && (mb_strlen($industry_key_description) > 100)) {
            throw new \InvalidArgumentException('invalid length for $industry_key_description when calling APIBUSINESSPARTNERABuPaIndustryTypeCreate., must be smaller than or equal to 100.');
        }

        $this->container['industry_key_description'] = $industry_key_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


