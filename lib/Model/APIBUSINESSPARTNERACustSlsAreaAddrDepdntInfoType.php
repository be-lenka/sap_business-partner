<?php
/**
 * APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_CustSlsAreaAddrDepdntInfoType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer' => 'string',
        'sales_organization' => 'string',
        'distribution_channel' => 'string',
        'division' => 'string',
        'address_id' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'incoterms_sup_chn_loc1_addl_uuid' => 'string',
        'incoterms_sup_chn_loc2_addl_uuid' => 'string',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'string',
        'delivery_is_blocked' => 'string',
        'sales_office' => 'string',
        'sales_group' => 'string',
        'shipping_condition' => 'string',
        'supplying_plant' => 'string',
        'incoterms_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer' => null,
        'sales_organization' => null,
        'distribution_channel' => null,
        'division' => null,
        'address_id' => null,
        'incoterms_classification' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'incoterms_sup_chn_loc1_addl_uuid' => 'uuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'uuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'uuid',
        'delivery_is_blocked' => null,
        'sales_office' => null,
        'sales_group' => null,
        'shipping_condition' => null,
        'supplying_plant' => null,
        'incoterms_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer' => false,
		'sales_organization' => false,
		'distribution_channel' => false,
		'division' => false,
		'address_id' => false,
		'incoterms_classification' => true,
		'incoterms_location1' => true,
		'incoterms_location2' => true,
		'incoterms_sup_chn_loc1_addl_uuid' => true,
		'incoterms_sup_chn_loc2_addl_uuid' => true,
		'incoterms_sup_chn_dvtg_loc_addl_uuid' => true,
		'delivery_is_blocked' => true,
		'sales_office' => true,
		'sales_group' => true,
		'shipping_condition' => true,
		'supplying_plant' => true,
		'incoterms_version' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer' => 'Customer',
        'sales_organization' => 'SalesOrganization',
        'distribution_channel' => 'DistributionChannel',
        'division' => 'Division',
        'address_id' => 'AddressID',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'incoterms_sup_chn_loc1_addl_uuid' => 'IncotermsSupChnLoc1AddlUUID',
        'incoterms_sup_chn_loc2_addl_uuid' => 'IncotermsSupChnLoc2AddlUUID',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'IncotermsSupChnDvtgLocAddlUUID',
        'delivery_is_blocked' => 'DeliveryIsBlocked',
        'sales_office' => 'SalesOffice',
        'sales_group' => 'SalesGroup',
        'shipping_condition' => 'ShippingCondition',
        'supplying_plant' => 'SupplyingPlant',
        'incoterms_version' => 'IncotermsVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer' => 'setCustomer',
        'sales_organization' => 'setSalesOrganization',
        'distribution_channel' => 'setDistributionChannel',
        'division' => 'setDivision',
        'address_id' => 'setAddressId',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'incoterms_sup_chn_loc1_addl_uuid' => 'setIncotermsSupChnLoc1AddlUuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'setIncotermsSupChnLoc2AddlUuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'setIncotermsSupChnDvtgLocAddlUuid',
        'delivery_is_blocked' => 'setDeliveryIsBlocked',
        'sales_office' => 'setSalesOffice',
        'sales_group' => 'setSalesGroup',
        'shipping_condition' => 'setShippingCondition',
        'supplying_plant' => 'setSupplyingPlant',
        'incoterms_version' => 'setIncotermsVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer' => 'getCustomer',
        'sales_organization' => 'getSalesOrganization',
        'distribution_channel' => 'getDistributionChannel',
        'division' => 'getDivision',
        'address_id' => 'getAddressId',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'incoterms_sup_chn_loc1_addl_uuid' => 'getIncotermsSupChnLoc1AddlUuid',
        'incoterms_sup_chn_loc2_addl_uuid' => 'getIncotermsSupChnLoc2AddlUuid',
        'incoterms_sup_chn_dvtg_loc_addl_uuid' => 'getIncotermsSupChnDvtgLocAddlUuid',
        'delivery_is_blocked' => 'getDeliveryIsBlocked',
        'sales_office' => 'getSalesOffice',
        'sales_group' => 'getSalesGroup',
        'shipping_condition' => 'getShippingCondition',
        'supplying_plant' => 'getSupplyingPlant',
        'incoterms_version' => 'getIncotermsVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('sales_organization', $data ?? [], null);
        $this->setIfExists('distribution_channel', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_loc1_addl_uuid', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_loc2_addl_uuid', $data ?? [], null);
        $this->setIfExists('incoterms_sup_chn_dvtg_loc_addl_uuid', $data ?? [], null);
        $this->setIfExists('delivery_is_blocked', $data ?? [], null);
        $this->setIfExists('sales_office', $data ?? [], null);
        $this->setIfExists('sales_group', $data ?? [], null);
        $this->setIfExists('shipping_condition', $data ?? [], null);
        $this->setIfExists('supplying_plant', $data ?? [], null);
        $this->setIfExists('incoterms_version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['customer']) && (mb_strlen($this->container['customer']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_organization']) && (mb_strlen($this->container['sales_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['distribution_channel']) && (mb_strlen($this->container['distribution_channel']) > 2)) {
            $invalidProperties[] = "invalid value for 'distribution_channel', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['division']) && (mb_strlen($this->container['division']) > 2)) {
            $invalidProperties[] = "invalid value for 'division', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['address_id']) && (mb_strlen($this->container['address_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'address_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['delivery_is_blocked']) && (mb_strlen($this->container['delivery_is_blocked']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_is_blocked', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['sales_office']) && (mb_strlen($this->container['sales_office']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_office', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_group']) && (mb_strlen($this->container['sales_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'sales_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['shipping_condition']) && (mb_strlen($this->container['shipping_condition']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_condition', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['supplying_plant']) && (mb_strlen($this->container['supplying_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'supplying_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['incoterms_version']) && (mb_strlen($this->container['incoterms_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'incoterms_version', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer Customer Number
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        if ((mb_strlen($customer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 10.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets sales_organization
     *
     * @return string|null
     */
    public function getSalesOrganization()
    {
        return $this->container['sales_organization'];
    }

    /**
     * Sets sales_organization
     *
     * @param string|null $sales_organization sales_organization
     *
     * @return self
     */
    public function setSalesOrganization($sales_organization)
    {
        if (is_null($sales_organization)) {
            throw new \InvalidArgumentException('non-nullable sales_organization cannot be null');
        }
        if ((mb_strlen($sales_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_organization when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 4.');
        }

        $this->container['sales_organization'] = $sales_organization;

        return $this;
    }

    /**
     * Gets distribution_channel
     *
     * @return string|null
     */
    public function getDistributionChannel()
    {
        return $this->container['distribution_channel'];
    }

    /**
     * Sets distribution_channel
     *
     * @param string|null $distribution_channel distribution_channel
     *
     * @return self
     */
    public function setDistributionChannel($distribution_channel)
    {
        if (is_null($distribution_channel)) {
            throw new \InvalidArgumentException('non-nullable distribution_channel cannot be null');
        }
        if ((mb_strlen($distribution_channel) > 2)) {
            throw new \InvalidArgumentException('invalid length for $distribution_channel when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 2.');
        }

        $this->container['distribution_channel'] = $distribution_channel;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division division
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            throw new \InvalidArgumentException('non-nullable division cannot be null');
        }
        if ((mb_strlen($division) > 2)) {
            throw new \InvalidArgumentException('invalid length for $division when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 2.');
        }

        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string|null $address_id Business Partner Address Number (from BUT020)
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            throw new \InvalidArgumentException('non-nullable address_id cannot be null');
        }
        if ((mb_strlen($address_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $address_id when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 10.');
        }

        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_loc1_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnLoc1AddlUuid()
    {
        return $this->container['incoterms_sup_chn_loc1_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_loc1_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_loc1_addl_uuid incoterms_sup_chn_loc1_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnLoc1AddlUuid($incoterms_sup_chn_loc1_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_loc1_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_loc1_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_loc1_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_loc1_addl_uuid'] = $incoterms_sup_chn_loc1_addl_uuid;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_loc2_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnLoc2AddlUuid()
    {
        return $this->container['incoterms_sup_chn_loc2_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_loc2_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_loc2_addl_uuid incoterms_sup_chn_loc2_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnLoc2AddlUuid($incoterms_sup_chn_loc2_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_loc2_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_loc2_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_loc2_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_loc2_addl_uuid'] = $incoterms_sup_chn_loc2_addl_uuid;

        return $this;
    }

    /**
     * Gets incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @return string|null
     */
    public function getIncotermsSupChnDvtgLocAddlUuid()
    {
        return $this->container['incoterms_sup_chn_dvtg_loc_addl_uuid'];
    }

    /**
     * Sets incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @param string|null $incoterms_sup_chn_dvtg_loc_addl_uuid incoterms_sup_chn_dvtg_loc_addl_uuid
     *
     * @return self
     */
    public function setIncotermsSupChnDvtgLocAddlUuid($incoterms_sup_chn_dvtg_loc_addl_uuid)
    {
        if (is_null($incoterms_sup_chn_dvtg_loc_addl_uuid)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_sup_chn_dvtg_loc_addl_uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_sup_chn_dvtg_loc_addl_uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incoterms_sup_chn_dvtg_loc_addl_uuid'] = $incoterms_sup_chn_dvtg_loc_addl_uuid;

        return $this;
    }

    /**
     * Gets delivery_is_blocked
     *
     * @return string|null
     */
    public function getDeliveryIsBlocked()
    {
        return $this->container['delivery_is_blocked'];
    }

    /**
     * Sets delivery_is_blocked
     *
     * @param string|null $delivery_is_blocked Customer delivery block (sales area)
     *
     * @return self
     */
    public function setDeliveryIsBlocked($delivery_is_blocked)
    {
        if (is_null($delivery_is_blocked)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_is_blocked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_is_blocked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_is_blocked) && (mb_strlen($delivery_is_blocked) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_is_blocked when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 2.');
        }

        $this->container['delivery_is_blocked'] = $delivery_is_blocked;

        return $this;
    }

    /**
     * Gets sales_office
     *
     * @return string|null
     */
    public function getSalesOffice()
    {
        return $this->container['sales_office'];
    }

    /**
     * Sets sales_office
     *
     * @param string|null $sales_office sales_office
     *
     * @return self
     */
    public function setSalesOffice($sales_office)
    {
        if (is_null($sales_office)) {
            array_push($this->openAPINullablesSetToNull, 'sales_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_office) && (mb_strlen($sales_office) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_office when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 4.');
        }

        $this->container['sales_office'] = $sales_office;

        return $this;
    }

    /**
     * Gets sales_group
     *
     * @return string|null
     */
    public function getSalesGroup()
    {
        return $this->container['sales_group'];
    }

    /**
     * Sets sales_group
     *
     * @param string|null $sales_group sales_group
     *
     * @return self
     */
    public function setSalesGroup($sales_group)
    {
        if (is_null($sales_group)) {
            array_push($this->openAPINullablesSetToNull, 'sales_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_group) && (mb_strlen($sales_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $sales_group when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 3.');
        }

        $this->container['sales_group'] = $sales_group;

        return $this;
    }

    /**
     * Gets shipping_condition
     *
     * @return string|null
     */
    public function getShippingCondition()
    {
        return $this->container['shipping_condition'];
    }

    /**
     * Sets shipping_condition
     *
     * @param string|null $shipping_condition shipping_condition
     *
     * @return self
     */
    public function setShippingCondition($shipping_condition)
    {
        if (is_null($shipping_condition)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_condition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_condition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_condition) && (mb_strlen($shipping_condition) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_condition when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 2.');
        }

        $this->container['shipping_condition'] = $shipping_condition;

        return $this;
    }

    /**
     * Gets supplying_plant
     *
     * @return string|null
     */
    public function getSupplyingPlant()
    {
        return $this->container['supplying_plant'];
    }

    /**
     * Sets supplying_plant
     *
     * @param string|null $supplying_plant Delivering Plant (Own or External)
     *
     * @return self
     */
    public function setSupplyingPlant($supplying_plant)
    {
        if (is_null($supplying_plant)) {
            array_push($this->openAPINullablesSetToNull, 'supplying_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplying_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplying_plant) && (mb_strlen($supplying_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $supplying_plant when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 4.');
        }

        $this->container['supplying_plant'] = $supplying_plant;

        return $this;
    }

    /**
     * Gets incoterms_version
     *
     * @return string|null
     */
    public function getIncotermsVersion()
    {
        return $this->container['incoterms_version'];
    }

    /**
     * Sets incoterms_version
     *
     * @param string|null $incoterms_version incoterms_version
     *
     * @return self
     */
    public function setIncotermsVersion($incoterms_version)
    {
        if (is_null($incoterms_version)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_version) && (mb_strlen($incoterms_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_version when calling APIBUSINESSPARTNERACustSlsAreaAddrDepdntInfoType., must be smaller than or equal to 4.');
        }

        $this->container['incoterms_version'] = $incoterms_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


