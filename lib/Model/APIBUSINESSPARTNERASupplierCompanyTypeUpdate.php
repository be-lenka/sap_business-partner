<?php
/**
 * APIBUSINESSPARTNERASupplierCompanyTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERASupplierCompanyTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERASupplierCompanyTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_SupplierCompanyType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorization_group' => 'string',
        'payment_blocking_reason' => 'string',
        'supplier_is_blocked_for_posting' => 'bool',
        'accounting_clerk' => 'string',
        'accounting_clerk_fax_number' => 'string',
        'accounting_clerk_phone_number' => 'string',
        'supplier_clerk' => 'string',
        'supplier_clerk_url' => 'string',
        'payment_methods_list' => 'string',
        'payment_reason' => 'string',
        'payment_terms' => 'string',
        'clear_customer_supplier' => 'bool',
        'is_to_be_locally_processed' => 'bool',
        'item_is_to_be_paid_separately' => 'bool',
        'payment_is_to_be_sent_by_edi' => 'bool',
        'house_bank' => 'string',
        'check_paid_duration_in_days' => 'float',
        'currency' => 'string',
        'bill_of_exch_lmt_amt_in_co_code_crcy' => 'float',
        'supplier_clerk_idby_supplier' => 'string',
        'reconciliation_account' => 'string',
        'interest_calculation_code' => 'string',
        'interest_calculation_date' => 'string',
        'intrst_calc_frequency_in_months' => 'string',
        'supplier_head_office' => 'string',
        'alternative_payee' => 'string',
        'layout_sorting_rule' => 'string',
        'apar_tolerance_group' => 'string',
        'supplier_certification_date' => 'string',
        'supplier_account_note' => 'string',
        'withholding_tax_country' => 'string',
        'deletion_indicator' => 'bool',
        'cash_planning_group' => 'string',
        'is_to_be_checked_for_duplicates' => 'bool',
        'minority_group' => 'string',
        'supplier_account_group' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorization_group' => null,
        'payment_blocking_reason' => null,
        'supplier_is_blocked_for_posting' => null,
        'accounting_clerk' => null,
        'accounting_clerk_fax_number' => null,
        'accounting_clerk_phone_number' => null,
        'supplier_clerk' => null,
        'supplier_clerk_url' => null,
        'payment_methods_list' => null,
        'payment_reason' => null,
        'payment_terms' => null,
        'clear_customer_supplier' => null,
        'is_to_be_locally_processed' => null,
        'item_is_to_be_paid_separately' => null,
        'payment_is_to_be_sent_by_edi' => null,
        'house_bank' => null,
        'check_paid_duration_in_days' => 'decimal',
        'currency' => null,
        'bill_of_exch_lmt_amt_in_co_code_crcy' => 'decimal',
        'supplier_clerk_idby_supplier' => null,
        'reconciliation_account' => null,
        'interest_calculation_code' => null,
        'interest_calculation_date' => null,
        'intrst_calc_frequency_in_months' => null,
        'supplier_head_office' => null,
        'alternative_payee' => null,
        'layout_sorting_rule' => null,
        'apar_tolerance_group' => null,
        'supplier_certification_date' => null,
        'supplier_account_note' => null,
        'withholding_tax_country' => null,
        'deletion_indicator' => null,
        'cash_planning_group' => null,
        'is_to_be_checked_for_duplicates' => null,
        'minority_group' => null,
        'supplier_account_group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorization_group' => true,
		'payment_blocking_reason' => true,
		'supplier_is_blocked_for_posting' => true,
		'accounting_clerk' => true,
		'accounting_clerk_fax_number' => true,
		'accounting_clerk_phone_number' => true,
		'supplier_clerk' => true,
		'supplier_clerk_url' => true,
		'payment_methods_list' => true,
		'payment_reason' => true,
		'payment_terms' => true,
		'clear_customer_supplier' => true,
		'is_to_be_locally_processed' => true,
		'item_is_to_be_paid_separately' => true,
		'payment_is_to_be_sent_by_edi' => true,
		'house_bank' => true,
		'check_paid_duration_in_days' => true,
		'currency' => true,
		'bill_of_exch_lmt_amt_in_co_code_crcy' => true,
		'supplier_clerk_idby_supplier' => true,
		'reconciliation_account' => true,
		'interest_calculation_code' => true,
		'interest_calculation_date' => true,
		'intrst_calc_frequency_in_months' => true,
		'supplier_head_office' => true,
		'alternative_payee' => true,
		'layout_sorting_rule' => true,
		'apar_tolerance_group' => true,
		'supplier_certification_date' => true,
		'supplier_account_note' => true,
		'withholding_tax_country' => true,
		'deletion_indicator' => true,
		'cash_planning_group' => true,
		'is_to_be_checked_for_duplicates' => true,
		'minority_group' => true,
		'supplier_account_group' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_group' => 'AuthorizationGroup',
        'payment_blocking_reason' => 'PaymentBlockingReason',
        'supplier_is_blocked_for_posting' => 'SupplierIsBlockedForPosting',
        'accounting_clerk' => 'AccountingClerk',
        'accounting_clerk_fax_number' => 'AccountingClerkFaxNumber',
        'accounting_clerk_phone_number' => 'AccountingClerkPhoneNumber',
        'supplier_clerk' => 'SupplierClerk',
        'supplier_clerk_url' => 'SupplierClerkURL',
        'payment_methods_list' => 'PaymentMethodsList',
        'payment_reason' => 'PaymentReason',
        'payment_terms' => 'PaymentTerms',
        'clear_customer_supplier' => 'ClearCustomerSupplier',
        'is_to_be_locally_processed' => 'IsToBeLocallyProcessed',
        'item_is_to_be_paid_separately' => 'ItemIsToBePaidSeparately',
        'payment_is_to_be_sent_by_edi' => 'PaymentIsToBeSentByEDI',
        'house_bank' => 'HouseBank',
        'check_paid_duration_in_days' => 'CheckPaidDurationInDays',
        'currency' => 'Currency',
        'bill_of_exch_lmt_amt_in_co_code_crcy' => 'BillOfExchLmtAmtInCoCodeCrcy',
        'supplier_clerk_idby_supplier' => 'SupplierClerkIDBySupplier',
        'reconciliation_account' => 'ReconciliationAccount',
        'interest_calculation_code' => 'InterestCalculationCode',
        'interest_calculation_date' => 'InterestCalculationDate',
        'intrst_calc_frequency_in_months' => 'IntrstCalcFrequencyInMonths',
        'supplier_head_office' => 'SupplierHeadOffice',
        'alternative_payee' => 'AlternativePayee',
        'layout_sorting_rule' => 'LayoutSortingRule',
        'apar_tolerance_group' => 'APARToleranceGroup',
        'supplier_certification_date' => 'SupplierCertificationDate',
        'supplier_account_note' => 'SupplierAccountNote',
        'withholding_tax_country' => 'WithholdingTaxCountry',
        'deletion_indicator' => 'DeletionIndicator',
        'cash_planning_group' => 'CashPlanningGroup',
        'is_to_be_checked_for_duplicates' => 'IsToBeCheckedForDuplicates',
        'minority_group' => 'MinorityGroup',
        'supplier_account_group' => 'SupplierAccountGroup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_group' => 'setAuthorizationGroup',
        'payment_blocking_reason' => 'setPaymentBlockingReason',
        'supplier_is_blocked_for_posting' => 'setSupplierIsBlockedForPosting',
        'accounting_clerk' => 'setAccountingClerk',
        'accounting_clerk_fax_number' => 'setAccountingClerkFaxNumber',
        'accounting_clerk_phone_number' => 'setAccountingClerkPhoneNumber',
        'supplier_clerk' => 'setSupplierClerk',
        'supplier_clerk_url' => 'setSupplierClerkUrl',
        'payment_methods_list' => 'setPaymentMethodsList',
        'payment_reason' => 'setPaymentReason',
        'payment_terms' => 'setPaymentTerms',
        'clear_customer_supplier' => 'setClearCustomerSupplier',
        'is_to_be_locally_processed' => 'setIsToBeLocallyProcessed',
        'item_is_to_be_paid_separately' => 'setItemIsToBePaidSeparately',
        'payment_is_to_be_sent_by_edi' => 'setPaymentIsToBeSentByEdi',
        'house_bank' => 'setHouseBank',
        'check_paid_duration_in_days' => 'setCheckPaidDurationInDays',
        'currency' => 'setCurrency',
        'bill_of_exch_lmt_amt_in_co_code_crcy' => 'setBillOfExchLmtAmtInCoCodeCrcy',
        'supplier_clerk_idby_supplier' => 'setSupplierClerkIdbySupplier',
        'reconciliation_account' => 'setReconciliationAccount',
        'interest_calculation_code' => 'setInterestCalculationCode',
        'interest_calculation_date' => 'setInterestCalculationDate',
        'intrst_calc_frequency_in_months' => 'setIntrstCalcFrequencyInMonths',
        'supplier_head_office' => 'setSupplierHeadOffice',
        'alternative_payee' => 'setAlternativePayee',
        'layout_sorting_rule' => 'setLayoutSortingRule',
        'apar_tolerance_group' => 'setAparToleranceGroup',
        'supplier_certification_date' => 'setSupplierCertificationDate',
        'supplier_account_note' => 'setSupplierAccountNote',
        'withholding_tax_country' => 'setWithholdingTaxCountry',
        'deletion_indicator' => 'setDeletionIndicator',
        'cash_planning_group' => 'setCashPlanningGroup',
        'is_to_be_checked_for_duplicates' => 'setIsToBeCheckedForDuplicates',
        'minority_group' => 'setMinorityGroup',
        'supplier_account_group' => 'setSupplierAccountGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_group' => 'getAuthorizationGroup',
        'payment_blocking_reason' => 'getPaymentBlockingReason',
        'supplier_is_blocked_for_posting' => 'getSupplierIsBlockedForPosting',
        'accounting_clerk' => 'getAccountingClerk',
        'accounting_clerk_fax_number' => 'getAccountingClerkFaxNumber',
        'accounting_clerk_phone_number' => 'getAccountingClerkPhoneNumber',
        'supplier_clerk' => 'getSupplierClerk',
        'supplier_clerk_url' => 'getSupplierClerkUrl',
        'payment_methods_list' => 'getPaymentMethodsList',
        'payment_reason' => 'getPaymentReason',
        'payment_terms' => 'getPaymentTerms',
        'clear_customer_supplier' => 'getClearCustomerSupplier',
        'is_to_be_locally_processed' => 'getIsToBeLocallyProcessed',
        'item_is_to_be_paid_separately' => 'getItemIsToBePaidSeparately',
        'payment_is_to_be_sent_by_edi' => 'getPaymentIsToBeSentByEdi',
        'house_bank' => 'getHouseBank',
        'check_paid_duration_in_days' => 'getCheckPaidDurationInDays',
        'currency' => 'getCurrency',
        'bill_of_exch_lmt_amt_in_co_code_crcy' => 'getBillOfExchLmtAmtInCoCodeCrcy',
        'supplier_clerk_idby_supplier' => 'getSupplierClerkIdbySupplier',
        'reconciliation_account' => 'getReconciliationAccount',
        'interest_calculation_code' => 'getInterestCalculationCode',
        'interest_calculation_date' => 'getInterestCalculationDate',
        'intrst_calc_frequency_in_months' => 'getIntrstCalcFrequencyInMonths',
        'supplier_head_office' => 'getSupplierHeadOffice',
        'alternative_payee' => 'getAlternativePayee',
        'layout_sorting_rule' => 'getLayoutSortingRule',
        'apar_tolerance_group' => 'getAparToleranceGroup',
        'supplier_certification_date' => 'getSupplierCertificationDate',
        'supplier_account_note' => 'getSupplierAccountNote',
        'withholding_tax_country' => 'getWithholdingTaxCountry',
        'deletion_indicator' => 'getDeletionIndicator',
        'cash_planning_group' => 'getCashPlanningGroup',
        'is_to_be_checked_for_duplicates' => 'getIsToBeCheckedForDuplicates',
        'minority_group' => 'getMinorityGroup',
        'supplier_account_group' => 'getSupplierAccountGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authorization_group', $data ?? [], null);
        $this->setIfExists('payment_blocking_reason', $data ?? [], null);
        $this->setIfExists('supplier_is_blocked_for_posting', $data ?? [], null);
        $this->setIfExists('accounting_clerk', $data ?? [], null);
        $this->setIfExists('accounting_clerk_fax_number', $data ?? [], null);
        $this->setIfExists('accounting_clerk_phone_number', $data ?? [], null);
        $this->setIfExists('supplier_clerk', $data ?? [], null);
        $this->setIfExists('supplier_clerk_url', $data ?? [], null);
        $this->setIfExists('payment_methods_list', $data ?? [], null);
        $this->setIfExists('payment_reason', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('clear_customer_supplier', $data ?? [], null);
        $this->setIfExists('is_to_be_locally_processed', $data ?? [], null);
        $this->setIfExists('item_is_to_be_paid_separately', $data ?? [], null);
        $this->setIfExists('payment_is_to_be_sent_by_edi', $data ?? [], null);
        $this->setIfExists('house_bank', $data ?? [], null);
        $this->setIfExists('check_paid_duration_in_days', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('bill_of_exch_lmt_amt_in_co_code_crcy', $data ?? [], null);
        $this->setIfExists('supplier_clerk_idby_supplier', $data ?? [], null);
        $this->setIfExists('reconciliation_account', $data ?? [], null);
        $this->setIfExists('interest_calculation_code', $data ?? [], null);
        $this->setIfExists('interest_calculation_date', $data ?? [], null);
        $this->setIfExists('intrst_calc_frequency_in_months', $data ?? [], null);
        $this->setIfExists('supplier_head_office', $data ?? [], null);
        $this->setIfExists('alternative_payee', $data ?? [], null);
        $this->setIfExists('layout_sorting_rule', $data ?? [], null);
        $this->setIfExists('apar_tolerance_group', $data ?? [], null);
        $this->setIfExists('supplier_certification_date', $data ?? [], null);
        $this->setIfExists('supplier_account_note', $data ?? [], null);
        $this->setIfExists('withholding_tax_country', $data ?? [], null);
        $this->setIfExists('deletion_indicator', $data ?? [], null);
        $this->setIfExists('cash_planning_group', $data ?? [], null);
        $this->setIfExists('is_to_be_checked_for_duplicates', $data ?? [], null);
        $this->setIfExists('minority_group', $data ?? [], null);
        $this->setIfExists('supplier_account_group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['authorization_group']) && (mb_strlen($this->container['authorization_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'authorization_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['payment_blocking_reason']) && (mb_strlen($this->container['payment_blocking_reason']) > 1)) {
            $invalidProperties[] = "invalid value for 'payment_blocking_reason', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['accounting_clerk']) && (mb_strlen($this->container['accounting_clerk']) > 2)) {
            $invalidProperties[] = "invalid value for 'accounting_clerk', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['accounting_clerk_fax_number']) && (mb_strlen($this->container['accounting_clerk_fax_number']) > 31)) {
            $invalidProperties[] = "invalid value for 'accounting_clerk_fax_number', the character length must be smaller than or equal to 31.";
        }

        if (!is_null($this->container['accounting_clerk_phone_number']) && (mb_strlen($this->container['accounting_clerk_phone_number']) > 30)) {
            $invalidProperties[] = "invalid value for 'accounting_clerk_phone_number', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['supplier_clerk']) && (mb_strlen($this->container['supplier_clerk']) > 15)) {
            $invalidProperties[] = "invalid value for 'supplier_clerk', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['supplier_clerk_url']) && (mb_strlen($this->container['supplier_clerk_url']) > 130)) {
            $invalidProperties[] = "invalid value for 'supplier_clerk_url', the character length must be smaller than or equal to 130.";
        }

        if (!is_null($this->container['payment_methods_list']) && (mb_strlen($this->container['payment_methods_list']) > 10)) {
            $invalidProperties[] = "invalid value for 'payment_methods_list', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['payment_reason']) && (mb_strlen($this->container['payment_reason']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_reason', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['payment_terms']) && (mb_strlen($this->container['payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['house_bank']) && (mb_strlen($this->container['house_bank']) > 5)) {
            $invalidProperties[] = "invalid value for 'house_bank', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['currency']) && (mb_strlen($this->container['currency']) > 5)) {
            $invalidProperties[] = "invalid value for 'currency', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['supplier_clerk_idby_supplier']) && (mb_strlen($this->container['supplier_clerk_idby_supplier']) > 12)) {
            $invalidProperties[] = "invalid value for 'supplier_clerk_idby_supplier', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['reconciliation_account']) && (mb_strlen($this->container['reconciliation_account']) > 10)) {
            $invalidProperties[] = "invalid value for 'reconciliation_account', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['interest_calculation_code']) && (mb_strlen($this->container['interest_calculation_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'interest_calculation_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['intrst_calc_frequency_in_months']) && (mb_strlen($this->container['intrst_calc_frequency_in_months']) > 2)) {
            $invalidProperties[] = "invalid value for 'intrst_calc_frequency_in_months', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['supplier_head_office']) && (mb_strlen($this->container['supplier_head_office']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier_head_office', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['alternative_payee']) && (mb_strlen($this->container['alternative_payee']) > 10)) {
            $invalidProperties[] = "invalid value for 'alternative_payee', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['layout_sorting_rule']) && (mb_strlen($this->container['layout_sorting_rule']) > 3)) {
            $invalidProperties[] = "invalid value for 'layout_sorting_rule', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['apar_tolerance_group']) && (mb_strlen($this->container['apar_tolerance_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'apar_tolerance_group', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['supplier_account_note']) && (mb_strlen($this->container['supplier_account_note']) > 30)) {
            $invalidProperties[] = "invalid value for 'supplier_account_note', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['withholding_tax_country']) && (mb_strlen($this->container['withholding_tax_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'withholding_tax_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['cash_planning_group']) && (mb_strlen($this->container['cash_planning_group']) > 10)) {
            $invalidProperties[] = "invalid value for 'cash_planning_group', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['minority_group']) && (mb_strlen($this->container['minority_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'minority_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['supplier_account_group']) && (mb_strlen($this->container['supplier_account_group']) > 4)) {
            $invalidProperties[] = "invalid value for 'supplier_account_group', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_group
     *
     * @return string|null
     */
    public function getAuthorizationGroup()
    {
        return $this->container['authorization_group'];
    }

    /**
     * Sets authorization_group
     *
     * @param string|null $authorization_group Authorization Group
     *
     * @return self
     */
    public function setAuthorizationGroup($authorization_group)
    {
        if (is_null($authorization_group)) {
            array_push($this->openAPINullablesSetToNull, 'authorization_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorization_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($authorization_group) && (mb_strlen($authorization_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $authorization_group when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['authorization_group'] = $authorization_group;

        return $this;
    }

    /**
     * Gets payment_blocking_reason
     *
     * @return string|null
     */
    public function getPaymentBlockingReason()
    {
        return $this->container['payment_blocking_reason'];
    }

    /**
     * Sets payment_blocking_reason
     *
     * @param string|null $payment_blocking_reason Block Key for Payment
     *
     * @return self
     */
    public function setPaymentBlockingReason($payment_blocking_reason)
    {
        if (is_null($payment_blocking_reason)) {
            array_push($this->openAPINullablesSetToNull, 'payment_blocking_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_blocking_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_blocking_reason) && (mb_strlen($payment_blocking_reason) > 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_blocking_reason when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['payment_blocking_reason'] = $payment_blocking_reason;

        return $this;
    }

    /**
     * Gets supplier_is_blocked_for_posting
     *
     * @return bool|null
     */
    public function getSupplierIsBlockedForPosting()
    {
        return $this->container['supplier_is_blocked_for_posting'];
    }

    /**
     * Sets supplier_is_blocked_for_posting
     *
     * @param bool|null $supplier_is_blocked_for_posting Posting block for company code
     *
     * @return self
     */
    public function setSupplierIsBlockedForPosting($supplier_is_blocked_for_posting)
    {
        if (is_null($supplier_is_blocked_for_posting)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_is_blocked_for_posting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_is_blocked_for_posting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_is_blocked_for_posting'] = $supplier_is_blocked_for_posting;

        return $this;
    }

    /**
     * Gets accounting_clerk
     *
     * @return string|null
     */
    public function getAccountingClerk()
    {
        return $this->container['accounting_clerk'];
    }

    /**
     * Sets accounting_clerk
     *
     * @param string|null $accounting_clerk Accounting Clerk Abbreviation
     *
     * @return self
     */
    public function setAccountingClerk($accounting_clerk)
    {
        if (is_null($accounting_clerk)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_clerk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_clerk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_clerk) && (mb_strlen($accounting_clerk) > 2)) {
            throw new \InvalidArgumentException('invalid length for $accounting_clerk when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['accounting_clerk'] = $accounting_clerk;

        return $this;
    }

    /**
     * Gets accounting_clerk_fax_number
     *
     * @return string|null
     */
    public function getAccountingClerkFaxNumber()
    {
        return $this->container['accounting_clerk_fax_number'];
    }

    /**
     * Sets accounting_clerk_fax_number
     *
     * @param string|null $accounting_clerk_fax_number Accounting clerk's fax number at the customer/vendor
     *
     * @return self
     */
    public function setAccountingClerkFaxNumber($accounting_clerk_fax_number)
    {
        if (is_null($accounting_clerk_fax_number)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_clerk_fax_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_clerk_fax_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_clerk_fax_number) && (mb_strlen($accounting_clerk_fax_number) > 31)) {
            throw new \InvalidArgumentException('invalid length for $accounting_clerk_fax_number when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 31.');
        }

        $this->container['accounting_clerk_fax_number'] = $accounting_clerk_fax_number;

        return $this;
    }

    /**
     * Gets accounting_clerk_phone_number
     *
     * @return string|null
     */
    public function getAccountingClerkPhoneNumber()
    {
        return $this->container['accounting_clerk_phone_number'];
    }

    /**
     * Sets accounting_clerk_phone_number
     *
     * @param string|null $accounting_clerk_phone_number Accounting clerk's telephone number at business partner
     *
     * @return self
     */
    public function setAccountingClerkPhoneNumber($accounting_clerk_phone_number)
    {
        if (is_null($accounting_clerk_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'accounting_clerk_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('accounting_clerk_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($accounting_clerk_phone_number) && (mb_strlen($accounting_clerk_phone_number) > 30)) {
            throw new \InvalidArgumentException('invalid length for $accounting_clerk_phone_number when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 30.');
        }

        $this->container['accounting_clerk_phone_number'] = $accounting_clerk_phone_number;

        return $this;
    }

    /**
     * Gets supplier_clerk
     *
     * @return string|null
     */
    public function getSupplierClerk()
    {
        return $this->container['supplier_clerk'];
    }

    /**
     * Sets supplier_clerk
     *
     * @param string|null $supplier_clerk supplier_clerk
     *
     * @return self
     */
    public function setSupplierClerk($supplier_clerk)
    {
        if (is_null($supplier_clerk)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_clerk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_clerk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_clerk) && (mb_strlen($supplier_clerk) > 15)) {
            throw new \InvalidArgumentException('invalid length for $supplier_clerk when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 15.');
        }

        $this->container['supplier_clerk'] = $supplier_clerk;

        return $this;
    }

    /**
     * Gets supplier_clerk_url
     *
     * @return string|null
     */
    public function getSupplierClerkUrl()
    {
        return $this->container['supplier_clerk_url'];
    }

    /**
     * Sets supplier_clerk_url
     *
     * @param string|null $supplier_clerk_url Internet address of partner company clerk
     *
     * @return self
     */
    public function setSupplierClerkUrl($supplier_clerk_url)
    {
        if (is_null($supplier_clerk_url)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_clerk_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_clerk_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_clerk_url) && (mb_strlen($supplier_clerk_url) > 130)) {
            throw new \InvalidArgumentException('invalid length for $supplier_clerk_url when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 130.');
        }

        $this->container['supplier_clerk_url'] = $supplier_clerk_url;

        return $this;
    }

    /**
     * Gets payment_methods_list
     *
     * @return string|null
     */
    public function getPaymentMethodsList()
    {
        return $this->container['payment_methods_list'];
    }

    /**
     * Sets payment_methods_list
     *
     * @param string|null $payment_methods_list List of Respected Payment Methods
     *
     * @return self
     */
    public function setPaymentMethodsList($payment_methods_list)
    {
        if (is_null($payment_methods_list)) {
            array_push($this->openAPINullablesSetToNull, 'payment_methods_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_methods_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_methods_list) && (mb_strlen($payment_methods_list) > 10)) {
            throw new \InvalidArgumentException('invalid length for $payment_methods_list when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['payment_methods_list'] = $payment_methods_list;

        return $this;
    }

    /**
     * Gets payment_reason
     *
     * @return string|null
     */
    public function getPaymentReason()
    {
        return $this->container['payment_reason'];
    }

    /**
     * Sets payment_reason
     *
     * @param string|null $payment_reason payment_reason
     *
     * @return self
     */
    public function setPaymentReason($payment_reason)
    {
        if (is_null($payment_reason)) {
            array_push($this->openAPINullablesSetToNull, 'payment_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_reason) && (mb_strlen($payment_reason) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_reason when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['payment_reason'] = $payment_reason;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string|null $payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($payment_terms) && (mb_strlen($payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_terms when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets clear_customer_supplier
     *
     * @return bool|null
     */
    public function getClearCustomerSupplier()
    {
        return $this->container['clear_customer_supplier'];
    }

    /**
     * Sets clear_customer_supplier
     *
     * @param bool|null $clear_customer_supplier Indicator: Clearing between customer and vendor?
     *
     * @return self
     */
    public function setClearCustomerSupplier($clear_customer_supplier)
    {
        if (is_null($clear_customer_supplier)) {
            array_push($this->openAPINullablesSetToNull, 'clear_customer_supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('clear_customer_supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['clear_customer_supplier'] = $clear_customer_supplier;

        return $this;
    }

    /**
     * Gets is_to_be_locally_processed
     *
     * @return bool|null
     */
    public function getIsToBeLocallyProcessed()
    {
        return $this->container['is_to_be_locally_processed'];
    }

    /**
     * Sets is_to_be_locally_processed
     *
     * @param bool|null $is_to_be_locally_processed Indicator: Local Processing?
     *
     * @return self
     */
    public function setIsToBeLocallyProcessed($is_to_be_locally_processed)
    {
        if (is_null($is_to_be_locally_processed)) {
            array_push($this->openAPINullablesSetToNull, 'is_to_be_locally_processed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_to_be_locally_processed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_to_be_locally_processed'] = $is_to_be_locally_processed;

        return $this;
    }

    /**
     * Gets item_is_to_be_paid_separately
     *
     * @return bool|null
     */
    public function getItemIsToBePaidSeparately()
    {
        return $this->container['item_is_to_be_paid_separately'];
    }

    /**
     * Sets item_is_to_be_paid_separately
     *
     * @param bool|null $item_is_to_be_paid_separately Indicator: Pay All Items Separately?
     *
     * @return self
     */
    public function setItemIsToBePaidSeparately($item_is_to_be_paid_separately)
    {
        if (is_null($item_is_to_be_paid_separately)) {
            array_push($this->openAPINullablesSetToNull, 'item_is_to_be_paid_separately');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_is_to_be_paid_separately', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['item_is_to_be_paid_separately'] = $item_is_to_be_paid_separately;

        return $this;
    }

    /**
     * Gets payment_is_to_be_sent_by_edi
     *
     * @return bool|null
     */
    public function getPaymentIsToBeSentByEdi()
    {
        return $this->container['payment_is_to_be_sent_by_edi'];
    }

    /**
     * Sets payment_is_to_be_sent_by_edi
     *
     * @param bool|null $payment_is_to_be_sent_by_edi Indicator: Send Payment Advices by EDI
     *
     * @return self
     */
    public function setPaymentIsToBeSentByEdi($payment_is_to_be_sent_by_edi)
    {
        if (is_null($payment_is_to_be_sent_by_edi)) {
            array_push($this->openAPINullablesSetToNull, 'payment_is_to_be_sent_by_edi');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_is_to_be_sent_by_edi', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_is_to_be_sent_by_edi'] = $payment_is_to_be_sent_by_edi;

        return $this;
    }

    /**
     * Gets house_bank
     *
     * @return string|null
     */
    public function getHouseBank()
    {
        return $this->container['house_bank'];
    }

    /**
     * Sets house_bank
     *
     * @param string|null $house_bank Short Key for a House Bank
     *
     * @return self
     */
    public function setHouseBank($house_bank)
    {
        if (is_null($house_bank)) {
            array_push($this->openAPINullablesSetToNull, 'house_bank');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('house_bank', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($house_bank) && (mb_strlen($house_bank) > 5)) {
            throw new \InvalidArgumentException('invalid length for $house_bank when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['house_bank'] = $house_bank;

        return $this;
    }

    /**
     * Gets check_paid_duration_in_days
     *
     * @return float|null
     */
    public function getCheckPaidDurationInDays()
    {
        return $this->container['check_paid_duration_in_days'];
    }

    /**
     * Sets check_paid_duration_in_days
     *
     * @param float|null $check_paid_duration_in_days Probable Time Until Check Is Paid
     *
     * @return self
     */
    public function setCheckPaidDurationInDays($check_paid_duration_in_days)
    {
        if (is_null($check_paid_duration_in_days)) {
            array_push($this->openAPINullablesSetToNull, 'check_paid_duration_in_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('check_paid_duration_in_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['check_paid_duration_in_days'] = $check_paid_duration_in_days;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency Key
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency) && (mb_strlen($currency) > 5)) {
            throw new \InvalidArgumentException('invalid length for $currency when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets bill_of_exch_lmt_amt_in_co_code_crcy
     *
     * @return float|null
     */
    public function getBillOfExchLmtAmtInCoCodeCrcy()
    {
        return $this->container['bill_of_exch_lmt_amt_in_co_code_crcy'];
    }

    /**
     * Sets bill_of_exch_lmt_amt_in_co_code_crcy
     *
     * @param float|null $bill_of_exch_lmt_amt_in_co_code_crcy Bill of Exchange Limit (in Local Currency)
     *
     * @return self
     */
    public function setBillOfExchLmtAmtInCoCodeCrcy($bill_of_exch_lmt_amt_in_co_code_crcy)
    {
        if (is_null($bill_of_exch_lmt_amt_in_co_code_crcy)) {
            array_push($this->openAPINullablesSetToNull, 'bill_of_exch_lmt_amt_in_co_code_crcy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_of_exch_lmt_amt_in_co_code_crcy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['bill_of_exch_lmt_amt_in_co_code_crcy'] = $bill_of_exch_lmt_amt_in_co_code_crcy;

        return $this;
    }

    /**
     * Gets supplier_clerk_idby_supplier
     *
     * @return string|null
     */
    public function getSupplierClerkIdbySupplier()
    {
        return $this->container['supplier_clerk_idby_supplier'];
    }

    /**
     * Sets supplier_clerk_idby_supplier
     *
     * @param string|null $supplier_clerk_idby_supplier Our account number with the vendor
     *
     * @return self
     */
    public function setSupplierClerkIdbySupplier($supplier_clerk_idby_supplier)
    {
        if (is_null($supplier_clerk_idby_supplier)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_clerk_idby_supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_clerk_idby_supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_clerk_idby_supplier) && (mb_strlen($supplier_clerk_idby_supplier) > 12)) {
            throw new \InvalidArgumentException('invalid length for $supplier_clerk_idby_supplier when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 12.');
        }

        $this->container['supplier_clerk_idby_supplier'] = $supplier_clerk_idby_supplier;

        return $this;
    }

    /**
     * Gets reconciliation_account
     *
     * @return string|null
     */
    public function getReconciliationAccount()
    {
        return $this->container['reconciliation_account'];
    }

    /**
     * Sets reconciliation_account
     *
     * @param string|null $reconciliation_account Reconciliation Account in General Ledger
     *
     * @return self
     */
    public function setReconciliationAccount($reconciliation_account)
    {
        if (is_null($reconciliation_account)) {
            array_push($this->openAPINullablesSetToNull, 'reconciliation_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reconciliation_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reconciliation_account) && (mb_strlen($reconciliation_account) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reconciliation_account when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['reconciliation_account'] = $reconciliation_account;

        return $this;
    }

    /**
     * Gets interest_calculation_code
     *
     * @return string|null
     */
    public function getInterestCalculationCode()
    {
        return $this->container['interest_calculation_code'];
    }

    /**
     * Sets interest_calculation_code
     *
     * @param string|null $interest_calculation_code interest_calculation_code
     *
     * @return self
     */
    public function setInterestCalculationCode($interest_calculation_code)
    {
        if (is_null($interest_calculation_code)) {
            array_push($this->openAPINullablesSetToNull, 'interest_calculation_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interest_calculation_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($interest_calculation_code) && (mb_strlen($interest_calculation_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $interest_calculation_code when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['interest_calculation_code'] = $interest_calculation_code;

        return $this;
    }

    /**
     * Gets interest_calculation_date
     *
     * @return string|null
     */
    public function getInterestCalculationDate()
    {
        return $this->container['interest_calculation_date'];
    }

    /**
     * Sets interest_calculation_date
     *
     * @param string|null $interest_calculation_date Key Date of Last Interest Calculation
     *
     * @return self
     */
    public function setInterestCalculationDate($interest_calculation_date)
    {
        if (is_null($interest_calculation_date)) {
            array_push($this->openAPINullablesSetToNull, 'interest_calculation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interest_calculation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interest_calculation_date'] = $interest_calculation_date;

        return $this;
    }

    /**
     * Gets intrst_calc_frequency_in_months
     *
     * @return string|null
     */
    public function getIntrstCalcFrequencyInMonths()
    {
        return $this->container['intrst_calc_frequency_in_months'];
    }

    /**
     * Sets intrst_calc_frequency_in_months
     *
     * @param string|null $intrst_calc_frequency_in_months Interest Calculation Frequency in Months
     *
     * @return self
     */
    public function setIntrstCalcFrequencyInMonths($intrst_calc_frequency_in_months)
    {
        if (is_null($intrst_calc_frequency_in_months)) {
            array_push($this->openAPINullablesSetToNull, 'intrst_calc_frequency_in_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intrst_calc_frequency_in_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($intrst_calc_frequency_in_months) && (mb_strlen($intrst_calc_frequency_in_months) > 2)) {
            throw new \InvalidArgumentException('invalid length for $intrst_calc_frequency_in_months when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['intrst_calc_frequency_in_months'] = $intrst_calc_frequency_in_months;

        return $this;
    }

    /**
     * Gets supplier_head_office
     *
     * @return string|null
     */
    public function getSupplierHeadOffice()
    {
        return $this->container['supplier_head_office'];
    }

    /**
     * Sets supplier_head_office
     *
     * @param string|null $supplier_head_office Head Office Account Number
     *
     * @return self
     */
    public function setSupplierHeadOffice($supplier_head_office)
    {
        if (is_null($supplier_head_office)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_head_office');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_head_office', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_head_office) && (mb_strlen($supplier_head_office) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier_head_office when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['supplier_head_office'] = $supplier_head_office;

        return $this;
    }

    /**
     * Gets alternative_payee
     *
     * @return string|null
     */
    public function getAlternativePayee()
    {
        return $this->container['alternative_payee'];
    }

    /**
     * Sets alternative_payee
     *
     * @param string|null $alternative_payee Account number of the alternative payee
     *
     * @return self
     */
    public function setAlternativePayee($alternative_payee)
    {
        if (is_null($alternative_payee)) {
            array_push($this->openAPINullablesSetToNull, 'alternative_payee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alternative_payee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($alternative_payee) && (mb_strlen($alternative_payee) > 10)) {
            throw new \InvalidArgumentException('invalid length for $alternative_payee when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['alternative_payee'] = $alternative_payee;

        return $this;
    }

    /**
     * Gets layout_sorting_rule
     *
     * @return string|null
     */
    public function getLayoutSortingRule()
    {
        return $this->container['layout_sorting_rule'];
    }

    /**
     * Sets layout_sorting_rule
     *
     * @param string|null $layout_sorting_rule Key for Sorting According to Assignment Numbers
     *
     * @return self
     */
    public function setLayoutSortingRule($layout_sorting_rule)
    {
        if (is_null($layout_sorting_rule)) {
            array_push($this->openAPINullablesSetToNull, 'layout_sorting_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('layout_sorting_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($layout_sorting_rule) && (mb_strlen($layout_sorting_rule) > 3)) {
            throw new \InvalidArgumentException('invalid length for $layout_sorting_rule when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['layout_sorting_rule'] = $layout_sorting_rule;

        return $this;
    }

    /**
     * Gets apar_tolerance_group
     *
     * @return string|null
     */
    public function getAparToleranceGroup()
    {
        return $this->container['apar_tolerance_group'];
    }

    /**
     * Sets apar_tolerance_group
     *
     * @param string|null $apar_tolerance_group Tolerance Group for Business Partner/G/L Account
     *
     * @return self
     */
    public function setAparToleranceGroup($apar_tolerance_group)
    {
        if (is_null($apar_tolerance_group)) {
            array_push($this->openAPINullablesSetToNull, 'apar_tolerance_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apar_tolerance_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($apar_tolerance_group) && (mb_strlen($apar_tolerance_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $apar_tolerance_group when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['apar_tolerance_group'] = $apar_tolerance_group;

        return $this;
    }

    /**
     * Gets supplier_certification_date
     *
     * @return string|null
     */
    public function getSupplierCertificationDate()
    {
        return $this->container['supplier_certification_date'];
    }

    /**
     * Sets supplier_certification_date
     *
     * @param string|null $supplier_certification_date supplier_certification_date
     *
     * @return self
     */
    public function setSupplierCertificationDate($supplier_certification_date)
    {
        if (is_null($supplier_certification_date)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_certification_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_certification_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supplier_certification_date'] = $supplier_certification_date;

        return $this;
    }

    /**
     * Gets supplier_account_note
     *
     * @return string|null
     */
    public function getSupplierAccountNote()
    {
        return $this->container['supplier_account_note'];
    }

    /**
     * Sets supplier_account_note
     *
     * @param string|null $supplier_account_note Memo
     *
     * @return self
     */
    public function setSupplierAccountNote($supplier_account_note)
    {
        if (is_null($supplier_account_note)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_account_note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_account_note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_account_note) && (mb_strlen($supplier_account_note) > 30)) {
            throw new \InvalidArgumentException('invalid length for $supplier_account_note when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 30.');
        }

        $this->container['supplier_account_note'] = $supplier_account_note;

        return $this;
    }

    /**
     * Gets withholding_tax_country
     *
     * @return string|null
     */
    public function getWithholdingTaxCountry()
    {
        return $this->container['withholding_tax_country'];
    }

    /**
     * Sets withholding_tax_country
     *
     * @param string|null $withholding_tax_country Withholding Tax Country/Region Key
     *
     * @return self
     */
    public function setWithholdingTaxCountry($withholding_tax_country)
    {
        if (is_null($withholding_tax_country)) {
            array_push($this->openAPINullablesSetToNull, 'withholding_tax_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('withholding_tax_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($withholding_tax_country) && (mb_strlen($withholding_tax_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $withholding_tax_country when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['withholding_tax_country'] = $withholding_tax_country;

        return $this;
    }

    /**
     * Gets deletion_indicator
     *
     * @return bool|null
     */
    public function getDeletionIndicator()
    {
        return $this->container['deletion_indicator'];
    }

    /**
     * Sets deletion_indicator
     *
     * @param bool|null $deletion_indicator Deletion Flag for Master Record (Company Code Level)
     *
     * @return self
     */
    public function setDeletionIndicator($deletion_indicator)
    {
        if (is_null($deletion_indicator)) {
            array_push($this->openAPINullablesSetToNull, 'deletion_indicator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deletion_indicator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deletion_indicator'] = $deletion_indicator;

        return $this;
    }

    /**
     * Gets cash_planning_group
     *
     * @return string|null
     */
    public function getCashPlanningGroup()
    {
        return $this->container['cash_planning_group'];
    }

    /**
     * Sets cash_planning_group
     *
     * @param string|null $cash_planning_group cash_planning_group
     *
     * @return self
     */
    public function setCashPlanningGroup($cash_planning_group)
    {
        if (is_null($cash_planning_group)) {
            array_push($this->openAPINullablesSetToNull, 'cash_planning_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_planning_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cash_planning_group) && (mb_strlen($cash_planning_group) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cash_planning_group when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['cash_planning_group'] = $cash_planning_group;

        return $this;
    }

    /**
     * Gets is_to_be_checked_for_duplicates
     *
     * @return bool|null
     */
    public function getIsToBeCheckedForDuplicates()
    {
        return $this->container['is_to_be_checked_for_duplicates'];
    }

    /**
     * Sets is_to_be_checked_for_duplicates
     *
     * @param bool|null $is_to_be_checked_for_duplicates Check Flag for Double Invoices or Credit Memos
     *
     * @return self
     */
    public function setIsToBeCheckedForDuplicates($is_to_be_checked_for_duplicates)
    {
        if (is_null($is_to_be_checked_for_duplicates)) {
            array_push($this->openAPINullablesSetToNull, 'is_to_be_checked_for_duplicates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_to_be_checked_for_duplicates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_to_be_checked_for_duplicates'] = $is_to_be_checked_for_duplicates;

        return $this;
    }

    /**
     * Gets minority_group
     *
     * @return string|null
     */
    public function getMinorityGroup()
    {
        return $this->container['minority_group'];
    }

    /**
     * Sets minority_group
     *
     * @param string|null $minority_group minority_group
     *
     * @return self
     */
    public function setMinorityGroup($minority_group)
    {
        if (is_null($minority_group)) {
            array_push($this->openAPINullablesSetToNull, 'minority_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minority_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($minority_group) && (mb_strlen($minority_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $minority_group when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['minority_group'] = $minority_group;

        return $this;
    }

    /**
     * Gets supplier_account_group
     *
     * @return string|null
     */
    public function getSupplierAccountGroup()
    {
        return $this->container['supplier_account_group'];
    }

    /**
     * Sets supplier_account_group
     *
     * @param string|null $supplier_account_group Supplier Account Group
     *
     * @return self
     */
    public function setSupplierAccountGroup($supplier_account_group)
    {
        if (is_null($supplier_account_group)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_account_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_account_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_account_group) && (mb_strlen($supplier_account_group) > 4)) {
            throw new \InvalidArgumentException('invalid length for $supplier_account_group when calling APIBUSINESSPARTNERASupplierCompanyTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['supplier_account_group'] = $supplier_account_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


