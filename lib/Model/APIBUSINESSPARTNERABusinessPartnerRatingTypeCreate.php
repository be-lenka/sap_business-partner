<?php
/**
 * APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Business Partner (A2X)
 *
 * This service enables you to create, display, update, and delete data related to Business Partner, Supplier, and Customer with the data provided in a payload, in an API call. This service also supports create deep entity operation and batch processing.
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\BusinessPartner\Model;

use \ArrayAccess;
use \BeLenka\SAP\BusinessPartner\ObjectSerializer;

/**
 * APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\BusinessPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_BUSINESS_PARTNER.A_BusinessPartnerRatingType-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_partner' => 'string',
        'business_partner_rating_procedure' => 'string',
        'bp_rating_validity_end_date' => 'string',
        'business_partner_rating_grade' => 'string',
        'business_partner_rating_trend' => 'string',
        'bp_rating_validity_start_date' => 'string',
        'bp_rating_creation_date' => 'string',
        'business_partner_rating_comment' => 'string',
        'business_partner_rating_is_allowed' => 'bool',
        'bp_rating_is_valid_on_key_date' => 'bool',
        'business_partner_rating_key_date' => 'string',
        'business_partner_rating_is_expired' => 'bool',
        'bp_rating_long_comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_partner' => null,
        'business_partner_rating_procedure' => null,
        'bp_rating_validity_end_date' => null,
        'business_partner_rating_grade' => null,
        'business_partner_rating_trend' => null,
        'bp_rating_validity_start_date' => null,
        'bp_rating_creation_date' => null,
        'business_partner_rating_comment' => null,
        'business_partner_rating_is_allowed' => null,
        'bp_rating_is_valid_on_key_date' => null,
        'business_partner_rating_key_date' => null,
        'business_partner_rating_is_expired' => null,
        'bp_rating_long_comment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_partner' => false,
		'business_partner_rating_procedure' => false,
		'bp_rating_validity_end_date' => false,
		'business_partner_rating_grade' => true,
		'business_partner_rating_trend' => true,
		'bp_rating_validity_start_date' => true,
		'bp_rating_creation_date' => true,
		'business_partner_rating_comment' => true,
		'business_partner_rating_is_allowed' => true,
		'bp_rating_is_valid_on_key_date' => true,
		'business_partner_rating_key_date' => true,
		'business_partner_rating_is_expired' => true,
		'bp_rating_long_comment' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_partner' => 'BusinessPartner',
        'business_partner_rating_procedure' => 'BusinessPartnerRatingProcedure',
        'bp_rating_validity_end_date' => 'BPRatingValidityEndDate',
        'business_partner_rating_grade' => 'BusinessPartnerRatingGrade',
        'business_partner_rating_trend' => 'BusinessPartnerRatingTrend',
        'bp_rating_validity_start_date' => 'BPRatingValidityStartDate',
        'bp_rating_creation_date' => 'BPRatingCreationDate',
        'business_partner_rating_comment' => 'BusinessPartnerRatingComment',
        'business_partner_rating_is_allowed' => 'BusinessPartnerRatingIsAllowed',
        'bp_rating_is_valid_on_key_date' => 'BPRatingIsValidOnKeyDate',
        'business_partner_rating_key_date' => 'BusinessPartnerRatingKeyDate',
        'business_partner_rating_is_expired' => 'BusinessPartnerRatingIsExpired',
        'bp_rating_long_comment' => 'BPRatingLongComment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_partner' => 'setBusinessPartner',
        'business_partner_rating_procedure' => 'setBusinessPartnerRatingProcedure',
        'bp_rating_validity_end_date' => 'setBpRatingValidityEndDate',
        'business_partner_rating_grade' => 'setBusinessPartnerRatingGrade',
        'business_partner_rating_trend' => 'setBusinessPartnerRatingTrend',
        'bp_rating_validity_start_date' => 'setBpRatingValidityStartDate',
        'bp_rating_creation_date' => 'setBpRatingCreationDate',
        'business_partner_rating_comment' => 'setBusinessPartnerRatingComment',
        'business_partner_rating_is_allowed' => 'setBusinessPartnerRatingIsAllowed',
        'bp_rating_is_valid_on_key_date' => 'setBpRatingIsValidOnKeyDate',
        'business_partner_rating_key_date' => 'setBusinessPartnerRatingKeyDate',
        'business_partner_rating_is_expired' => 'setBusinessPartnerRatingIsExpired',
        'bp_rating_long_comment' => 'setBpRatingLongComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_partner' => 'getBusinessPartner',
        'business_partner_rating_procedure' => 'getBusinessPartnerRatingProcedure',
        'bp_rating_validity_end_date' => 'getBpRatingValidityEndDate',
        'business_partner_rating_grade' => 'getBusinessPartnerRatingGrade',
        'business_partner_rating_trend' => 'getBusinessPartnerRatingTrend',
        'bp_rating_validity_start_date' => 'getBpRatingValidityStartDate',
        'bp_rating_creation_date' => 'getBpRatingCreationDate',
        'business_partner_rating_comment' => 'getBusinessPartnerRatingComment',
        'business_partner_rating_is_allowed' => 'getBusinessPartnerRatingIsAllowed',
        'bp_rating_is_valid_on_key_date' => 'getBpRatingIsValidOnKeyDate',
        'business_partner_rating_key_date' => 'getBusinessPartnerRatingKeyDate',
        'business_partner_rating_is_expired' => 'getBusinessPartnerRatingIsExpired',
        'bp_rating_long_comment' => 'getBpRatingLongComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_partner', $data ?? [], null);
        $this->setIfExists('business_partner_rating_procedure', $data ?? [], null);
        $this->setIfExists('bp_rating_validity_end_date', $data ?? [], null);
        $this->setIfExists('business_partner_rating_grade', $data ?? [], null);
        $this->setIfExists('business_partner_rating_trend', $data ?? [], null);
        $this->setIfExists('bp_rating_validity_start_date', $data ?? [], null);
        $this->setIfExists('bp_rating_creation_date', $data ?? [], null);
        $this->setIfExists('business_partner_rating_comment', $data ?? [], null);
        $this->setIfExists('business_partner_rating_is_allowed', $data ?? [], null);
        $this->setIfExists('bp_rating_is_valid_on_key_date', $data ?? [], null);
        $this->setIfExists('business_partner_rating_key_date', $data ?? [], null);
        $this->setIfExists('business_partner_rating_is_expired', $data ?? [], null);
        $this->setIfExists('bp_rating_long_comment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['business_partner'] === null) {
            $invalidProperties[] = "'business_partner' can't be null";
        }
        if ((mb_strlen($this->container['business_partner']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['business_partner_rating_procedure'] === null) {
            $invalidProperties[] = "'business_partner_rating_procedure' can't be null";
        }
        if ((mb_strlen($this->container['business_partner_rating_procedure']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner_rating_procedure', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['bp_rating_validity_end_date'] === null) {
            $invalidProperties[] = "'bp_rating_validity_end_date' can't be null";
        }
        if (!is_null($this->container['business_partner_rating_grade']) && (mb_strlen($this->container['business_partner_rating_grade']) > 10)) {
            $invalidProperties[] = "invalid value for 'business_partner_rating_grade', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['business_partner_rating_trend']) && (mb_strlen($this->container['business_partner_rating_trend']) > 2)) {
            $invalidProperties[] = "invalid value for 'business_partner_rating_trend', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['business_partner_rating_comment']) && (mb_strlen($this->container['business_partner_rating_comment']) > 60)) {
            $invalidProperties[] = "invalid value for 'business_partner_rating_comment', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['bp_rating_long_comment']) && (mb_strlen($this->container['bp_rating_long_comment']) > 255)) {
            $invalidProperties[] = "invalid value for 'bp_rating_long_comment', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_partner
     *
     * @return string
     */
    public function getBusinessPartner()
    {
        return $this->container['business_partner'];
    }

    /**
     * Sets business_partner
     *
     * @param string $business_partner Business Partner Number
     *
     * @return self
     */
    public function setBusinessPartner($business_partner)
    {
        if (is_null($business_partner)) {
            throw new \InvalidArgumentException('non-nullable business_partner cannot be null');
        }
        if ((mb_strlen($business_partner) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner when calling APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['business_partner'] = $business_partner;

        return $this;
    }

    /**
     * Gets business_partner_rating_procedure
     *
     * @return string
     */
    public function getBusinessPartnerRatingProcedure()
    {
        return $this->container['business_partner_rating_procedure'];
    }

    /**
     * Sets business_partner_rating_procedure
     *
     * @param string $business_partner_rating_procedure business_partner_rating_procedure
     *
     * @return self
     */
    public function setBusinessPartnerRatingProcedure($business_partner_rating_procedure)
    {
        if (is_null($business_partner_rating_procedure)) {
            throw new \InvalidArgumentException('non-nullable business_partner_rating_procedure cannot be null');
        }
        if ((mb_strlen($business_partner_rating_procedure) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_rating_procedure when calling APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['business_partner_rating_procedure'] = $business_partner_rating_procedure;

        return $this;
    }

    /**
     * Gets bp_rating_validity_end_date
     *
     * @return string
     */
    public function getBpRatingValidityEndDate()
    {
        return $this->container['bp_rating_validity_end_date'];
    }

    /**
     * Sets bp_rating_validity_end_date
     *
     * @param string $bp_rating_validity_end_date Valid-to Date for Rating
     *
     * @return self
     */
    public function setBpRatingValidityEndDate($bp_rating_validity_end_date)
    {
        if (is_null($bp_rating_validity_end_date)) {
            throw new \InvalidArgumentException('non-nullable bp_rating_validity_end_date cannot be null');
        }
        $this->container['bp_rating_validity_end_date'] = $bp_rating_validity_end_date;

        return $this;
    }

    /**
     * Gets business_partner_rating_grade
     *
     * @return string|null
     */
    public function getBusinessPartnerRatingGrade()
    {
        return $this->container['business_partner_rating_grade'];
    }

    /**
     * Sets business_partner_rating_grade
     *
     * @param string|null $business_partner_rating_grade business_partner_rating_grade
     *
     * @return self
     */
    public function setBusinessPartnerRatingGrade($business_partner_rating_grade)
    {
        if (is_null($business_partner_rating_grade)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_rating_grade');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_rating_grade', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_rating_grade) && (mb_strlen($business_partner_rating_grade) > 10)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_rating_grade when calling APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['business_partner_rating_grade'] = $business_partner_rating_grade;

        return $this;
    }

    /**
     * Gets business_partner_rating_trend
     *
     * @return string|null
     */
    public function getBusinessPartnerRatingTrend()
    {
        return $this->container['business_partner_rating_trend'];
    }

    /**
     * Sets business_partner_rating_trend
     *
     * @param string|null $business_partner_rating_trend business_partner_rating_trend
     *
     * @return self
     */
    public function setBusinessPartnerRatingTrend($business_partner_rating_trend)
    {
        if (is_null($business_partner_rating_trend)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_rating_trend');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_rating_trend', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_rating_trend) && (mb_strlen($business_partner_rating_trend) > 2)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_rating_trend when calling APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['business_partner_rating_trend'] = $business_partner_rating_trend;

        return $this;
    }

    /**
     * Gets bp_rating_validity_start_date
     *
     * @return string|null
     */
    public function getBpRatingValidityStartDate()
    {
        return $this->container['bp_rating_validity_start_date'];
    }

    /**
     * Sets bp_rating_validity_start_date
     *
     * @param string|null $bp_rating_validity_start_date Valid-from Date for Rating
     *
     * @return self
     */
    public function setBpRatingValidityStartDate($bp_rating_validity_start_date)
    {
        if (is_null($bp_rating_validity_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_rating_validity_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_rating_validity_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_rating_validity_start_date'] = $bp_rating_validity_start_date;

        return $this;
    }

    /**
     * Gets bp_rating_creation_date
     *
     * @return string|null
     */
    public function getBpRatingCreationDate()
    {
        return $this->container['bp_rating_creation_date'];
    }

    /**
     * Sets bp_rating_creation_date
     *
     * @param string|null $bp_rating_creation_date Entered-on Date for Rating
     *
     * @return self
     */
    public function setBpRatingCreationDate($bp_rating_creation_date)
    {
        if (is_null($bp_rating_creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_rating_creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_rating_creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_rating_creation_date'] = $bp_rating_creation_date;

        return $this;
    }

    /**
     * Gets business_partner_rating_comment
     *
     * @return string|null
     */
    public function getBusinessPartnerRatingComment()
    {
        return $this->container['business_partner_rating_comment'];
    }

    /**
     * Sets business_partner_rating_comment
     *
     * @param string|null $business_partner_rating_comment Text for Ratings
     *
     * @return self
     */
    public function setBusinessPartnerRatingComment($business_partner_rating_comment)
    {
        if (is_null($business_partner_rating_comment)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_rating_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_rating_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($business_partner_rating_comment) && (mb_strlen($business_partner_rating_comment) > 60)) {
            throw new \InvalidArgumentException('invalid length for $business_partner_rating_comment when calling APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate., must be smaller than or equal to 60.');
        }

        $this->container['business_partner_rating_comment'] = $business_partner_rating_comment;

        return $this;
    }

    /**
     * Gets business_partner_rating_is_allowed
     *
     * @return bool|null
     */
    public function getBusinessPartnerRatingIsAllowed()
    {
        return $this->container['business_partner_rating_is_allowed'];
    }

    /**
     * Sets business_partner_rating_is_allowed
     *
     * @param bool|null $business_partner_rating_is_allowed business_partner_rating_is_allowed
     *
     * @return self
     */
    public function setBusinessPartnerRatingIsAllowed($business_partner_rating_is_allowed)
    {
        if (is_null($business_partner_rating_is_allowed)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_rating_is_allowed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_rating_is_allowed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_rating_is_allowed'] = $business_partner_rating_is_allowed;

        return $this;
    }

    /**
     * Gets bp_rating_is_valid_on_key_date
     *
     * @return bool|null
     */
    public function getBpRatingIsValidOnKeyDate()
    {
        return $this->container['bp_rating_is_valid_on_key_date'];
    }

    /**
     * Sets bp_rating_is_valid_on_key_date
     *
     * @param bool|null $bp_rating_is_valid_on_key_date Business Partner Rating is valid on Key Date
     *
     * @return self
     */
    public function setBpRatingIsValidOnKeyDate($bp_rating_is_valid_on_key_date)
    {
        if (is_null($bp_rating_is_valid_on_key_date)) {
            array_push($this->openAPINullablesSetToNull, 'bp_rating_is_valid_on_key_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_rating_is_valid_on_key_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bp_rating_is_valid_on_key_date'] = $bp_rating_is_valid_on_key_date;

        return $this;
    }

    /**
     * Gets business_partner_rating_key_date
     *
     * @return string|null
     */
    public function getBusinessPartnerRatingKeyDate()
    {
        return $this->container['business_partner_rating_key_date'];
    }

    /**
     * Sets business_partner_rating_key_date
     *
     * @param string|null $business_partner_rating_key_date Key Date of Accessing Business Partner Rating Data
     *
     * @return self
     */
    public function setBusinessPartnerRatingKeyDate($business_partner_rating_key_date)
    {
        if (is_null($business_partner_rating_key_date)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_rating_key_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_rating_key_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_rating_key_date'] = $business_partner_rating_key_date;

        return $this;
    }

    /**
     * Gets business_partner_rating_is_expired
     *
     * @return bool|null
     */
    public function getBusinessPartnerRatingIsExpired()
    {
        return $this->container['business_partner_rating_is_expired'];
    }

    /**
     * Sets business_partner_rating_is_expired
     *
     * @param bool|null $business_partner_rating_is_expired Rating Validity is Expired according to Permitted Period
     *
     * @return self
     */
    public function setBusinessPartnerRatingIsExpired($business_partner_rating_is_expired)
    {
        if (is_null($business_partner_rating_is_expired)) {
            array_push($this->openAPINullablesSetToNull, 'business_partner_rating_is_expired');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_partner_rating_is_expired', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_partner_rating_is_expired'] = $business_partner_rating_is_expired;

        return $this;
    }

    /**
     * Gets bp_rating_long_comment
     *
     * @return string|null
     */
    public function getBpRatingLongComment()
    {
        return $this->container['bp_rating_long_comment'];
    }

    /**
     * Sets bp_rating_long_comment
     *
     * @param string|null $bp_rating_long_comment Longtext for Rating
     *
     * @return self
     */
    public function setBpRatingLongComment($bp_rating_long_comment)
    {
        if (is_null($bp_rating_long_comment)) {
            array_push($this->openAPINullablesSetToNull, 'bp_rating_long_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bp_rating_long_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bp_rating_long_comment) && (mb_strlen($bp_rating_long_comment) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bp_rating_long_comment when calling APIBUSINESSPARTNERABusinessPartnerRatingTypeCreate., must be smaller than or equal to 255.');
        }

        $this->container['bp_rating_long_comment'] = $bp_rating_long_comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


